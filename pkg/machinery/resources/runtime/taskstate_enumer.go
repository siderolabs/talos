// Code generated by "enumer -type=TaskState -linecomment -text"; DO NOT EDIT.

package runtime

import (
	"fmt"
	"strings"
)

const _TaskStateName = "createdrunningstoppingcompleted"

var _TaskStateIndex = [...]uint8{0, 7, 14, 22, 31}

const _TaskStateLowerName = "createdrunningstoppingcompleted"

func (i TaskState) String() string {
	if i < 0 || i >= TaskState(len(_TaskStateIndex)-1) {
		return fmt.Sprintf("TaskState(%d)", i)
	}
	return _TaskStateName[_TaskStateIndex[i]:_TaskStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TaskStateNoOp() {
	var x [1]struct{}
	_ = x[TaskStateCreated-(0)]
	_ = x[TaskStateRunning-(1)]
	_ = x[TaskStateStopping-(2)]
	_ = x[TaskStateCompleted-(3)]
}

var _TaskStateValues = []TaskState{TaskStateCreated, TaskStateRunning, TaskStateStopping, TaskStateCompleted}

var _TaskStateNameToValueMap = map[string]TaskState{
	_TaskStateName[0:7]:        TaskStateCreated,
	_TaskStateLowerName[0:7]:   TaskStateCreated,
	_TaskStateName[7:14]:       TaskStateRunning,
	_TaskStateLowerName[7:14]:  TaskStateRunning,
	_TaskStateName[14:22]:      TaskStateStopping,
	_TaskStateLowerName[14:22]: TaskStateStopping,
	_TaskStateName[22:31]:      TaskStateCompleted,
	_TaskStateLowerName[22:31]: TaskStateCompleted,
}

var _TaskStateNames = []string{
	_TaskStateName[0:7],
	_TaskStateName[7:14],
	_TaskStateName[14:22],
	_TaskStateName[22:31],
}

// TaskStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskStateString(s string) (TaskState, error) {
	if val, ok := _TaskStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TaskStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskState values", s)
}

// TaskStateValues returns all values of the enum
func TaskStateValues() []TaskState {
	return _TaskStateValues
}

// TaskStateStrings returns a slice of all String values of the enum
func TaskStateStrings() []string {
	strs := make([]string, len(_TaskStateNames))
	copy(strs, _TaskStateNames)
	return strs
}

// IsATaskState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskState) IsATaskState() bool {
	for _, v := range _TaskStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for TaskState
func (i TaskState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TaskState
func (i *TaskState) UnmarshalText(text []byte) error {
	var err error
	*i, err = TaskStateString(string(text))
	return err
}

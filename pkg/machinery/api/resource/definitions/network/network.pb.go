// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: resource/definitions/network/network.proto

package network

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"

	common "github.com/siderolabs/talos/pkg/machinery/api/common"
	enums "github.com/siderolabs/talos/pkg/machinery/api/resource/definitions/enums"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AddressSpecSpec describes status of rendered secrets.
type AddressSpecSpec struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	Address         *common.NetIPPrefix      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LinkName        string                   `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	Family          enums.NethelpersFamily   `protobuf:"varint,3,opt,name=family,proto3,enum=talos.resource.definitions.enums.NethelpersFamily" json:"family,omitempty"`
	Scope           enums.NethelpersScope    `protobuf:"varint,4,opt,name=scope,proto3,enum=talos.resource.definitions.enums.NethelpersScope" json:"scope,omitempty"`
	Flags           uint32                   `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	AnnounceWithArp bool                     `protobuf:"varint,6,opt,name=announce_with_arp,json=announceWithArp,proto3" json:"announce_with_arp,omitempty"`
	ConfigLayer     enums.NetworkConfigLayer `protobuf:"varint,7,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddressSpecSpec) Reset() {
	*x = AddressSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpecSpec) ProtoMessage() {}

func (x *AddressSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpecSpec.ProtoReflect.Descriptor instead.
func (*AddressSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{0}
}

func (x *AddressSpecSpec) GetAddress() *common.NetIPPrefix {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AddressSpecSpec) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *AddressSpecSpec) GetFamily() enums.NethelpersFamily {
	if x != nil {
		return x.Family
	}
	return enums.NethelpersFamily(0)
}

func (x *AddressSpecSpec) GetScope() enums.NethelpersScope {
	if x != nil {
		return x.Scope
	}
	return enums.NethelpersScope(0)
}

func (x *AddressSpecSpec) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *AddressSpecSpec) GetAnnounceWithArp() bool {
	if x != nil {
		return x.AnnounceWithArp
	}
	return false
}

func (x *AddressSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

// AddressStatusSpec describes status of rendered secrets.
type AddressStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *common.NetIPPrefix    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Local         *common.NetIP          `protobuf:"bytes,2,opt,name=local,proto3" json:"local,omitempty"`
	Broadcast     *common.NetIP          `protobuf:"bytes,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Anycast       *common.NetIP          `protobuf:"bytes,4,opt,name=anycast,proto3" json:"anycast,omitempty"`
	Multicast     *common.NetIP          `protobuf:"bytes,5,opt,name=multicast,proto3" json:"multicast,omitempty"`
	LinkIndex     uint32                 `protobuf:"varint,6,opt,name=link_index,json=linkIndex,proto3" json:"link_index,omitempty"`
	LinkName      string                 `protobuf:"bytes,7,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	Family        enums.NethelpersFamily `protobuf:"varint,8,opt,name=family,proto3,enum=talos.resource.definitions.enums.NethelpersFamily" json:"family,omitempty"`
	Scope         enums.NethelpersScope  `protobuf:"varint,9,opt,name=scope,proto3,enum=talos.resource.definitions.enums.NethelpersScope" json:"scope,omitempty"`
	Flags         uint32                 `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressStatusSpec) Reset() {
	*x = AddressStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressStatusSpec) ProtoMessage() {}

func (x *AddressStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressStatusSpec.ProtoReflect.Descriptor instead.
func (*AddressStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{1}
}

func (x *AddressStatusSpec) GetAddress() *common.NetIPPrefix {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AddressStatusSpec) GetLocal() *common.NetIP {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *AddressStatusSpec) GetBroadcast() *common.NetIP {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *AddressStatusSpec) GetAnycast() *common.NetIP {
	if x != nil {
		return x.Anycast
	}
	return nil
}

func (x *AddressStatusSpec) GetMulticast() *common.NetIP {
	if x != nil {
		return x.Multicast
	}
	return nil
}

func (x *AddressStatusSpec) GetLinkIndex() uint32 {
	if x != nil {
		return x.LinkIndex
	}
	return 0
}

func (x *AddressStatusSpec) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *AddressStatusSpec) GetFamily() enums.NethelpersFamily {
	if x != nil {
		return x.Family
	}
	return enums.NethelpersFamily(0)
}

func (x *AddressStatusSpec) GetScope() enums.NethelpersScope {
	if x != nil {
		return x.Scope
	}
	return enums.NethelpersScope(0)
}

func (x *AddressStatusSpec) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// BondMasterSpec describes bond settings if Kind == "bond".
type BondMasterSpec struct {
	state           protoimpl.MessageState             `protogen:"open.v1"`
	Mode            enums.NethelpersBondMode           `protobuf:"varint,1,opt,name=mode,proto3,enum=talos.resource.definitions.enums.NethelpersBondMode" json:"mode,omitempty"`
	HashPolicy      enums.NethelpersBondXmitHashPolicy `protobuf:"varint,2,opt,name=hash_policy,json=hashPolicy,proto3,enum=talos.resource.definitions.enums.NethelpersBondXmitHashPolicy" json:"hash_policy,omitempty"`
	LacpRate        enums.NethelpersLACPRate           `protobuf:"varint,3,opt,name=lacp_rate,json=lacpRate,proto3,enum=talos.resource.definitions.enums.NethelpersLACPRate" json:"lacp_rate,omitempty"`
	ArpValidate     enums.NethelpersARPValidate        `protobuf:"varint,4,opt,name=arp_validate,json=arpValidate,proto3,enum=talos.resource.definitions.enums.NethelpersARPValidate" json:"arp_validate,omitempty"`
	ArpAllTargets   enums.NethelpersARPAllTargets      `protobuf:"varint,5,opt,name=arp_all_targets,json=arpAllTargets,proto3,enum=talos.resource.definitions.enums.NethelpersARPAllTargets" json:"arp_all_targets,omitempty"`
	PrimaryIndex    uint32                             `protobuf:"varint,6,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`
	PrimaryReselect enums.NethelpersPrimaryReselect    `protobuf:"varint,7,opt,name=primary_reselect,json=primaryReselect,proto3,enum=talos.resource.definitions.enums.NethelpersPrimaryReselect" json:"primary_reselect,omitempty"`
	FailOverMac     enums.NethelpersFailOverMAC        `protobuf:"varint,8,opt,name=fail_over_mac,json=failOverMac,proto3,enum=talos.resource.definitions.enums.NethelpersFailOverMAC" json:"fail_over_mac,omitempty"`
	AdSelect        enums.NethelpersADSelect           `protobuf:"varint,9,opt,name=ad_select,json=adSelect,proto3,enum=talos.resource.definitions.enums.NethelpersADSelect" json:"ad_select,omitempty"`
	MiiMon          uint32                             `protobuf:"varint,10,opt,name=mii_mon,json=miiMon,proto3" json:"mii_mon,omitempty"`
	UpDelay         uint32                             `protobuf:"varint,11,opt,name=up_delay,json=upDelay,proto3" json:"up_delay,omitempty"`
	DownDelay       uint32                             `protobuf:"varint,12,opt,name=down_delay,json=downDelay,proto3" json:"down_delay,omitempty"`
	ArpInterval     uint32                             `protobuf:"varint,13,opt,name=arp_interval,json=arpInterval,proto3" json:"arp_interval,omitempty"`
	ResendIgmp      uint32                             `protobuf:"varint,14,opt,name=resend_igmp,json=resendIgmp,proto3" json:"resend_igmp,omitempty"`
	MinLinks        uint32                             `protobuf:"varint,15,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty"`
	LpInterval      uint32                             `protobuf:"varint,16,opt,name=lp_interval,json=lpInterval,proto3" json:"lp_interval,omitempty"`
	PacketsPerSlave uint32                             `protobuf:"varint,17,opt,name=packets_per_slave,json=packetsPerSlave,proto3" json:"packets_per_slave,omitempty"`
	NumPeerNotif    uint32                             `protobuf:"fixed32,18,opt,name=num_peer_notif,json=numPeerNotif,proto3" json:"num_peer_notif,omitempty"`
	TlbDynamicLb    uint32                             `protobuf:"fixed32,19,opt,name=tlb_dynamic_lb,json=tlbDynamicLb,proto3" json:"tlb_dynamic_lb,omitempty"`
	AllSlavesActive uint32                             `protobuf:"fixed32,20,opt,name=all_slaves_active,json=allSlavesActive,proto3" json:"all_slaves_active,omitempty"`
	UseCarrier      bool                               `protobuf:"varint,21,opt,name=use_carrier,json=useCarrier,proto3" json:"use_carrier,omitempty"`
	AdActorSysPrio  uint32                             `protobuf:"fixed32,22,opt,name=ad_actor_sys_prio,json=adActorSysPrio,proto3" json:"ad_actor_sys_prio,omitempty"`
	AdUserPortKey   uint32                             `protobuf:"fixed32,23,opt,name=ad_user_port_key,json=adUserPortKey,proto3" json:"ad_user_port_key,omitempty"`
	PeerNotifyDelay uint32                             `protobuf:"varint,24,opt,name=peer_notify_delay,json=peerNotifyDelay,proto3" json:"peer_notify_delay,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BondMasterSpec) Reset() {
	*x = BondMasterSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BondMasterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondMasterSpec) ProtoMessage() {}

func (x *BondMasterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondMasterSpec.ProtoReflect.Descriptor instead.
func (*BondMasterSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{2}
}

func (x *BondMasterSpec) GetMode() enums.NethelpersBondMode {
	if x != nil {
		return x.Mode
	}
	return enums.NethelpersBondMode(0)
}

func (x *BondMasterSpec) GetHashPolicy() enums.NethelpersBondXmitHashPolicy {
	if x != nil {
		return x.HashPolicy
	}
	return enums.NethelpersBondXmitHashPolicy(0)
}

func (x *BondMasterSpec) GetLacpRate() enums.NethelpersLACPRate {
	if x != nil {
		return x.LacpRate
	}
	return enums.NethelpersLACPRate(0)
}

func (x *BondMasterSpec) GetArpValidate() enums.NethelpersARPValidate {
	if x != nil {
		return x.ArpValidate
	}
	return enums.NethelpersARPValidate(0)
}

func (x *BondMasterSpec) GetArpAllTargets() enums.NethelpersARPAllTargets {
	if x != nil {
		return x.ArpAllTargets
	}
	return enums.NethelpersARPAllTargets(0)
}

func (x *BondMasterSpec) GetPrimaryIndex() uint32 {
	if x != nil {
		return x.PrimaryIndex
	}
	return 0
}

func (x *BondMasterSpec) GetPrimaryReselect() enums.NethelpersPrimaryReselect {
	if x != nil {
		return x.PrimaryReselect
	}
	return enums.NethelpersPrimaryReselect(0)
}

func (x *BondMasterSpec) GetFailOverMac() enums.NethelpersFailOverMAC {
	if x != nil {
		return x.FailOverMac
	}
	return enums.NethelpersFailOverMAC(0)
}

func (x *BondMasterSpec) GetAdSelect() enums.NethelpersADSelect {
	if x != nil {
		return x.AdSelect
	}
	return enums.NethelpersADSelect(0)
}

func (x *BondMasterSpec) GetMiiMon() uint32 {
	if x != nil {
		return x.MiiMon
	}
	return 0
}

func (x *BondMasterSpec) GetUpDelay() uint32 {
	if x != nil {
		return x.UpDelay
	}
	return 0
}

func (x *BondMasterSpec) GetDownDelay() uint32 {
	if x != nil {
		return x.DownDelay
	}
	return 0
}

func (x *BondMasterSpec) GetArpInterval() uint32 {
	if x != nil {
		return x.ArpInterval
	}
	return 0
}

func (x *BondMasterSpec) GetResendIgmp() uint32 {
	if x != nil {
		return x.ResendIgmp
	}
	return 0
}

func (x *BondMasterSpec) GetMinLinks() uint32 {
	if x != nil {
		return x.MinLinks
	}
	return 0
}

func (x *BondMasterSpec) GetLpInterval() uint32 {
	if x != nil {
		return x.LpInterval
	}
	return 0
}

func (x *BondMasterSpec) GetPacketsPerSlave() uint32 {
	if x != nil {
		return x.PacketsPerSlave
	}
	return 0
}

func (x *BondMasterSpec) GetNumPeerNotif() uint32 {
	if x != nil {
		return x.NumPeerNotif
	}
	return 0
}

func (x *BondMasterSpec) GetTlbDynamicLb() uint32 {
	if x != nil {
		return x.TlbDynamicLb
	}
	return 0
}

func (x *BondMasterSpec) GetAllSlavesActive() uint32 {
	if x != nil {
		return x.AllSlavesActive
	}
	return 0
}

func (x *BondMasterSpec) GetUseCarrier() bool {
	if x != nil {
		return x.UseCarrier
	}
	return false
}

func (x *BondMasterSpec) GetAdActorSysPrio() uint32 {
	if x != nil {
		return x.AdActorSysPrio
	}
	return 0
}

func (x *BondMasterSpec) GetAdUserPortKey() uint32 {
	if x != nil {
		return x.AdUserPortKey
	}
	return 0
}

func (x *BondMasterSpec) GetPeerNotifyDelay() uint32 {
	if x != nil {
		return x.PeerNotifyDelay
	}
	return 0
}

// BondSlave contains a bond's master name and slave index.
type BondSlave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MasterName    string                 `protobuf:"bytes,1,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	SlaveIndex    int64                  `protobuf:"varint,2,opt,name=slave_index,json=slaveIndex,proto3" json:"slave_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BondSlave) Reset() {
	*x = BondSlave{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BondSlave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondSlave) ProtoMessage() {}

func (x *BondSlave) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondSlave.ProtoReflect.Descriptor instead.
func (*BondSlave) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{3}
}

func (x *BondSlave) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *BondSlave) GetSlaveIndex() int64 {
	if x != nil {
		return x.SlaveIndex
	}
	return 0
}

// BridgeMasterSpec describes bridge settings if Kind == "bridge".
type BridgeMasterSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stp           *STPSpec               `protobuf:"bytes,1,opt,name=stp,proto3" json:"stp,omitempty"`
	Vlan          *BridgeVLANSpec        `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BridgeMasterSpec) Reset() {
	*x = BridgeMasterSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeMasterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeMasterSpec) ProtoMessage() {}

func (x *BridgeMasterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeMasterSpec.ProtoReflect.Descriptor instead.
func (*BridgeMasterSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{4}
}

func (x *BridgeMasterSpec) GetStp() *STPSpec {
	if x != nil {
		return x.Stp
	}
	return nil
}

func (x *BridgeMasterSpec) GetVlan() *BridgeVLANSpec {
	if x != nil {
		return x.Vlan
	}
	return nil
}

// BridgeSlave contains the name of the master bridge of a bridged interface
type BridgeSlave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MasterName    string                 `protobuf:"bytes,1,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BridgeSlave) Reset() {
	*x = BridgeSlave{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeSlave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeSlave) ProtoMessage() {}

func (x *BridgeSlave) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeSlave.ProtoReflect.Descriptor instead.
func (*BridgeSlave) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{5}
}

func (x *BridgeSlave) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

// BridgeVLANSpec describes VLAN settings of a bridge.
type BridgeVLANSpec struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FilteringEnabled bool                   `protobuf:"varint,1,opt,name=filtering_enabled,json=filteringEnabled,proto3" json:"filtering_enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BridgeVLANSpec) Reset() {
	*x = BridgeVLANSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeVLANSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeVLANSpec) ProtoMessage() {}

func (x *BridgeVLANSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeVLANSpec.ProtoReflect.Descriptor instead.
func (*BridgeVLANSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{6}
}

func (x *BridgeVLANSpec) GetFilteringEnabled() bool {
	if x != nil {
		return x.FilteringEnabled
	}
	return false
}

// DHCP4OperatorSpec describes DHCP4 operator options.
type DHCP4OperatorSpec struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RouteMetric         uint32                 `protobuf:"varint,1,opt,name=route_metric,json=routeMetric,proto3" json:"route_metric,omitempty"`
	SkipHostnameRequest bool                   `protobuf:"varint,2,opt,name=skip_hostname_request,json=skipHostnameRequest,proto3" json:"skip_hostname_request,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DHCP4OperatorSpec) Reset() {
	*x = DHCP4OperatorSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DHCP4OperatorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCP4OperatorSpec) ProtoMessage() {}

func (x *DHCP4OperatorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCP4OperatorSpec.ProtoReflect.Descriptor instead.
func (*DHCP4OperatorSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{7}
}

func (x *DHCP4OperatorSpec) GetRouteMetric() uint32 {
	if x != nil {
		return x.RouteMetric
	}
	return 0
}

func (x *DHCP4OperatorSpec) GetSkipHostnameRequest() bool {
	if x != nil {
		return x.SkipHostnameRequest
	}
	return false
}

// DHCP6OperatorSpec describes DHCP6 operator options.
type DHCP6OperatorSpec struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Duid                string                 `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
	RouteMetric         uint32                 `protobuf:"varint,2,opt,name=route_metric,json=routeMetric,proto3" json:"route_metric,omitempty"`
	SkipHostnameRequest bool                   `protobuf:"varint,3,opt,name=skip_hostname_request,json=skipHostnameRequest,proto3" json:"skip_hostname_request,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DHCP6OperatorSpec) Reset() {
	*x = DHCP6OperatorSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DHCP6OperatorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCP6OperatorSpec) ProtoMessage() {}

func (x *DHCP6OperatorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCP6OperatorSpec.ProtoReflect.Descriptor instead.
func (*DHCP6OperatorSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{8}
}

func (x *DHCP6OperatorSpec) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *DHCP6OperatorSpec) GetRouteMetric() uint32 {
	if x != nil {
		return x.RouteMetric
	}
	return 0
}

func (x *DHCP6OperatorSpec) GetSkipHostnameRequest() bool {
	if x != nil {
		return x.SkipHostnameRequest
	}
	return false
}

// DNSResolveCacheSpec describes DNS servers status.
type DNSResolveCacheSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSResolveCacheSpec) Reset() {
	*x = DNSResolveCacheSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSResolveCacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResolveCacheSpec) ProtoMessage() {}

func (x *DNSResolveCacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResolveCacheSpec.ProtoReflect.Descriptor instead.
func (*DNSResolveCacheSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{9}
}

func (x *DNSResolveCacheSpec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// EthernetChannelsSpec describes config of Ethernet channels.
type EthernetChannelsSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rx            uint32                 `protobuf:"varint,1,opt,name=rx,proto3" json:"rx,omitempty"`
	Tx            uint32                 `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Other         uint32                 `protobuf:"varint,3,opt,name=other,proto3" json:"other,omitempty"`
	Combined      uint32                 `protobuf:"varint,4,opt,name=combined,proto3" json:"combined,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthernetChannelsSpec) Reset() {
	*x = EthernetChannelsSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetChannelsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetChannelsSpec) ProtoMessage() {}

func (x *EthernetChannelsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetChannelsSpec.ProtoReflect.Descriptor instead.
func (*EthernetChannelsSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{10}
}

func (x *EthernetChannelsSpec) GetRx() uint32 {
	if x != nil {
		return x.Rx
	}
	return 0
}

func (x *EthernetChannelsSpec) GetTx() uint32 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *EthernetChannelsSpec) GetOther() uint32 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *EthernetChannelsSpec) GetCombined() uint32 {
	if x != nil {
		return x.Combined
	}
	return 0
}

// EthernetChannelsStatus describes status of Ethernet channels.
type EthernetChannelsStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RxMax         uint32                 `protobuf:"varint,1,opt,name=rx_max,json=rxMax,proto3" json:"rx_max,omitempty"`
	TxMax         uint32                 `protobuf:"varint,2,opt,name=tx_max,json=txMax,proto3" json:"tx_max,omitempty"`
	OtherMax      uint32                 `protobuf:"varint,3,opt,name=other_max,json=otherMax,proto3" json:"other_max,omitempty"`
	CombinedMax   uint32                 `protobuf:"varint,4,opt,name=combined_max,json=combinedMax,proto3" json:"combined_max,omitempty"`
	Rx            uint32                 `protobuf:"varint,5,opt,name=rx,proto3" json:"rx,omitempty"`
	Tx            uint32                 `protobuf:"varint,6,opt,name=tx,proto3" json:"tx,omitempty"`
	Other         uint32                 `protobuf:"varint,7,opt,name=other,proto3" json:"other,omitempty"`
	Combined      uint32                 `protobuf:"varint,8,opt,name=combined,proto3" json:"combined,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthernetChannelsStatus) Reset() {
	*x = EthernetChannelsStatus{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetChannelsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetChannelsStatus) ProtoMessage() {}

func (x *EthernetChannelsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetChannelsStatus.ProtoReflect.Descriptor instead.
func (*EthernetChannelsStatus) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{11}
}

func (x *EthernetChannelsStatus) GetRxMax() uint32 {
	if x != nil {
		return x.RxMax
	}
	return 0
}

func (x *EthernetChannelsStatus) GetTxMax() uint32 {
	if x != nil {
		return x.TxMax
	}
	return 0
}

func (x *EthernetChannelsStatus) GetOtherMax() uint32 {
	if x != nil {
		return x.OtherMax
	}
	return 0
}

func (x *EthernetChannelsStatus) GetCombinedMax() uint32 {
	if x != nil {
		return x.CombinedMax
	}
	return 0
}

func (x *EthernetChannelsStatus) GetRx() uint32 {
	if x != nil {
		return x.Rx
	}
	return 0
}

func (x *EthernetChannelsStatus) GetTx() uint32 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *EthernetChannelsStatus) GetOther() uint32 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *EthernetChannelsStatus) GetCombined() uint32 {
	if x != nil {
		return x.Combined
	}
	return 0
}

// EthernetFeatureStatus describes status of Ethernet features.
type EthernetFeatureStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthernetFeatureStatus) Reset() {
	*x = EthernetFeatureStatus{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetFeatureStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetFeatureStatus) ProtoMessage() {}

func (x *EthernetFeatureStatus) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetFeatureStatus.ProtoReflect.Descriptor instead.
func (*EthernetFeatureStatus) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{12}
}

func (x *EthernetFeatureStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EthernetFeatureStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// EthernetRingsSpec describes config of Ethernet rings.
type EthernetRingsSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rx            uint32                 `protobuf:"varint,1,opt,name=rx,proto3" json:"rx,omitempty"`
	RxMini        uint32                 `protobuf:"varint,2,opt,name=rx_mini,json=rxMini,proto3" json:"rx_mini,omitempty"`
	RxJumbo       uint32                 `protobuf:"varint,3,opt,name=rx_jumbo,json=rxJumbo,proto3" json:"rx_jumbo,omitempty"`
	Tx            uint32                 `protobuf:"varint,4,opt,name=tx,proto3" json:"tx,omitempty"`
	RxBufLen      uint32                 `protobuf:"varint,5,opt,name=rx_buf_len,json=rxBufLen,proto3" json:"rx_buf_len,omitempty"`
	CqeSize       uint32                 `protobuf:"varint,6,opt,name=cqe_size,json=cqeSize,proto3" json:"cqe_size,omitempty"`
	TxPush        bool                   `protobuf:"varint,7,opt,name=tx_push,json=txPush,proto3" json:"tx_push,omitempty"`
	RxPush        bool                   `protobuf:"varint,8,opt,name=rx_push,json=rxPush,proto3" json:"rx_push,omitempty"`
	TxPushBufLen  uint32                 `protobuf:"varint,9,opt,name=tx_push_buf_len,json=txPushBufLen,proto3" json:"tx_push_buf_len,omitempty"`
	TcpDataSplit  bool                   `protobuf:"varint,10,opt,name=tcp_data_split,json=tcpDataSplit,proto3" json:"tcp_data_split,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthernetRingsSpec) Reset() {
	*x = EthernetRingsSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetRingsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetRingsSpec) ProtoMessage() {}

func (x *EthernetRingsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetRingsSpec.ProtoReflect.Descriptor instead.
func (*EthernetRingsSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{13}
}

func (x *EthernetRingsSpec) GetRx() uint32 {
	if x != nil {
		return x.Rx
	}
	return 0
}

func (x *EthernetRingsSpec) GetRxMini() uint32 {
	if x != nil {
		return x.RxMini
	}
	return 0
}

func (x *EthernetRingsSpec) GetRxJumbo() uint32 {
	if x != nil {
		return x.RxJumbo
	}
	return 0
}

func (x *EthernetRingsSpec) GetTx() uint32 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *EthernetRingsSpec) GetRxBufLen() uint32 {
	if x != nil {
		return x.RxBufLen
	}
	return 0
}

func (x *EthernetRingsSpec) GetCqeSize() uint32 {
	if x != nil {
		return x.CqeSize
	}
	return 0
}

func (x *EthernetRingsSpec) GetTxPush() bool {
	if x != nil {
		return x.TxPush
	}
	return false
}

func (x *EthernetRingsSpec) GetRxPush() bool {
	if x != nil {
		return x.RxPush
	}
	return false
}

func (x *EthernetRingsSpec) GetTxPushBufLen() uint32 {
	if x != nil {
		return x.TxPushBufLen
	}
	return 0
}

func (x *EthernetRingsSpec) GetTcpDataSplit() bool {
	if x != nil {
		return x.TcpDataSplit
	}
	return false
}

// EthernetRingsStatus describes status of Ethernet rings.
type EthernetRingsStatus struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RxMax           uint32                 `protobuf:"varint,1,opt,name=rx_max,json=rxMax,proto3" json:"rx_max,omitempty"`
	RxMiniMax       uint32                 `protobuf:"varint,2,opt,name=rx_mini_max,json=rxMiniMax,proto3" json:"rx_mini_max,omitempty"`
	RxJumboMax      uint32                 `protobuf:"varint,3,opt,name=rx_jumbo_max,json=rxJumboMax,proto3" json:"rx_jumbo_max,omitempty"`
	TxMax           uint32                 `protobuf:"varint,4,opt,name=tx_max,json=txMax,proto3" json:"tx_max,omitempty"`
	TxPushBufLenMax uint32                 `protobuf:"varint,5,opt,name=tx_push_buf_len_max,json=txPushBufLenMax,proto3" json:"tx_push_buf_len_max,omitempty"`
	Rx              uint32                 `protobuf:"varint,6,opt,name=rx,proto3" json:"rx,omitempty"`
	RxMini          uint32                 `protobuf:"varint,7,opt,name=rx_mini,json=rxMini,proto3" json:"rx_mini,omitempty"`
	RxJumbo         uint32                 `protobuf:"varint,8,opt,name=rx_jumbo,json=rxJumbo,proto3" json:"rx_jumbo,omitempty"`
	Tx              uint32                 `protobuf:"varint,9,opt,name=tx,proto3" json:"tx,omitempty"`
	RxBufLen        uint32                 `protobuf:"varint,10,opt,name=rx_buf_len,json=rxBufLen,proto3" json:"rx_buf_len,omitempty"`
	CqeSize         uint32                 `protobuf:"varint,11,opt,name=cqe_size,json=cqeSize,proto3" json:"cqe_size,omitempty"`
	TxPush          bool                   `protobuf:"varint,12,opt,name=tx_push,json=txPush,proto3" json:"tx_push,omitempty"`
	RxPush          bool                   `protobuf:"varint,13,opt,name=rx_push,json=rxPush,proto3" json:"rx_push,omitempty"`
	TxPushBufLen    uint32                 `protobuf:"varint,14,opt,name=tx_push_buf_len,json=txPushBufLen,proto3" json:"tx_push_buf_len,omitempty"`
	TcpDataSplit    bool                   `protobuf:"varint,15,opt,name=tcp_data_split,json=tcpDataSplit,proto3" json:"tcp_data_split,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EthernetRingsStatus) Reset() {
	*x = EthernetRingsStatus{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetRingsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetRingsStatus) ProtoMessage() {}

func (x *EthernetRingsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetRingsStatus.ProtoReflect.Descriptor instead.
func (*EthernetRingsStatus) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{14}
}

func (x *EthernetRingsStatus) GetRxMax() uint32 {
	if x != nil {
		return x.RxMax
	}
	return 0
}

func (x *EthernetRingsStatus) GetRxMiniMax() uint32 {
	if x != nil {
		return x.RxMiniMax
	}
	return 0
}

func (x *EthernetRingsStatus) GetRxJumboMax() uint32 {
	if x != nil {
		return x.RxJumboMax
	}
	return 0
}

func (x *EthernetRingsStatus) GetTxMax() uint32 {
	if x != nil {
		return x.TxMax
	}
	return 0
}

func (x *EthernetRingsStatus) GetTxPushBufLenMax() uint32 {
	if x != nil {
		return x.TxPushBufLenMax
	}
	return 0
}

func (x *EthernetRingsStatus) GetRx() uint32 {
	if x != nil {
		return x.Rx
	}
	return 0
}

func (x *EthernetRingsStatus) GetRxMini() uint32 {
	if x != nil {
		return x.RxMini
	}
	return 0
}

func (x *EthernetRingsStatus) GetRxJumbo() uint32 {
	if x != nil {
		return x.RxJumbo
	}
	return 0
}

func (x *EthernetRingsStatus) GetTx() uint32 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *EthernetRingsStatus) GetRxBufLen() uint32 {
	if x != nil {
		return x.RxBufLen
	}
	return 0
}

func (x *EthernetRingsStatus) GetCqeSize() uint32 {
	if x != nil {
		return x.CqeSize
	}
	return 0
}

func (x *EthernetRingsStatus) GetTxPush() bool {
	if x != nil {
		return x.TxPush
	}
	return false
}

func (x *EthernetRingsStatus) GetRxPush() bool {
	if x != nil {
		return x.RxPush
	}
	return false
}

func (x *EthernetRingsStatus) GetTxPushBufLen() uint32 {
	if x != nil {
		return x.TxPushBufLen
	}
	return 0
}

func (x *EthernetRingsStatus) GetTcpDataSplit() bool {
	if x != nil {
		return x.TcpDataSplit
	}
	return false
}

// EthernetSpecSpec describes config of Ethernet link.
type EthernetSpecSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rings         *EthernetRingsSpec     `protobuf:"bytes,1,opt,name=rings,proto3" json:"rings,omitempty"`
	Features      map[string]bool        `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Channels      *EthernetChannelsSpec  `protobuf:"bytes,3,opt,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthernetSpecSpec) Reset() {
	*x = EthernetSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetSpecSpec) ProtoMessage() {}

func (x *EthernetSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetSpecSpec.ProtoReflect.Descriptor instead.
func (*EthernetSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{15}
}

func (x *EthernetSpecSpec) GetRings() *EthernetRingsSpec {
	if x != nil {
		return x.Rings
	}
	return nil
}

func (x *EthernetSpecSpec) GetFeatures() map[string]bool {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *EthernetSpecSpec) GetChannels() *EthernetChannelsSpec {
	if x != nil {
		return x.Channels
	}
	return nil
}

// EthernetStatusSpec describes status of rendered secrets.
type EthernetStatusSpec struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	LinkState     bool                     `protobuf:"varint,1,opt,name=link_state,json=linkState,proto3" json:"link_state,omitempty"`
	SpeedMegabits int64                    `protobuf:"varint,2,opt,name=speed_megabits,json=speedMegabits,proto3" json:"speed_megabits,omitempty"`
	Port          enums.NethelpersPort     `protobuf:"varint,3,opt,name=port,proto3,enum=talos.resource.definitions.enums.NethelpersPort" json:"port,omitempty"`
	Duplex        enums.NethelpersDuplex   `protobuf:"varint,4,opt,name=duplex,proto3,enum=talos.resource.definitions.enums.NethelpersDuplex" json:"duplex,omitempty"`
	OurModes      []string                 `protobuf:"bytes,5,rep,name=our_modes,json=ourModes,proto3" json:"our_modes,omitempty"`
	PeerModes     []string                 `protobuf:"bytes,6,rep,name=peer_modes,json=peerModes,proto3" json:"peer_modes,omitempty"`
	Rings         *EthernetRingsStatus     `protobuf:"bytes,7,opt,name=rings,proto3" json:"rings,omitempty"`
	Features      []*EthernetFeatureStatus `protobuf:"bytes,8,rep,name=features,proto3" json:"features,omitempty"`
	Channels      *EthernetChannelsStatus  `protobuf:"bytes,9,opt,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthernetStatusSpec) Reset() {
	*x = EthernetStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthernetStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetStatusSpec) ProtoMessage() {}

func (x *EthernetStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetStatusSpec.ProtoReflect.Descriptor instead.
func (*EthernetStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{16}
}

func (x *EthernetStatusSpec) GetLinkState() bool {
	if x != nil {
		return x.LinkState
	}
	return false
}

func (x *EthernetStatusSpec) GetSpeedMegabits() int64 {
	if x != nil {
		return x.SpeedMegabits
	}
	return 0
}

func (x *EthernetStatusSpec) GetPort() enums.NethelpersPort {
	if x != nil {
		return x.Port
	}
	return enums.NethelpersPort(0)
}

func (x *EthernetStatusSpec) GetDuplex() enums.NethelpersDuplex {
	if x != nil {
		return x.Duplex
	}
	return enums.NethelpersDuplex(0)
}

func (x *EthernetStatusSpec) GetOurModes() []string {
	if x != nil {
		return x.OurModes
	}
	return nil
}

func (x *EthernetStatusSpec) GetPeerModes() []string {
	if x != nil {
		return x.PeerModes
	}
	return nil
}

func (x *EthernetStatusSpec) GetRings() *EthernetRingsStatus {
	if x != nil {
		return x.Rings
	}
	return nil
}

func (x *EthernetStatusSpec) GetFeatures() []*EthernetFeatureStatus {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *EthernetStatusSpec) GetChannels() *EthernetChannelsStatus {
	if x != nil {
		return x.Channels
	}
	return nil
}

// HardwareAddrSpec describes spec for the link.
type HardwareAddrSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HardwareAddr  []byte                 `protobuf:"bytes,2,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HardwareAddrSpec) Reset() {
	*x = HardwareAddrSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareAddrSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareAddrSpec) ProtoMessage() {}

func (x *HardwareAddrSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareAddrSpec.ProtoReflect.Descriptor instead.
func (*HardwareAddrSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{17}
}

func (x *HardwareAddrSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HardwareAddrSpec) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

// HostDNSConfigSpec describes host DNS config.
type HostDNSConfigSpec struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Enabled               bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ListenAddresses       []*common.NetIPPort    `protobuf:"bytes,2,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	ServiceHostDnsAddress *common.NetIP          `protobuf:"bytes,3,opt,name=service_host_dns_address,json=serviceHostDnsAddress,proto3" json:"service_host_dns_address,omitempty"`
	ResolveMemberNames    bool                   `protobuf:"varint,4,opt,name=resolve_member_names,json=resolveMemberNames,proto3" json:"resolve_member_names,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *HostDNSConfigSpec) Reset() {
	*x = HostDNSConfigSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostDNSConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDNSConfigSpec) ProtoMessage() {}

func (x *HostDNSConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDNSConfigSpec.ProtoReflect.Descriptor instead.
func (*HostDNSConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{18}
}

func (x *HostDNSConfigSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *HostDNSConfigSpec) GetListenAddresses() []*common.NetIPPort {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *HostDNSConfigSpec) GetServiceHostDnsAddress() *common.NetIP {
	if x != nil {
		return x.ServiceHostDnsAddress
	}
	return nil
}

func (x *HostDNSConfigSpec) GetResolveMemberNames() bool {
	if x != nil {
		return x.ResolveMemberNames
	}
	return false
}

// HostnameSpecSpec describes node hostname.
type HostnameSpecSpec struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Hostname      string                   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Domainname    string                   `protobuf:"bytes,2,opt,name=domainname,proto3" json:"domainname,omitempty"`
	ConfigLayer   enums.NetworkConfigLayer `protobuf:"varint,3,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostnameSpecSpec) Reset() {
	*x = HostnameSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostnameSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameSpecSpec) ProtoMessage() {}

func (x *HostnameSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameSpecSpec.ProtoReflect.Descriptor instead.
func (*HostnameSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{19}
}

func (x *HostnameSpecSpec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostnameSpecSpec) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

func (x *HostnameSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

// HostnameStatusSpec describes node hostname.
type HostnameStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hostname      string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Domainname    string                 `protobuf:"bytes,2,opt,name=domainname,proto3" json:"domainname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostnameStatusSpec) Reset() {
	*x = HostnameStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostnameStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameStatusSpec) ProtoMessage() {}

func (x *HostnameStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameStatusSpec.ProtoReflect.Descriptor instead.
func (*HostnameStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{20}
}

func (x *HostnameStatusSpec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostnameStatusSpec) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

// LinkRefreshSpec describes status of rendered secrets.
type LinkRefreshSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    int64                  `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkRefreshSpec) Reset() {
	*x = LinkRefreshSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkRefreshSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRefreshSpec) ProtoMessage() {}

func (x *LinkRefreshSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRefreshSpec.ProtoReflect.Descriptor instead.
func (*LinkRefreshSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{21}
}

func (x *LinkRefreshSpec) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

// LinkSpecSpec describes spec for the link.
type LinkSpecSpec struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Name          string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Logical       bool                     `protobuf:"varint,2,opt,name=logical,proto3" json:"logical,omitempty"`
	Up            bool                     `protobuf:"varint,3,opt,name=up,proto3" json:"up,omitempty"`
	Mtu           uint32                   `protobuf:"varint,4,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Kind          string                   `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	Type          enums.NethelpersLinkType `protobuf:"varint,6,opt,name=type,proto3,enum=talos.resource.definitions.enums.NethelpersLinkType" json:"type,omitempty"`
	ParentName    string                   `protobuf:"bytes,7,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	BondSlave     *BondSlave               `protobuf:"bytes,8,opt,name=bond_slave,json=bondSlave,proto3" json:"bond_slave,omitempty"`
	BridgeSlave   *BridgeSlave             `protobuf:"bytes,9,opt,name=bridge_slave,json=bridgeSlave,proto3" json:"bridge_slave,omitempty"`
	Vlan          *VLANSpec                `protobuf:"bytes,10,opt,name=vlan,proto3" json:"vlan,omitempty"`
	BondMaster    *BondMasterSpec          `protobuf:"bytes,11,opt,name=bond_master,json=bondMaster,proto3" json:"bond_master,omitempty"`
	BridgeMaster  *BridgeMasterSpec        `protobuf:"bytes,12,opt,name=bridge_master,json=bridgeMaster,proto3" json:"bridge_master,omitempty"`
	Wireguard     *WireguardSpec           `protobuf:"bytes,13,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	ConfigLayer   enums.NetworkConfigLayer `protobuf:"varint,14,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkSpecSpec) Reset() {
	*x = LinkSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkSpecSpec) ProtoMessage() {}

func (x *LinkSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkSpecSpec.ProtoReflect.Descriptor instead.
func (*LinkSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{22}
}

func (x *LinkSpecSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinkSpecSpec) GetLogical() bool {
	if x != nil {
		return x.Logical
	}
	return false
}

func (x *LinkSpecSpec) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *LinkSpecSpec) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *LinkSpecSpec) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *LinkSpecSpec) GetType() enums.NethelpersLinkType {
	if x != nil {
		return x.Type
	}
	return enums.NethelpersLinkType(0)
}

func (x *LinkSpecSpec) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *LinkSpecSpec) GetBondSlave() *BondSlave {
	if x != nil {
		return x.BondSlave
	}
	return nil
}

func (x *LinkSpecSpec) GetBridgeSlave() *BridgeSlave {
	if x != nil {
		return x.BridgeSlave
	}
	return nil
}

func (x *LinkSpecSpec) GetVlan() *VLANSpec {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *LinkSpecSpec) GetBondMaster() *BondMasterSpec {
	if x != nil {
		return x.BondMaster
	}
	return nil
}

func (x *LinkSpecSpec) GetBridgeMaster() *BridgeMasterSpec {
	if x != nil {
		return x.BridgeMaster
	}
	return nil
}

func (x *LinkSpecSpec) GetWireguard() *WireguardSpec {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *LinkSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

// LinkStatusSpec describes status of rendered secrets.
type LinkStatusSpec struct {
	state            protoimpl.MessageState           `protogen:"open.v1"`
	Index            uint32                           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Type             enums.NethelpersLinkType         `protobuf:"varint,2,opt,name=type,proto3,enum=talos.resource.definitions.enums.NethelpersLinkType" json:"type,omitempty"`
	LinkIndex        uint32                           `protobuf:"varint,3,opt,name=link_index,json=linkIndex,proto3" json:"link_index,omitempty"`
	Flags            uint32                           `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	HardwareAddr     []byte                           `protobuf:"bytes,5,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"`
	BroadcastAddr    []byte                           `protobuf:"bytes,6,opt,name=broadcast_addr,json=broadcastAddr,proto3" json:"broadcast_addr,omitempty"`
	Mtu              uint32                           `protobuf:"varint,7,opt,name=mtu,proto3" json:"mtu,omitempty"`
	QueueDisc        string                           `protobuf:"bytes,8,opt,name=queue_disc,json=queueDisc,proto3" json:"queue_disc,omitempty"`
	MasterIndex      uint32                           `protobuf:"varint,9,opt,name=master_index,json=masterIndex,proto3" json:"master_index,omitempty"`
	OperationalState enums.NethelpersOperationalState `protobuf:"varint,10,opt,name=operational_state,json=operationalState,proto3,enum=talos.resource.definitions.enums.NethelpersOperationalState" json:"operational_state,omitempty"`
	Kind             string                           `protobuf:"bytes,11,opt,name=kind,proto3" json:"kind,omitempty"`
	SlaveKind        string                           `protobuf:"bytes,12,opt,name=slave_kind,json=slaveKind,proto3" json:"slave_kind,omitempty"`
	BusPath          string                           `protobuf:"bytes,13,opt,name=bus_path,json=busPath,proto3" json:"bus_path,omitempty"`
	Pciid            string                           `protobuf:"bytes,14,opt,name=pciid,proto3" json:"pciid,omitempty"`
	Driver           string                           `protobuf:"bytes,15,opt,name=driver,proto3" json:"driver,omitempty"`
	DriverVersion    string                           `protobuf:"bytes,16,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty"`
	FirmwareVersion  string                           `protobuf:"bytes,17,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	ProductId        string                           `protobuf:"bytes,18,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	VendorId         string                           `protobuf:"bytes,19,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	Product          string                           `protobuf:"bytes,20,opt,name=product,proto3" json:"product,omitempty"`
	Vendor           string                           `protobuf:"bytes,21,opt,name=vendor,proto3" json:"vendor,omitempty"`
	LinkState        bool                             `protobuf:"varint,22,opt,name=link_state,json=linkState,proto3" json:"link_state,omitempty"`
	SpeedMegabits    int64                            `protobuf:"varint,23,opt,name=speed_megabits,json=speedMegabits,proto3" json:"speed_megabits,omitempty"`
	Port             enums.NethelpersPort             `protobuf:"varint,24,opt,name=port,proto3,enum=talos.resource.definitions.enums.NethelpersPort" json:"port,omitempty"`
	Duplex           enums.NethelpersDuplex           `protobuf:"varint,25,opt,name=duplex,proto3,enum=talos.resource.definitions.enums.NethelpersDuplex" json:"duplex,omitempty"`
	Vlan             *VLANSpec                        `protobuf:"bytes,26,opt,name=vlan,proto3" json:"vlan,omitempty"`
	BridgeMaster     *BridgeMasterSpec                `protobuf:"bytes,27,opt,name=bridge_master,json=bridgeMaster,proto3" json:"bridge_master,omitempty"`
	BondMaster       *BondMasterSpec                  `protobuf:"bytes,28,opt,name=bond_master,json=bondMaster,proto3" json:"bond_master,omitempty"`
	Wireguard        *WireguardSpec                   `protobuf:"bytes,29,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	PermanentAddr    []byte                           `protobuf:"bytes,30,opt,name=permanent_addr,json=permanentAddr,proto3" json:"permanent_addr,omitempty"`
	Alias            string                           `protobuf:"bytes,31,opt,name=alias,proto3" json:"alias,omitempty"`
	AltNames         []string                         `protobuf:"bytes,32,rep,name=alt_names,json=altNames,proto3" json:"alt_names,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinkStatusSpec) Reset() {
	*x = LinkStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkStatusSpec) ProtoMessage() {}

func (x *LinkStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkStatusSpec.ProtoReflect.Descriptor instead.
func (*LinkStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{23}
}

func (x *LinkStatusSpec) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LinkStatusSpec) GetType() enums.NethelpersLinkType {
	if x != nil {
		return x.Type
	}
	return enums.NethelpersLinkType(0)
}

func (x *LinkStatusSpec) GetLinkIndex() uint32 {
	if x != nil {
		return x.LinkIndex
	}
	return 0
}

func (x *LinkStatusSpec) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *LinkStatusSpec) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *LinkStatusSpec) GetBroadcastAddr() []byte {
	if x != nil {
		return x.BroadcastAddr
	}
	return nil
}

func (x *LinkStatusSpec) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *LinkStatusSpec) GetQueueDisc() string {
	if x != nil {
		return x.QueueDisc
	}
	return ""
}

func (x *LinkStatusSpec) GetMasterIndex() uint32 {
	if x != nil {
		return x.MasterIndex
	}
	return 0
}

func (x *LinkStatusSpec) GetOperationalState() enums.NethelpersOperationalState {
	if x != nil {
		return x.OperationalState
	}
	return enums.NethelpersOperationalState(0)
}

func (x *LinkStatusSpec) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *LinkStatusSpec) GetSlaveKind() string {
	if x != nil {
		return x.SlaveKind
	}
	return ""
}

func (x *LinkStatusSpec) GetBusPath() string {
	if x != nil {
		return x.BusPath
	}
	return ""
}

func (x *LinkStatusSpec) GetPciid() string {
	if x != nil {
		return x.Pciid
	}
	return ""
}

func (x *LinkStatusSpec) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *LinkStatusSpec) GetDriverVersion() string {
	if x != nil {
		return x.DriverVersion
	}
	return ""
}

func (x *LinkStatusSpec) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *LinkStatusSpec) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *LinkStatusSpec) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *LinkStatusSpec) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *LinkStatusSpec) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *LinkStatusSpec) GetLinkState() bool {
	if x != nil {
		return x.LinkState
	}
	return false
}

func (x *LinkStatusSpec) GetSpeedMegabits() int64 {
	if x != nil {
		return x.SpeedMegabits
	}
	return 0
}

func (x *LinkStatusSpec) GetPort() enums.NethelpersPort {
	if x != nil {
		return x.Port
	}
	return enums.NethelpersPort(0)
}

func (x *LinkStatusSpec) GetDuplex() enums.NethelpersDuplex {
	if x != nil {
		return x.Duplex
	}
	return enums.NethelpersDuplex(0)
}

func (x *LinkStatusSpec) GetVlan() *VLANSpec {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *LinkStatusSpec) GetBridgeMaster() *BridgeMasterSpec {
	if x != nil {
		return x.BridgeMaster
	}
	return nil
}

func (x *LinkStatusSpec) GetBondMaster() *BondMasterSpec {
	if x != nil {
		return x.BondMaster
	}
	return nil
}

func (x *LinkStatusSpec) GetWireguard() *WireguardSpec {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *LinkStatusSpec) GetPermanentAddr() []byte {
	if x != nil {
		return x.PermanentAddr
	}
	return nil
}

func (x *LinkStatusSpec) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *LinkStatusSpec) GetAltNames() []string {
	if x != nil {
		return x.AltNames
	}
	return nil
}

// NfTablesAddressMatch describes the match on the IP address.
type NfTablesAddressMatch struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IncludeSubnets []*common.NetIPPrefix  `protobuf:"bytes,1,rep,name=include_subnets,json=includeSubnets,proto3" json:"include_subnets,omitempty"`
	ExcludeSubnets []*common.NetIPPrefix  `protobuf:"bytes,2,rep,name=exclude_subnets,json=excludeSubnets,proto3" json:"exclude_subnets,omitempty"`
	Invert         bool                   `protobuf:"varint,3,opt,name=invert,proto3" json:"invert,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NfTablesAddressMatch) Reset() {
	*x = NfTablesAddressMatch{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesAddressMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesAddressMatch) ProtoMessage() {}

func (x *NfTablesAddressMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesAddressMatch.ProtoReflect.Descriptor instead.
func (*NfTablesAddressMatch) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{24}
}

func (x *NfTablesAddressMatch) GetIncludeSubnets() []*common.NetIPPrefix {
	if x != nil {
		return x.IncludeSubnets
	}
	return nil
}

func (x *NfTablesAddressMatch) GetExcludeSubnets() []*common.NetIPPrefix {
	if x != nil {
		return x.ExcludeSubnets
	}
	return nil
}

func (x *NfTablesAddressMatch) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

// NfTablesChainSpec describes status of rendered secrets.
type NfTablesChainSpec struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Type          string                                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Hook          enums.NethelpersNfTablesChainHook     `protobuf:"varint,2,opt,name=hook,proto3,enum=talos.resource.definitions.enums.NethelpersNfTablesChainHook" json:"hook,omitempty"`
	Priority      enums.NethelpersNfTablesChainPriority `protobuf:"varint,3,opt,name=priority,proto3,enum=talos.resource.definitions.enums.NethelpersNfTablesChainPriority" json:"priority,omitempty"`
	Rules         []*NfTablesRule                       `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	Policy        enums.NethelpersNfTablesVerdict       `protobuf:"varint,5,opt,name=policy,proto3,enum=talos.resource.definitions.enums.NethelpersNfTablesVerdict" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NfTablesChainSpec) Reset() {
	*x = NfTablesChainSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesChainSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesChainSpec) ProtoMessage() {}

func (x *NfTablesChainSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesChainSpec.ProtoReflect.Descriptor instead.
func (*NfTablesChainSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{25}
}

func (x *NfTablesChainSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NfTablesChainSpec) GetHook() enums.NethelpersNfTablesChainHook {
	if x != nil {
		return x.Hook
	}
	return enums.NethelpersNfTablesChainHook(0)
}

func (x *NfTablesChainSpec) GetPriority() enums.NethelpersNfTablesChainPriority {
	if x != nil {
		return x.Priority
	}
	return enums.NethelpersNfTablesChainPriority(0)
}

func (x *NfTablesChainSpec) GetRules() []*NfTablesRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *NfTablesChainSpec) GetPolicy() enums.NethelpersNfTablesVerdict {
	if x != nil {
		return x.Policy
	}
	return enums.NethelpersNfTablesVerdict(0)
}

// NfTablesClampMSS describes the TCP MSS clamping operation.
//
// MSS is limited by the `MaxMTU` so that:
// - IPv4: MSS = MaxMTU - 40
// - IPv6: MSS = MaxMTU - 60.
type NfTablesClampMSS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mtu           uint32                 `protobuf:"fixed32,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NfTablesClampMSS) Reset() {
	*x = NfTablesClampMSS{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesClampMSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesClampMSS) ProtoMessage() {}

func (x *NfTablesClampMSS) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesClampMSS.ProtoReflect.Descriptor instead.
func (*NfTablesClampMSS) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{26}
}

func (x *NfTablesClampMSS) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

// NfTablesConntrackStateMatch describes the match on the connection tracking state.
type NfTablesConntrackStateMatch struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	States        []enums.NethelpersConntrackState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=talos.resource.definitions.enums.NethelpersConntrackState" json:"states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NfTablesConntrackStateMatch) Reset() {
	*x = NfTablesConntrackStateMatch{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesConntrackStateMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesConntrackStateMatch) ProtoMessage() {}

func (x *NfTablesConntrackStateMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesConntrackStateMatch.ProtoReflect.Descriptor instead.
func (*NfTablesConntrackStateMatch) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{27}
}

func (x *NfTablesConntrackStateMatch) GetStates() []enums.NethelpersConntrackState {
	if x != nil {
		return x.States
	}
	return nil
}

// NfTablesIfNameMatch describes the match on the interface name.
type NfTablesIfNameMatch struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	Operator       enums.NethelpersMatchOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=talos.resource.definitions.enums.NethelpersMatchOperator" json:"operator,omitempty"`
	InterfaceNames []string                      `protobuf:"bytes,3,rep,name=interface_names,json=interfaceNames,proto3" json:"interface_names,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NfTablesIfNameMatch) Reset() {
	*x = NfTablesIfNameMatch{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesIfNameMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesIfNameMatch) ProtoMessage() {}

func (x *NfTablesIfNameMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesIfNameMatch.ProtoReflect.Descriptor instead.
func (*NfTablesIfNameMatch) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{28}
}

func (x *NfTablesIfNameMatch) GetOperator() enums.NethelpersMatchOperator {
	if x != nil {
		return x.Operator
	}
	return enums.NethelpersMatchOperator(0)
}

func (x *NfTablesIfNameMatch) GetInterfaceNames() []string {
	if x != nil {
		return x.InterfaceNames
	}
	return nil
}

// NfTablesLayer4Match describes the match on the transport layer protocol.
type NfTablesLayer4Match struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	Protocol             enums.NethelpersProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=talos.resource.definitions.enums.NethelpersProtocol" json:"protocol,omitempty"`
	MatchSourcePort      *NfTablesPortMatch       `protobuf:"bytes,2,opt,name=match_source_port,json=matchSourcePort,proto3" json:"match_source_port,omitempty"`
	MatchDestinationPort *NfTablesPortMatch       `protobuf:"bytes,3,opt,name=match_destination_port,json=matchDestinationPort,proto3" json:"match_destination_port,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NfTablesLayer4Match) Reset() {
	*x = NfTablesLayer4Match{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesLayer4Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesLayer4Match) ProtoMessage() {}

func (x *NfTablesLayer4Match) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesLayer4Match.ProtoReflect.Descriptor instead.
func (*NfTablesLayer4Match) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{29}
}

func (x *NfTablesLayer4Match) GetProtocol() enums.NethelpersProtocol {
	if x != nil {
		return x.Protocol
	}
	return enums.NethelpersProtocol(0)
}

func (x *NfTablesLayer4Match) GetMatchSourcePort() *NfTablesPortMatch {
	if x != nil {
		return x.MatchSourcePort
	}
	return nil
}

func (x *NfTablesLayer4Match) GetMatchDestinationPort() *NfTablesPortMatch {
	if x != nil {
		return x.MatchDestinationPort
	}
	return nil
}

// NfTablesLimitMatch describes the match on the packet rate.
type NfTablesLimitMatch struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PacketRatePerSecond uint64                 `protobuf:"varint,1,opt,name=packet_rate_per_second,json=packetRatePerSecond,proto3" json:"packet_rate_per_second,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NfTablesLimitMatch) Reset() {
	*x = NfTablesLimitMatch{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesLimitMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesLimitMatch) ProtoMessage() {}

func (x *NfTablesLimitMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesLimitMatch.ProtoReflect.Descriptor instead.
func (*NfTablesLimitMatch) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{30}
}

func (x *NfTablesLimitMatch) GetPacketRatePerSecond() uint64 {
	if x != nil {
		return x.PacketRatePerSecond
	}
	return 0
}

// NfTablesMark encodes packet mark match/update operation.
//
// When used as a match computes the following condition:
// (mark & mask) ^ xor == value
//
// When used as an update computes the following operation:
// mark = (mark & mask) ^ xor.
type NfTablesMark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mask          uint32                 `protobuf:"varint,1,opt,name=mask,proto3" json:"mask,omitempty"`
	Xor           uint32                 `protobuf:"varint,2,opt,name=xor,proto3" json:"xor,omitempty"`
	Value         uint32                 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NfTablesMark) Reset() {
	*x = NfTablesMark{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesMark) ProtoMessage() {}

func (x *NfTablesMark) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesMark.ProtoReflect.Descriptor instead.
func (*NfTablesMark) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{31}
}

func (x *NfTablesMark) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *NfTablesMark) GetXor() uint32 {
	if x != nil {
		return x.Xor
	}
	return 0
}

func (x *NfTablesMark) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// NfTablesPortMatch describes the match on the transport layer port.
type NfTablesPortMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ranges        []*PortRange           `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NfTablesPortMatch) Reset() {
	*x = NfTablesPortMatch{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesPortMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesPortMatch) ProtoMessage() {}

func (x *NfTablesPortMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesPortMatch.ProtoReflect.Descriptor instead.
func (*NfTablesPortMatch) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{32}
}

func (x *NfTablesPortMatch) GetRanges() []*PortRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// NfTablesRule describes a single rule in the nftables chain.
type NfTablesRule struct {
	state                   protoimpl.MessageState          `protogen:"open.v1"`
	MatchOIfName            *NfTablesIfNameMatch            `protobuf:"bytes,1,opt,name=match_o_if_name,json=matchOIfName,proto3" json:"match_o_if_name,omitempty"`
	Verdict                 enums.NethelpersNfTablesVerdict `protobuf:"varint,2,opt,name=verdict,proto3,enum=talos.resource.definitions.enums.NethelpersNfTablesVerdict" json:"verdict,omitempty"`
	MatchMark               *NfTablesMark                   `protobuf:"bytes,3,opt,name=match_mark,json=matchMark,proto3" json:"match_mark,omitempty"`
	SetMark                 *NfTablesMark                   `protobuf:"bytes,4,opt,name=set_mark,json=setMark,proto3" json:"set_mark,omitempty"`
	MatchSourceAddress      *NfTablesAddressMatch           `protobuf:"bytes,5,opt,name=match_source_address,json=matchSourceAddress,proto3" json:"match_source_address,omitempty"`
	MatchDestinationAddress *NfTablesAddressMatch           `protobuf:"bytes,6,opt,name=match_destination_address,json=matchDestinationAddress,proto3" json:"match_destination_address,omitempty"`
	MatchLayer4             *NfTablesLayer4Match            `protobuf:"bytes,7,opt,name=match_layer4,json=matchLayer4,proto3" json:"match_layer4,omitempty"`
	MatchIIfName            *NfTablesIfNameMatch            `protobuf:"bytes,8,opt,name=match_i_if_name,json=matchIIfName,proto3" json:"match_i_if_name,omitempty"`
	ClampMss                *NfTablesClampMSS               `protobuf:"bytes,9,opt,name=clamp_mss,json=clampMss,proto3" json:"clamp_mss,omitempty"`
	MatchLimit              *NfTablesLimitMatch             `protobuf:"bytes,10,opt,name=match_limit,json=matchLimit,proto3" json:"match_limit,omitempty"`
	MatchConntrackState     *NfTablesConntrackStateMatch    `protobuf:"bytes,11,opt,name=match_conntrack_state,json=matchConntrackState,proto3" json:"match_conntrack_state,omitempty"`
	AnonCounter             bool                            `protobuf:"varint,12,opt,name=anon_counter,json=anonCounter,proto3" json:"anon_counter,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NfTablesRule) Reset() {
	*x = NfTablesRule{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NfTablesRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTablesRule) ProtoMessage() {}

func (x *NfTablesRule) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTablesRule.ProtoReflect.Descriptor instead.
func (*NfTablesRule) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{33}
}

func (x *NfTablesRule) GetMatchOIfName() *NfTablesIfNameMatch {
	if x != nil {
		return x.MatchOIfName
	}
	return nil
}

func (x *NfTablesRule) GetVerdict() enums.NethelpersNfTablesVerdict {
	if x != nil {
		return x.Verdict
	}
	return enums.NethelpersNfTablesVerdict(0)
}

func (x *NfTablesRule) GetMatchMark() *NfTablesMark {
	if x != nil {
		return x.MatchMark
	}
	return nil
}

func (x *NfTablesRule) GetSetMark() *NfTablesMark {
	if x != nil {
		return x.SetMark
	}
	return nil
}

func (x *NfTablesRule) GetMatchSourceAddress() *NfTablesAddressMatch {
	if x != nil {
		return x.MatchSourceAddress
	}
	return nil
}

func (x *NfTablesRule) GetMatchDestinationAddress() *NfTablesAddressMatch {
	if x != nil {
		return x.MatchDestinationAddress
	}
	return nil
}

func (x *NfTablesRule) GetMatchLayer4() *NfTablesLayer4Match {
	if x != nil {
		return x.MatchLayer4
	}
	return nil
}

func (x *NfTablesRule) GetMatchIIfName() *NfTablesIfNameMatch {
	if x != nil {
		return x.MatchIIfName
	}
	return nil
}

func (x *NfTablesRule) GetClampMss() *NfTablesClampMSS {
	if x != nil {
		return x.ClampMss
	}
	return nil
}

func (x *NfTablesRule) GetMatchLimit() *NfTablesLimitMatch {
	if x != nil {
		return x.MatchLimit
	}
	return nil
}

func (x *NfTablesRule) GetMatchConntrackState() *NfTablesConntrackStateMatch {
	if x != nil {
		return x.MatchConntrackState
	}
	return nil
}

func (x *NfTablesRule) GetAnonCounter() bool {
	if x != nil {
		return x.AnonCounter
	}
	return false
}

// NodeAddressFilterSpec describes a filter for NodeAddresses.
type NodeAddressFilterSpec struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IncludeSubnets []*common.NetIPPrefix  `protobuf:"bytes,1,rep,name=include_subnets,json=includeSubnets,proto3" json:"include_subnets,omitempty"`
	ExcludeSubnets []*common.NetIPPrefix  `protobuf:"bytes,2,rep,name=exclude_subnets,json=excludeSubnets,proto3" json:"exclude_subnets,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NodeAddressFilterSpec) Reset() {
	*x = NodeAddressFilterSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAddressFilterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddressFilterSpec) ProtoMessage() {}

func (x *NodeAddressFilterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddressFilterSpec.ProtoReflect.Descriptor instead.
func (*NodeAddressFilterSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{34}
}

func (x *NodeAddressFilterSpec) GetIncludeSubnets() []*common.NetIPPrefix {
	if x != nil {
		return x.IncludeSubnets
	}
	return nil
}

func (x *NodeAddressFilterSpec) GetExcludeSubnets() []*common.NetIPPrefix {
	if x != nil {
		return x.ExcludeSubnets
	}
	return nil
}

// NodeAddressSortAlgorithmSpec describes a filter for NodeAddresses.
type NodeAddressSortAlgorithmSpec struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Algorithm     enums.NethelpersAddressSortAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=talos.resource.definitions.enums.NethelpersAddressSortAlgorithm" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeAddressSortAlgorithmSpec) Reset() {
	*x = NodeAddressSortAlgorithmSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAddressSortAlgorithmSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddressSortAlgorithmSpec) ProtoMessage() {}

func (x *NodeAddressSortAlgorithmSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddressSortAlgorithmSpec.ProtoReflect.Descriptor instead.
func (*NodeAddressSortAlgorithmSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{35}
}

func (x *NodeAddressSortAlgorithmSpec) GetAlgorithm() enums.NethelpersAddressSortAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return enums.NethelpersAddressSortAlgorithm(0)
}

// NodeAddressSpec describes a set of node addresses.
type NodeAddressSpec struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Addresses     []*common.NetIPPrefix                `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	SortAlgorithm enums.NethelpersAddressSortAlgorithm `protobuf:"varint,2,opt,name=sort_algorithm,json=sortAlgorithm,proto3,enum=talos.resource.definitions.enums.NethelpersAddressSortAlgorithm" json:"sort_algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeAddressSpec) Reset() {
	*x = NodeAddressSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAddressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddressSpec) ProtoMessage() {}

func (x *NodeAddressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddressSpec.ProtoReflect.Descriptor instead.
func (*NodeAddressSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{36}
}

func (x *NodeAddressSpec) GetAddresses() []*common.NetIPPrefix {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *NodeAddressSpec) GetSortAlgorithm() enums.NethelpersAddressSortAlgorithm {
	if x != nil {
		return x.SortAlgorithm
	}
	return enums.NethelpersAddressSortAlgorithm(0)
}

// OperatorSpecSpec describes DNS resolvers.
type OperatorSpecSpec struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Operator      enums.NetworkOperator    `protobuf:"varint,1,opt,name=operator,proto3,enum=talos.resource.definitions.enums.NetworkOperator" json:"operator,omitempty"`
	LinkName      string                   `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	RequireUp     bool                     `protobuf:"varint,3,opt,name=require_up,json=requireUp,proto3" json:"require_up,omitempty"`
	Dhcp4         *DHCP4OperatorSpec       `protobuf:"bytes,4,opt,name=dhcp4,proto3" json:"dhcp4,omitempty"`
	Dhcp6         *DHCP6OperatorSpec       `protobuf:"bytes,5,opt,name=dhcp6,proto3" json:"dhcp6,omitempty"`
	Vip           *VIPOperatorSpec         `protobuf:"bytes,6,opt,name=vip,proto3" json:"vip,omitempty"`
	ConfigLayer   enums.NetworkConfigLayer `protobuf:"varint,7,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorSpecSpec) Reset() {
	*x = OperatorSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSpecSpec) ProtoMessage() {}

func (x *OperatorSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSpecSpec.ProtoReflect.Descriptor instead.
func (*OperatorSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{37}
}

func (x *OperatorSpecSpec) GetOperator() enums.NetworkOperator {
	if x != nil {
		return x.Operator
	}
	return enums.NetworkOperator(0)
}

func (x *OperatorSpecSpec) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *OperatorSpecSpec) GetRequireUp() bool {
	if x != nil {
		return x.RequireUp
	}
	return false
}

func (x *OperatorSpecSpec) GetDhcp4() *DHCP4OperatorSpec {
	if x != nil {
		return x.Dhcp4
	}
	return nil
}

func (x *OperatorSpecSpec) GetDhcp6() *DHCP6OperatorSpec {
	if x != nil {
		return x.Dhcp6
	}
	return nil
}

func (x *OperatorSpecSpec) GetVip() *VIPOperatorSpec {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *OperatorSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

// PortRange describes a range of ports.
//
// Range is [lo, hi].
type PortRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lo            uint32                 `protobuf:"fixed32,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi            uint32                 `protobuf:"fixed32,2,opt,name=hi,proto3" json:"hi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{38}
}

func (x *PortRange) GetLo() uint32 {
	if x != nil {
		return x.Lo
	}
	return 0
}

func (x *PortRange) GetHi() uint32 {
	if x != nil {
		return x.Hi
	}
	return 0
}

// ProbeSpecSpec describes the Probe.
type ProbeSpecSpec struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	Interval         *durationpb.Duration     `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	FailureThreshold int64                    `protobuf:"varint,2,opt,name=failure_threshold,json=failureThreshold,proto3" json:"failure_threshold,omitempty"`
	Tcp              *TCPProbeSpec            `protobuf:"bytes,3,opt,name=tcp,proto3" json:"tcp,omitempty"`
	ConfigLayer      enums.NetworkConfigLayer `protobuf:"varint,4,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProbeSpecSpec) Reset() {
	*x = ProbeSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeSpecSpec) ProtoMessage() {}

func (x *ProbeSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeSpecSpec.ProtoReflect.Descriptor instead.
func (*ProbeSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{39}
}

func (x *ProbeSpecSpec) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *ProbeSpecSpec) GetFailureThreshold() int64 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *ProbeSpecSpec) GetTcp() *TCPProbeSpec {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *ProbeSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

// ProbeStatusSpec describes the Probe.
type ProbeStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	LastError     string                 `protobuf:"bytes,2,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProbeStatusSpec) Reset() {
	*x = ProbeStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeStatusSpec) ProtoMessage() {}

func (x *ProbeStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeStatusSpec.ProtoReflect.Descriptor instead.
func (*ProbeStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{40}
}

func (x *ProbeStatusSpec) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProbeStatusSpec) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

// ResolverSpecSpec describes DNS resolvers.
type ResolverSpecSpec struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	DnsServers    []*common.NetIP          `protobuf:"bytes,1,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ConfigLayer   enums.NetworkConfigLayer `protobuf:"varint,2,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	SearchDomains []string                 `protobuf:"bytes,3,rep,name=search_domains,json=searchDomains,proto3" json:"search_domains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverSpecSpec) Reset() {
	*x = ResolverSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverSpecSpec) ProtoMessage() {}

func (x *ResolverSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverSpecSpec.ProtoReflect.Descriptor instead.
func (*ResolverSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{41}
}

func (x *ResolverSpecSpec) GetDnsServers() []*common.NetIP {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *ResolverSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

func (x *ResolverSpecSpec) GetSearchDomains() []string {
	if x != nil {
		return x.SearchDomains
	}
	return nil
}

// ResolverStatusSpec describes DNS resolvers.
type ResolverStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DnsServers    []*common.NetIP        `protobuf:"bytes,1,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	SearchDomains []string               `protobuf:"bytes,2,rep,name=search_domains,json=searchDomains,proto3" json:"search_domains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverStatusSpec) Reset() {
	*x = ResolverStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverStatusSpec) ProtoMessage() {}

func (x *ResolverStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverStatusSpec.ProtoReflect.Descriptor instead.
func (*ResolverStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{42}
}

func (x *ResolverStatusSpec) GetDnsServers() []*common.NetIP {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *ResolverStatusSpec) GetSearchDomains() []string {
	if x != nil {
		return x.SearchDomains
	}
	return nil
}

// RouteSpecSpec describes the route.
type RouteSpecSpec struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Family        enums.NethelpersFamily        `protobuf:"varint,1,opt,name=family,proto3,enum=talos.resource.definitions.enums.NethelpersFamily" json:"family,omitempty"`
	Destination   *common.NetIPPrefix           `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Source        *common.NetIP                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Gateway       *common.NetIP                 `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	OutLinkName   string                        `protobuf:"bytes,5,opt,name=out_link_name,json=outLinkName,proto3" json:"out_link_name,omitempty"`
	Table         enums.NethelpersRoutingTable  `protobuf:"varint,6,opt,name=table,proto3,enum=talos.resource.definitions.enums.NethelpersRoutingTable" json:"table,omitempty"`
	Priority      uint32                        `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	Scope         enums.NethelpersScope         `protobuf:"varint,8,opt,name=scope,proto3,enum=talos.resource.definitions.enums.NethelpersScope" json:"scope,omitempty"`
	Type          enums.NethelpersRouteType     `protobuf:"varint,9,opt,name=type,proto3,enum=talos.resource.definitions.enums.NethelpersRouteType" json:"type,omitempty"`
	Flags         uint32                        `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
	Protocol      enums.NethelpersRouteProtocol `protobuf:"varint,11,opt,name=protocol,proto3,enum=talos.resource.definitions.enums.NethelpersRouteProtocol" json:"protocol,omitempty"`
	ConfigLayer   enums.NetworkConfigLayer      `protobuf:"varint,12,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	Mtu           uint32                        `protobuf:"varint,13,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteSpecSpec) Reset() {
	*x = RouteSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSpecSpec) ProtoMessage() {}

func (x *RouteSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSpecSpec.ProtoReflect.Descriptor instead.
func (*RouteSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{43}
}

func (x *RouteSpecSpec) GetFamily() enums.NethelpersFamily {
	if x != nil {
		return x.Family
	}
	return enums.NethelpersFamily(0)
}

func (x *RouteSpecSpec) GetDestination() *common.NetIPPrefix {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *RouteSpecSpec) GetSource() *common.NetIP {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RouteSpecSpec) GetGateway() *common.NetIP {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *RouteSpecSpec) GetOutLinkName() string {
	if x != nil {
		return x.OutLinkName
	}
	return ""
}

func (x *RouteSpecSpec) GetTable() enums.NethelpersRoutingTable {
	if x != nil {
		return x.Table
	}
	return enums.NethelpersRoutingTable(0)
}

func (x *RouteSpecSpec) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RouteSpecSpec) GetScope() enums.NethelpersScope {
	if x != nil {
		return x.Scope
	}
	return enums.NethelpersScope(0)
}

func (x *RouteSpecSpec) GetType() enums.NethelpersRouteType {
	if x != nil {
		return x.Type
	}
	return enums.NethelpersRouteType(0)
}

func (x *RouteSpecSpec) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RouteSpecSpec) GetProtocol() enums.NethelpersRouteProtocol {
	if x != nil {
		return x.Protocol
	}
	return enums.NethelpersRouteProtocol(0)
}

func (x *RouteSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

func (x *RouteSpecSpec) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

// RouteStatusSpec describes status of rendered secrets.
type RouteStatusSpec struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Family        enums.NethelpersFamily        `protobuf:"varint,1,opt,name=family,proto3,enum=talos.resource.definitions.enums.NethelpersFamily" json:"family,omitempty"`
	Destination   *common.NetIPPrefix           `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Source        *common.NetIP                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Gateway       *common.NetIP                 `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	OutLinkIndex  uint32                        `protobuf:"varint,5,opt,name=out_link_index,json=outLinkIndex,proto3" json:"out_link_index,omitempty"`
	OutLinkName   string                        `protobuf:"bytes,6,opt,name=out_link_name,json=outLinkName,proto3" json:"out_link_name,omitempty"`
	Table         enums.NethelpersRoutingTable  `protobuf:"varint,7,opt,name=table,proto3,enum=talos.resource.definitions.enums.NethelpersRoutingTable" json:"table,omitempty"`
	Priority      uint32                        `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	Scope         enums.NethelpersScope         `protobuf:"varint,9,opt,name=scope,proto3,enum=talos.resource.definitions.enums.NethelpersScope" json:"scope,omitempty"`
	Type          enums.NethelpersRouteType     `protobuf:"varint,10,opt,name=type,proto3,enum=talos.resource.definitions.enums.NethelpersRouteType" json:"type,omitempty"`
	Flags         uint32                        `protobuf:"varint,11,opt,name=flags,proto3" json:"flags,omitempty"`
	Protocol      enums.NethelpersRouteProtocol `protobuf:"varint,12,opt,name=protocol,proto3,enum=talos.resource.definitions.enums.NethelpersRouteProtocol" json:"protocol,omitempty"`
	Mtu           uint32                        `protobuf:"varint,13,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteStatusSpec) Reset() {
	*x = RouteStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteStatusSpec) ProtoMessage() {}

func (x *RouteStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteStatusSpec.ProtoReflect.Descriptor instead.
func (*RouteStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{44}
}

func (x *RouteStatusSpec) GetFamily() enums.NethelpersFamily {
	if x != nil {
		return x.Family
	}
	return enums.NethelpersFamily(0)
}

func (x *RouteStatusSpec) GetDestination() *common.NetIPPrefix {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *RouteStatusSpec) GetSource() *common.NetIP {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RouteStatusSpec) GetGateway() *common.NetIP {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *RouteStatusSpec) GetOutLinkIndex() uint32 {
	if x != nil {
		return x.OutLinkIndex
	}
	return 0
}

func (x *RouteStatusSpec) GetOutLinkName() string {
	if x != nil {
		return x.OutLinkName
	}
	return ""
}

func (x *RouteStatusSpec) GetTable() enums.NethelpersRoutingTable {
	if x != nil {
		return x.Table
	}
	return enums.NethelpersRoutingTable(0)
}

func (x *RouteStatusSpec) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RouteStatusSpec) GetScope() enums.NethelpersScope {
	if x != nil {
		return x.Scope
	}
	return enums.NethelpersScope(0)
}

func (x *RouteStatusSpec) GetType() enums.NethelpersRouteType {
	if x != nil {
		return x.Type
	}
	return enums.NethelpersRouteType(0)
}

func (x *RouteStatusSpec) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RouteStatusSpec) GetProtocol() enums.NethelpersRouteProtocol {
	if x != nil {
		return x.Protocol
	}
	return enums.NethelpersRouteProtocol(0)
}

func (x *RouteStatusSpec) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

// STPSpec describes Spanning Tree Protocol (STP) settings of a bridge.
type STPSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *STPSpec) Reset() {
	*x = STPSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *STPSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STPSpec) ProtoMessage() {}

func (x *STPSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STPSpec.ProtoReflect.Descriptor instead.
func (*STPSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{45}
}

func (x *STPSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// StatusSpec describes network state.
type StatusSpec struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AddressReady      bool                   `protobuf:"varint,1,opt,name=address_ready,json=addressReady,proto3" json:"address_ready,omitempty"`
	ConnectivityReady bool                   `protobuf:"varint,2,opt,name=connectivity_ready,json=connectivityReady,proto3" json:"connectivity_ready,omitempty"`
	HostnameReady     bool                   `protobuf:"varint,3,opt,name=hostname_ready,json=hostnameReady,proto3" json:"hostname_ready,omitempty"`
	EtcFilesReady     bool                   `protobuf:"varint,4,opt,name=etc_files_ready,json=etcFilesReady,proto3" json:"etc_files_ready,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StatusSpec) Reset() {
	*x = StatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSpec) ProtoMessage() {}

func (x *StatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSpec.ProtoReflect.Descriptor instead.
func (*StatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{46}
}

func (x *StatusSpec) GetAddressReady() bool {
	if x != nil {
		return x.AddressReady
	}
	return false
}

func (x *StatusSpec) GetConnectivityReady() bool {
	if x != nil {
		return x.ConnectivityReady
	}
	return false
}

func (x *StatusSpec) GetHostnameReady() bool {
	if x != nil {
		return x.HostnameReady
	}
	return false
}

func (x *StatusSpec) GetEtcFilesReady() bool {
	if x != nil {
		return x.EtcFilesReady
	}
	return false
}

// TCPProbeSpec describes the TCP Probe.
type TCPProbeSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPProbeSpec) Reset() {
	*x = TCPProbeSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPProbeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPProbeSpec) ProtoMessage() {}

func (x *TCPProbeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPProbeSpec.ProtoReflect.Descriptor instead.
func (*TCPProbeSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{47}
}

func (x *TCPProbeSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TCPProbeSpec) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// TimeServerSpecSpec describes NTP servers.
type TimeServerSpecSpec struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	NtpServers    []string                 `protobuf:"bytes,1,rep,name=ntp_servers,json=ntpServers,proto3" json:"ntp_servers,omitempty"`
	ConfigLayer   enums.NetworkConfigLayer `protobuf:"varint,2,opt,name=config_layer,json=configLayer,proto3,enum=talos.resource.definitions.enums.NetworkConfigLayer" json:"config_layer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeServerSpecSpec) Reset() {
	*x = TimeServerSpecSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeServerSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeServerSpecSpec) ProtoMessage() {}

func (x *TimeServerSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeServerSpecSpec.ProtoReflect.Descriptor instead.
func (*TimeServerSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{48}
}

func (x *TimeServerSpecSpec) GetNtpServers() []string {
	if x != nil {
		return x.NtpServers
	}
	return nil
}

func (x *TimeServerSpecSpec) GetConfigLayer() enums.NetworkConfigLayer {
	if x != nil {
		return x.ConfigLayer
	}
	return enums.NetworkConfigLayer(0)
}

// TimeServerStatusSpec describes NTP servers.
type TimeServerStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NtpServers    []string               `protobuf:"bytes,1,rep,name=ntp_servers,json=ntpServers,proto3" json:"ntp_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeServerStatusSpec) Reset() {
	*x = TimeServerStatusSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeServerStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeServerStatusSpec) ProtoMessage() {}

func (x *TimeServerStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeServerStatusSpec.ProtoReflect.Descriptor instead.
func (*TimeServerStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{49}
}

func (x *TimeServerStatusSpec) GetNtpServers() []string {
	if x != nil {
		return x.NtpServers
	}
	return nil
}

// VIPEquinixMetalSpec describes virtual (elastic) IP settings for Equinix Metal.
type VIPEquinixMetalSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DeviceId      string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ApiToken      string                 `protobuf:"bytes,3,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VIPEquinixMetalSpec) Reset() {
	*x = VIPEquinixMetalSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VIPEquinixMetalSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPEquinixMetalSpec) ProtoMessage() {}

func (x *VIPEquinixMetalSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPEquinixMetalSpec.ProtoReflect.Descriptor instead.
func (*VIPEquinixMetalSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{50}
}

func (x *VIPEquinixMetalSpec) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *VIPEquinixMetalSpec) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VIPEquinixMetalSpec) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

// VIPHCloudSpec describes virtual (elastic) IP settings for Hetzner Cloud.
type VIPHCloudSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      int64                  `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	NetworkId     int64                  `protobuf:"varint,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	ApiToken      string                 `protobuf:"bytes,3,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VIPHCloudSpec) Reset() {
	*x = VIPHCloudSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VIPHCloudSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPHCloudSpec) ProtoMessage() {}

func (x *VIPHCloudSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPHCloudSpec.ProtoReflect.Descriptor instead.
func (*VIPHCloudSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{51}
}

func (x *VIPHCloudSpec) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *VIPHCloudSpec) GetNetworkId() int64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *VIPHCloudSpec) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

// VIPOperatorSpec describes virtual IP operator options.
type VIPOperatorSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *common.NetIP          `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	GratuitousArp bool                   `protobuf:"varint,2,opt,name=gratuitous_arp,json=gratuitousArp,proto3" json:"gratuitous_arp,omitempty"`
	EquinixMetal  *VIPEquinixMetalSpec   `protobuf:"bytes,3,opt,name=equinix_metal,json=equinixMetal,proto3" json:"equinix_metal,omitempty"`
	HCloud        *VIPHCloudSpec         `protobuf:"bytes,4,opt,name=h_cloud,json=hCloud,proto3" json:"h_cloud,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VIPOperatorSpec) Reset() {
	*x = VIPOperatorSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VIPOperatorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPOperatorSpec) ProtoMessage() {}

func (x *VIPOperatorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPOperatorSpec.ProtoReflect.Descriptor instead.
func (*VIPOperatorSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{52}
}

func (x *VIPOperatorSpec) GetIp() *common.NetIP {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *VIPOperatorSpec) GetGratuitousArp() bool {
	if x != nil {
		return x.GratuitousArp
	}
	return false
}

func (x *VIPOperatorSpec) GetEquinixMetal() *VIPEquinixMetalSpec {
	if x != nil {
		return x.EquinixMetal
	}
	return nil
}

func (x *VIPOperatorSpec) GetHCloud() *VIPHCloudSpec {
	if x != nil {
		return x.HCloud
	}
	return nil
}

// VLANSpec describes VLAN settings if Kind == "vlan".
type VLANSpec struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Vid           uint32                       `protobuf:"fixed32,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Protocol      enums.NethelpersVLANProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=talos.resource.definitions.enums.NethelpersVLANProtocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VLANSpec) Reset() {
	*x = VLANSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VLANSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VLANSpec) ProtoMessage() {}

func (x *VLANSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VLANSpec.ProtoReflect.Descriptor instead.
func (*VLANSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{53}
}

func (x *VLANSpec) GetVid() uint32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *VLANSpec) GetProtocol() enums.NethelpersVLANProtocol {
	if x != nil {
		return x.Protocol
	}
	return enums.NethelpersVLANProtocol(0)
}

// WireguardPeer describes a single peer.
type WireguardPeer struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	PublicKey                   string                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PresharedKey                string                 `protobuf:"bytes,2,opt,name=preshared_key,json=presharedKey,proto3" json:"preshared_key,omitempty"`
	Endpoint                    string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	PersistentKeepaliveInterval *durationpb.Duration   `protobuf:"bytes,4,opt,name=persistent_keepalive_interval,json=persistentKeepaliveInterval,proto3" json:"persistent_keepalive_interval,omitempty"`
	AllowedIps                  []*common.NetIPPrefix  `protobuf:"bytes,5,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *WireguardPeer) Reset() {
	*x = WireguardPeer{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireguardPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireguardPeer) ProtoMessage() {}

func (x *WireguardPeer) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireguardPeer.ProtoReflect.Descriptor instead.
func (*WireguardPeer) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{54}
}

func (x *WireguardPeer) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *WireguardPeer) GetPresharedKey() string {
	if x != nil {
		return x.PresharedKey
	}
	return ""
}

func (x *WireguardPeer) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WireguardPeer) GetPersistentKeepaliveInterval() *durationpb.Duration {
	if x != nil {
		return x.PersistentKeepaliveInterval
	}
	return nil
}

func (x *WireguardPeer) GetAllowedIps() []*common.NetIPPrefix {
	if x != nil {
		return x.AllowedIps
	}
	return nil
}

// WireguardSpec describes Wireguard settings if Kind == "wireguard".
type WireguardSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    string                 `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PublicKey     string                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	ListenPort    int64                  `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	FirewallMark  int64                  `protobuf:"varint,4,opt,name=firewall_mark,json=firewallMark,proto3" json:"firewall_mark,omitempty"`
	Peers         []*WireguardPeer       `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireguardSpec) Reset() {
	*x = WireguardSpec{}
	mi := &file_resource_definitions_network_network_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireguardSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireguardSpec) ProtoMessage() {}

func (x *WireguardSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_network_network_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireguardSpec.ProtoReflect.Descriptor instead.
func (*WireguardSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_network_network_proto_rawDescGZIP(), []int{55}
}

func (x *WireguardSpec) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *WireguardSpec) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *WireguardSpec) GetListenPort() int64 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *WireguardSpec) GetFirewallMark() int64 {
	if x != nil {
		return x.FirewallMark
	}
	return 0
}

func (x *WireguardSpec) GetPeers() []*WireguardPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

var File_resource_definitions_network_network_proto protoreflect.FileDescriptor

var file_resource_definitions_network_network_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x03,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x72, 0x70, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xd1, 0x03,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x74, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50,
	0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x74, 0x49, 0x50, 0x52, 0x07, 0x61, 0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0xa4, 0x0a, 0x0a, 0x0e, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73,
	0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5f,
	0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x73, 0x42, 0x6f, 0x6e, 0x64, 0x58, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x51, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73,
	0x4c, 0x41, 0x43, 0x50, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x41, 0x52, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x61, 0x72, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x61,
	0x0a, 0x0f, 0x61, 0x72, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x73, 0x41, 0x52, 0x50, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x0d, 0x61, 0x72, 0x70, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x66, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x5b,
	0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x41, 0x43, 0x52, 0x0b,
	0x66, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12, 0x51, 0x0a, 0x09, 0x61,
	0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x41, 0x44, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x69, 0x69, 0x5f, 0x6d, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x69, 0x69, 0x4d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x72, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x67, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x67, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x62, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x74,
	0x6c, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0e, 0x61, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x50,
	0x72, 0x69, 0x6f, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x4d, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x64,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x03,
	0x73, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x61, 0x6c, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53,
	0x54, 0x50, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x73, 0x74, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6c, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x22, 0x2e, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x6c, 0x61,
	0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x56, 0x4c, 0x41,
	0x4e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x6a, 0x0a, 0x11, 0x44, 0x48, 0x43, 0x50, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7e,
	0x0a, 0x11, 0x44, 0x48, 0x43, 0x50, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2d,
	0x0a, 0x13, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a,
	0x14, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x72, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x78, 0x4d, 0x61, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x72, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x22, 0x43, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x72, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x78, 0x4d, 0x69, 0x6e, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x6a, 0x75, 0x6d,
	0x62, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x78, 0x4a, 0x75, 0x6d, 0x62,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74,
	0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x42, 0x75, 0x66, 0x4c, 0x65, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x71, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x71, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x78, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x78, 0x50, 0x75, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0f,
	0x74, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x75, 0x73, 0x68, 0x42, 0x75, 0x66,
	0x4c, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x63, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x13, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x78, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x78, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x6a,
	0x75, 0x6d, 0x62, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x78, 0x4a, 0x75, 0x6d, 0x62, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x78, 0x4d, 0x61,
	0x78, 0x12, 0x2c, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x66,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x78, 0x50, 0x75, 0x73, 0x68, 0x42, 0x75, 0x66, 0x4c, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x12,
	0x0e, 0x0a, 0x02, 0x72, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x72, 0x78, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x78, 0x4d, 0x69, 0x6e, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x6a,
	0x75, 0x6d, 0x62, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x78, 0x4a, 0x75,
	0x6d, 0x62, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x42, 0x75, 0x66, 0x4c, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x71, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x71, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74,
	0x78, 0x50, 0x75, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x78, 0x50, 0x75, 0x73, 0x68, 0x12, 0x25,
	0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x75, 0x73, 0x68, 0x42,
	0x75, 0x66, 0x4c, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74,
	0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x10,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x4b, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x69, 0x6e,
	0x67, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5e, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa6, 0x04, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x73, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74,
	0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x10, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x44, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xa7,
	0x01, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0f, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x06,
	0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0a, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x52, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x6c, 0x61,
	0x76, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6e, 0x64,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x64,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xe1, 0x0a, 0x0a, 0x0e,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x69, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x63, 0x69, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x63, 0x69,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x53, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x64, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x57, 0x69, 0x72,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x14, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x22, 0xf6, 0x02, 0x0a,
	0x11, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x73, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48,
	0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x53, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4e, 0x66,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x24, 0x0a, 0x10, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x4d, 0x53, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x71, 0x0a, 0x1b, 0x4e,
	0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x13, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x13, 0x4e, 0x66, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x50,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x61, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x6b, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x49, 0x0a, 0x12, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x0c, 0x4e,
	0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x78, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x78, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x11, 0x4e, 0x66, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x06,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74,
	0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0xc5, 0x08, 0x0a, 0x0c, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x5f,
	0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x49, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x73, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x72,
	0x6b, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x4b, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x6a, 0x0a, 0x14, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x74, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x17, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x34, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x12, 0x5e, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6d, 0x70,
	0x5f, 0x6d, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x4d, 0x53, 0x53,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x73, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6e, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x15,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x22, 0x7e, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x5e, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x22, 0xd7, 0x03, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x55,
	0x70, 0x12, 0x4b, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x12, 0x4b,
	0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x12, 0x45, 0x0a, 0x03, 0x76,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x49,
	0x50, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x76,
	0x69, 0x70, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x09, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x68, 0x69, 0x22, 0x90, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x42,
	0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x54, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x74,
	0x63, 0x70, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x0b,
	0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50,
	0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x2e, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xde, 0x05, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x57, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0xad, 0x05, 0x0a, 0x0f, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a,
	0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x55, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x23, 0x0a, 0x07, 0x53, 0x54,
	0x50, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xaf, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x74, 0x63,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x74, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x22, 0x5f, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x74, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x6e, 0x0a, 0x13,
	0x56, 0x49, 0x50, 0x45, 0x71, 0x75, 0x69, 0x6e, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x68, 0x0a, 0x0d,
	0x56, 0x49, 0x50, 0x48, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70,
	0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x0f, 0x56, 0x49, 0x50, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x02, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61,
	0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x41, 0x72, 0x70,
	0x12, 0x5c, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x49, 0x50,
	0x45, 0x71, 0x75, 0x69, 0x6e, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x6e, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x12, 0x4a,
	0x0a, 0x07, 0x68, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x49, 0x50, 0x48, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x06, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0x72, 0x0a, 0x08, 0x56, 0x4c,
	0x41, 0x4e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x61, 0x6c,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x56, 0x4c, 0x41, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x84,
	0x02, 0x0a, 0x0d, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x5d, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x74, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x49, 0x70, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x47, 0x0a,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x42, 0x78, 0x0a, 0x2a, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x69, 0x64, 0x65, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x6c, 0x6f,
	0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_resource_definitions_network_network_proto_rawDescOnce sync.Once
	file_resource_definitions_network_network_proto_rawDescData []byte
)

func file_resource_definitions_network_network_proto_rawDescGZIP() []byte {
	file_resource_definitions_network_network_proto_rawDescOnce.Do(func() {
		file_resource_definitions_network_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_resource_definitions_network_network_proto_rawDesc), len(file_resource_definitions_network_network_proto_rawDesc)))
	})
	return file_resource_definitions_network_network_proto_rawDescData
}

var file_resource_definitions_network_network_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_resource_definitions_network_network_proto_goTypes = []any{
	(*AddressSpecSpec)(nil),                    // 0: talos.resource.definitions.network.AddressSpecSpec
	(*AddressStatusSpec)(nil),                  // 1: talos.resource.definitions.network.AddressStatusSpec
	(*BondMasterSpec)(nil),                     // 2: talos.resource.definitions.network.BondMasterSpec
	(*BondSlave)(nil),                          // 3: talos.resource.definitions.network.BondSlave
	(*BridgeMasterSpec)(nil),                   // 4: talos.resource.definitions.network.BridgeMasterSpec
	(*BridgeSlave)(nil),                        // 5: talos.resource.definitions.network.BridgeSlave
	(*BridgeVLANSpec)(nil),                     // 6: talos.resource.definitions.network.BridgeVLANSpec
	(*DHCP4OperatorSpec)(nil),                  // 7: talos.resource.definitions.network.DHCP4OperatorSpec
	(*DHCP6OperatorSpec)(nil),                  // 8: talos.resource.definitions.network.DHCP6OperatorSpec
	(*DNSResolveCacheSpec)(nil),                // 9: talos.resource.definitions.network.DNSResolveCacheSpec
	(*EthernetChannelsSpec)(nil),               // 10: talos.resource.definitions.network.EthernetChannelsSpec
	(*EthernetChannelsStatus)(nil),             // 11: talos.resource.definitions.network.EthernetChannelsStatus
	(*EthernetFeatureStatus)(nil),              // 12: talos.resource.definitions.network.EthernetFeatureStatus
	(*EthernetRingsSpec)(nil),                  // 13: talos.resource.definitions.network.EthernetRingsSpec
	(*EthernetRingsStatus)(nil),                // 14: talos.resource.definitions.network.EthernetRingsStatus
	(*EthernetSpecSpec)(nil),                   // 15: talos.resource.definitions.network.EthernetSpecSpec
	(*EthernetStatusSpec)(nil),                 // 16: talos.resource.definitions.network.EthernetStatusSpec
	(*HardwareAddrSpec)(nil),                   // 17: talos.resource.definitions.network.HardwareAddrSpec
	(*HostDNSConfigSpec)(nil),                  // 18: talos.resource.definitions.network.HostDNSConfigSpec
	(*HostnameSpecSpec)(nil),                   // 19: talos.resource.definitions.network.HostnameSpecSpec
	(*HostnameStatusSpec)(nil),                 // 20: talos.resource.definitions.network.HostnameStatusSpec
	(*LinkRefreshSpec)(nil),                    // 21: talos.resource.definitions.network.LinkRefreshSpec
	(*LinkSpecSpec)(nil),                       // 22: talos.resource.definitions.network.LinkSpecSpec
	(*LinkStatusSpec)(nil),                     // 23: talos.resource.definitions.network.LinkStatusSpec
	(*NfTablesAddressMatch)(nil),               // 24: talos.resource.definitions.network.NfTablesAddressMatch
	(*NfTablesChainSpec)(nil),                  // 25: talos.resource.definitions.network.NfTablesChainSpec
	(*NfTablesClampMSS)(nil),                   // 26: talos.resource.definitions.network.NfTablesClampMSS
	(*NfTablesConntrackStateMatch)(nil),        // 27: talos.resource.definitions.network.NfTablesConntrackStateMatch
	(*NfTablesIfNameMatch)(nil),                // 28: talos.resource.definitions.network.NfTablesIfNameMatch
	(*NfTablesLayer4Match)(nil),                // 29: talos.resource.definitions.network.NfTablesLayer4Match
	(*NfTablesLimitMatch)(nil),                 // 30: talos.resource.definitions.network.NfTablesLimitMatch
	(*NfTablesMark)(nil),                       // 31: talos.resource.definitions.network.NfTablesMark
	(*NfTablesPortMatch)(nil),                  // 32: talos.resource.definitions.network.NfTablesPortMatch
	(*NfTablesRule)(nil),                       // 33: talos.resource.definitions.network.NfTablesRule
	(*NodeAddressFilterSpec)(nil),              // 34: talos.resource.definitions.network.NodeAddressFilterSpec
	(*NodeAddressSortAlgorithmSpec)(nil),       // 35: talos.resource.definitions.network.NodeAddressSortAlgorithmSpec
	(*NodeAddressSpec)(nil),                    // 36: talos.resource.definitions.network.NodeAddressSpec
	(*OperatorSpecSpec)(nil),                   // 37: talos.resource.definitions.network.OperatorSpecSpec
	(*PortRange)(nil),                          // 38: talos.resource.definitions.network.PortRange
	(*ProbeSpecSpec)(nil),                      // 39: talos.resource.definitions.network.ProbeSpecSpec
	(*ProbeStatusSpec)(nil),                    // 40: talos.resource.definitions.network.ProbeStatusSpec
	(*ResolverSpecSpec)(nil),                   // 41: talos.resource.definitions.network.ResolverSpecSpec
	(*ResolverStatusSpec)(nil),                 // 42: talos.resource.definitions.network.ResolverStatusSpec
	(*RouteSpecSpec)(nil),                      // 43: talos.resource.definitions.network.RouteSpecSpec
	(*RouteStatusSpec)(nil),                    // 44: talos.resource.definitions.network.RouteStatusSpec
	(*STPSpec)(nil),                            // 45: talos.resource.definitions.network.STPSpec
	(*StatusSpec)(nil),                         // 46: talos.resource.definitions.network.StatusSpec
	(*TCPProbeSpec)(nil),                       // 47: talos.resource.definitions.network.TCPProbeSpec
	(*TimeServerSpecSpec)(nil),                 // 48: talos.resource.definitions.network.TimeServerSpecSpec
	(*TimeServerStatusSpec)(nil),               // 49: talos.resource.definitions.network.TimeServerStatusSpec
	(*VIPEquinixMetalSpec)(nil),                // 50: talos.resource.definitions.network.VIPEquinixMetalSpec
	(*VIPHCloudSpec)(nil),                      // 51: talos.resource.definitions.network.VIPHCloudSpec
	(*VIPOperatorSpec)(nil),                    // 52: talos.resource.definitions.network.VIPOperatorSpec
	(*VLANSpec)(nil),                           // 53: talos.resource.definitions.network.VLANSpec
	(*WireguardPeer)(nil),                      // 54: talos.resource.definitions.network.WireguardPeer
	(*WireguardSpec)(nil),                      // 55: talos.resource.definitions.network.WireguardSpec
	nil,                                        // 56: talos.resource.definitions.network.EthernetSpecSpec.FeaturesEntry
	(*common.NetIPPrefix)(nil),                 // 57: common.NetIPPrefix
	(enums.NethelpersFamily)(0),                // 58: talos.resource.definitions.enums.NethelpersFamily
	(enums.NethelpersScope)(0),                 // 59: talos.resource.definitions.enums.NethelpersScope
	(enums.NetworkConfigLayer)(0),              // 60: talos.resource.definitions.enums.NetworkConfigLayer
	(*common.NetIP)(nil),                       // 61: common.NetIP
	(enums.NethelpersBondMode)(0),              // 62: talos.resource.definitions.enums.NethelpersBondMode
	(enums.NethelpersBondXmitHashPolicy)(0),    // 63: talos.resource.definitions.enums.NethelpersBondXmitHashPolicy
	(enums.NethelpersLACPRate)(0),              // 64: talos.resource.definitions.enums.NethelpersLACPRate
	(enums.NethelpersARPValidate)(0),           // 65: talos.resource.definitions.enums.NethelpersARPValidate
	(enums.NethelpersARPAllTargets)(0),         // 66: talos.resource.definitions.enums.NethelpersARPAllTargets
	(enums.NethelpersPrimaryReselect)(0),       // 67: talos.resource.definitions.enums.NethelpersPrimaryReselect
	(enums.NethelpersFailOverMAC)(0),           // 68: talos.resource.definitions.enums.NethelpersFailOverMAC
	(enums.NethelpersADSelect)(0),              // 69: talos.resource.definitions.enums.NethelpersADSelect
	(enums.NethelpersPort)(0),                  // 70: talos.resource.definitions.enums.NethelpersPort
	(enums.NethelpersDuplex)(0),                // 71: talos.resource.definitions.enums.NethelpersDuplex
	(*common.NetIPPort)(nil),                   // 72: common.NetIPPort
	(enums.NethelpersLinkType)(0),              // 73: talos.resource.definitions.enums.NethelpersLinkType
	(enums.NethelpersOperationalState)(0),      // 74: talos.resource.definitions.enums.NethelpersOperationalState
	(enums.NethelpersNfTablesChainHook)(0),     // 75: talos.resource.definitions.enums.NethelpersNfTablesChainHook
	(enums.NethelpersNfTablesChainPriority)(0), // 76: talos.resource.definitions.enums.NethelpersNfTablesChainPriority
	(enums.NethelpersNfTablesVerdict)(0),       // 77: talos.resource.definitions.enums.NethelpersNfTablesVerdict
	(enums.NethelpersConntrackState)(0),        // 78: talos.resource.definitions.enums.NethelpersConntrackState
	(enums.NethelpersMatchOperator)(0),         // 79: talos.resource.definitions.enums.NethelpersMatchOperator
	(enums.NethelpersProtocol)(0),              // 80: talos.resource.definitions.enums.NethelpersProtocol
	(enums.NethelpersAddressSortAlgorithm)(0),  // 81: talos.resource.definitions.enums.NethelpersAddressSortAlgorithm
	(enums.NetworkOperator)(0),                 // 82: talos.resource.definitions.enums.NetworkOperator
	(*durationpb.Duration)(nil),                // 83: google.protobuf.Duration
	(enums.NethelpersRoutingTable)(0),          // 84: talos.resource.definitions.enums.NethelpersRoutingTable
	(enums.NethelpersRouteType)(0),             // 85: talos.resource.definitions.enums.NethelpersRouteType
	(enums.NethelpersRouteProtocol)(0),         // 86: talos.resource.definitions.enums.NethelpersRouteProtocol
	(enums.NethelpersVLANProtocol)(0),          // 87: talos.resource.definitions.enums.NethelpersVLANProtocol
}
var file_resource_definitions_network_network_proto_depIdxs = []int32{
	57,  // 0: talos.resource.definitions.network.AddressSpecSpec.address:type_name -> common.NetIPPrefix
	58,  // 1: talos.resource.definitions.network.AddressSpecSpec.family:type_name -> talos.resource.definitions.enums.NethelpersFamily
	59,  // 2: talos.resource.definitions.network.AddressSpecSpec.scope:type_name -> talos.resource.definitions.enums.NethelpersScope
	60,  // 3: talos.resource.definitions.network.AddressSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	57,  // 4: talos.resource.definitions.network.AddressStatusSpec.address:type_name -> common.NetIPPrefix
	61,  // 5: talos.resource.definitions.network.AddressStatusSpec.local:type_name -> common.NetIP
	61,  // 6: talos.resource.definitions.network.AddressStatusSpec.broadcast:type_name -> common.NetIP
	61,  // 7: talos.resource.definitions.network.AddressStatusSpec.anycast:type_name -> common.NetIP
	61,  // 8: talos.resource.definitions.network.AddressStatusSpec.multicast:type_name -> common.NetIP
	58,  // 9: talos.resource.definitions.network.AddressStatusSpec.family:type_name -> talos.resource.definitions.enums.NethelpersFamily
	59,  // 10: talos.resource.definitions.network.AddressStatusSpec.scope:type_name -> talos.resource.definitions.enums.NethelpersScope
	62,  // 11: talos.resource.definitions.network.BondMasterSpec.mode:type_name -> talos.resource.definitions.enums.NethelpersBondMode
	63,  // 12: talos.resource.definitions.network.BondMasterSpec.hash_policy:type_name -> talos.resource.definitions.enums.NethelpersBondXmitHashPolicy
	64,  // 13: talos.resource.definitions.network.BondMasterSpec.lacp_rate:type_name -> talos.resource.definitions.enums.NethelpersLACPRate
	65,  // 14: talos.resource.definitions.network.BondMasterSpec.arp_validate:type_name -> talos.resource.definitions.enums.NethelpersARPValidate
	66,  // 15: talos.resource.definitions.network.BondMasterSpec.arp_all_targets:type_name -> talos.resource.definitions.enums.NethelpersARPAllTargets
	67,  // 16: talos.resource.definitions.network.BondMasterSpec.primary_reselect:type_name -> talos.resource.definitions.enums.NethelpersPrimaryReselect
	68,  // 17: talos.resource.definitions.network.BondMasterSpec.fail_over_mac:type_name -> talos.resource.definitions.enums.NethelpersFailOverMAC
	69,  // 18: talos.resource.definitions.network.BondMasterSpec.ad_select:type_name -> talos.resource.definitions.enums.NethelpersADSelect
	45,  // 19: talos.resource.definitions.network.BridgeMasterSpec.stp:type_name -> talos.resource.definitions.network.STPSpec
	6,   // 20: talos.resource.definitions.network.BridgeMasterSpec.vlan:type_name -> talos.resource.definitions.network.BridgeVLANSpec
	13,  // 21: talos.resource.definitions.network.EthernetSpecSpec.rings:type_name -> talos.resource.definitions.network.EthernetRingsSpec
	56,  // 22: talos.resource.definitions.network.EthernetSpecSpec.features:type_name -> talos.resource.definitions.network.EthernetSpecSpec.FeaturesEntry
	10,  // 23: talos.resource.definitions.network.EthernetSpecSpec.channels:type_name -> talos.resource.definitions.network.EthernetChannelsSpec
	70,  // 24: talos.resource.definitions.network.EthernetStatusSpec.port:type_name -> talos.resource.definitions.enums.NethelpersPort
	71,  // 25: talos.resource.definitions.network.EthernetStatusSpec.duplex:type_name -> talos.resource.definitions.enums.NethelpersDuplex
	14,  // 26: talos.resource.definitions.network.EthernetStatusSpec.rings:type_name -> talos.resource.definitions.network.EthernetRingsStatus
	12,  // 27: talos.resource.definitions.network.EthernetStatusSpec.features:type_name -> talos.resource.definitions.network.EthernetFeatureStatus
	11,  // 28: talos.resource.definitions.network.EthernetStatusSpec.channels:type_name -> talos.resource.definitions.network.EthernetChannelsStatus
	72,  // 29: talos.resource.definitions.network.HostDNSConfigSpec.listen_addresses:type_name -> common.NetIPPort
	61,  // 30: talos.resource.definitions.network.HostDNSConfigSpec.service_host_dns_address:type_name -> common.NetIP
	60,  // 31: talos.resource.definitions.network.HostnameSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	73,  // 32: talos.resource.definitions.network.LinkSpecSpec.type:type_name -> talos.resource.definitions.enums.NethelpersLinkType
	3,   // 33: talos.resource.definitions.network.LinkSpecSpec.bond_slave:type_name -> talos.resource.definitions.network.BondSlave
	5,   // 34: talos.resource.definitions.network.LinkSpecSpec.bridge_slave:type_name -> talos.resource.definitions.network.BridgeSlave
	53,  // 35: talos.resource.definitions.network.LinkSpecSpec.vlan:type_name -> talos.resource.definitions.network.VLANSpec
	2,   // 36: talos.resource.definitions.network.LinkSpecSpec.bond_master:type_name -> talos.resource.definitions.network.BondMasterSpec
	4,   // 37: talos.resource.definitions.network.LinkSpecSpec.bridge_master:type_name -> talos.resource.definitions.network.BridgeMasterSpec
	55,  // 38: talos.resource.definitions.network.LinkSpecSpec.wireguard:type_name -> talos.resource.definitions.network.WireguardSpec
	60,  // 39: talos.resource.definitions.network.LinkSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	73,  // 40: talos.resource.definitions.network.LinkStatusSpec.type:type_name -> talos.resource.definitions.enums.NethelpersLinkType
	74,  // 41: talos.resource.definitions.network.LinkStatusSpec.operational_state:type_name -> talos.resource.definitions.enums.NethelpersOperationalState
	70,  // 42: talos.resource.definitions.network.LinkStatusSpec.port:type_name -> talos.resource.definitions.enums.NethelpersPort
	71,  // 43: talos.resource.definitions.network.LinkStatusSpec.duplex:type_name -> talos.resource.definitions.enums.NethelpersDuplex
	53,  // 44: talos.resource.definitions.network.LinkStatusSpec.vlan:type_name -> talos.resource.definitions.network.VLANSpec
	4,   // 45: talos.resource.definitions.network.LinkStatusSpec.bridge_master:type_name -> talos.resource.definitions.network.BridgeMasterSpec
	2,   // 46: talos.resource.definitions.network.LinkStatusSpec.bond_master:type_name -> talos.resource.definitions.network.BondMasterSpec
	55,  // 47: talos.resource.definitions.network.LinkStatusSpec.wireguard:type_name -> talos.resource.definitions.network.WireguardSpec
	57,  // 48: talos.resource.definitions.network.NfTablesAddressMatch.include_subnets:type_name -> common.NetIPPrefix
	57,  // 49: talos.resource.definitions.network.NfTablesAddressMatch.exclude_subnets:type_name -> common.NetIPPrefix
	75,  // 50: talos.resource.definitions.network.NfTablesChainSpec.hook:type_name -> talos.resource.definitions.enums.NethelpersNfTablesChainHook
	76,  // 51: talos.resource.definitions.network.NfTablesChainSpec.priority:type_name -> talos.resource.definitions.enums.NethelpersNfTablesChainPriority
	33,  // 52: talos.resource.definitions.network.NfTablesChainSpec.rules:type_name -> talos.resource.definitions.network.NfTablesRule
	77,  // 53: talos.resource.definitions.network.NfTablesChainSpec.policy:type_name -> talos.resource.definitions.enums.NethelpersNfTablesVerdict
	78,  // 54: talos.resource.definitions.network.NfTablesConntrackStateMatch.states:type_name -> talos.resource.definitions.enums.NethelpersConntrackState
	79,  // 55: talos.resource.definitions.network.NfTablesIfNameMatch.operator:type_name -> talos.resource.definitions.enums.NethelpersMatchOperator
	80,  // 56: talos.resource.definitions.network.NfTablesLayer4Match.protocol:type_name -> talos.resource.definitions.enums.NethelpersProtocol
	32,  // 57: talos.resource.definitions.network.NfTablesLayer4Match.match_source_port:type_name -> talos.resource.definitions.network.NfTablesPortMatch
	32,  // 58: talos.resource.definitions.network.NfTablesLayer4Match.match_destination_port:type_name -> talos.resource.definitions.network.NfTablesPortMatch
	38,  // 59: talos.resource.definitions.network.NfTablesPortMatch.ranges:type_name -> talos.resource.definitions.network.PortRange
	28,  // 60: talos.resource.definitions.network.NfTablesRule.match_o_if_name:type_name -> talos.resource.definitions.network.NfTablesIfNameMatch
	77,  // 61: talos.resource.definitions.network.NfTablesRule.verdict:type_name -> talos.resource.definitions.enums.NethelpersNfTablesVerdict
	31,  // 62: talos.resource.definitions.network.NfTablesRule.match_mark:type_name -> talos.resource.definitions.network.NfTablesMark
	31,  // 63: talos.resource.definitions.network.NfTablesRule.set_mark:type_name -> talos.resource.definitions.network.NfTablesMark
	24,  // 64: talos.resource.definitions.network.NfTablesRule.match_source_address:type_name -> talos.resource.definitions.network.NfTablesAddressMatch
	24,  // 65: talos.resource.definitions.network.NfTablesRule.match_destination_address:type_name -> talos.resource.definitions.network.NfTablesAddressMatch
	29,  // 66: talos.resource.definitions.network.NfTablesRule.match_layer4:type_name -> talos.resource.definitions.network.NfTablesLayer4Match
	28,  // 67: talos.resource.definitions.network.NfTablesRule.match_i_if_name:type_name -> talos.resource.definitions.network.NfTablesIfNameMatch
	26,  // 68: talos.resource.definitions.network.NfTablesRule.clamp_mss:type_name -> talos.resource.definitions.network.NfTablesClampMSS
	30,  // 69: talos.resource.definitions.network.NfTablesRule.match_limit:type_name -> talos.resource.definitions.network.NfTablesLimitMatch
	27,  // 70: talos.resource.definitions.network.NfTablesRule.match_conntrack_state:type_name -> talos.resource.definitions.network.NfTablesConntrackStateMatch
	57,  // 71: talos.resource.definitions.network.NodeAddressFilterSpec.include_subnets:type_name -> common.NetIPPrefix
	57,  // 72: talos.resource.definitions.network.NodeAddressFilterSpec.exclude_subnets:type_name -> common.NetIPPrefix
	81,  // 73: talos.resource.definitions.network.NodeAddressSortAlgorithmSpec.algorithm:type_name -> talos.resource.definitions.enums.NethelpersAddressSortAlgorithm
	57,  // 74: talos.resource.definitions.network.NodeAddressSpec.addresses:type_name -> common.NetIPPrefix
	81,  // 75: talos.resource.definitions.network.NodeAddressSpec.sort_algorithm:type_name -> talos.resource.definitions.enums.NethelpersAddressSortAlgorithm
	82,  // 76: talos.resource.definitions.network.OperatorSpecSpec.operator:type_name -> talos.resource.definitions.enums.NetworkOperator
	7,   // 77: talos.resource.definitions.network.OperatorSpecSpec.dhcp4:type_name -> talos.resource.definitions.network.DHCP4OperatorSpec
	8,   // 78: talos.resource.definitions.network.OperatorSpecSpec.dhcp6:type_name -> talos.resource.definitions.network.DHCP6OperatorSpec
	52,  // 79: talos.resource.definitions.network.OperatorSpecSpec.vip:type_name -> talos.resource.definitions.network.VIPOperatorSpec
	60,  // 80: talos.resource.definitions.network.OperatorSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	83,  // 81: talos.resource.definitions.network.ProbeSpecSpec.interval:type_name -> google.protobuf.Duration
	47,  // 82: talos.resource.definitions.network.ProbeSpecSpec.tcp:type_name -> talos.resource.definitions.network.TCPProbeSpec
	60,  // 83: talos.resource.definitions.network.ProbeSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	61,  // 84: talos.resource.definitions.network.ResolverSpecSpec.dns_servers:type_name -> common.NetIP
	60,  // 85: talos.resource.definitions.network.ResolverSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	61,  // 86: talos.resource.definitions.network.ResolverStatusSpec.dns_servers:type_name -> common.NetIP
	58,  // 87: talos.resource.definitions.network.RouteSpecSpec.family:type_name -> talos.resource.definitions.enums.NethelpersFamily
	57,  // 88: talos.resource.definitions.network.RouteSpecSpec.destination:type_name -> common.NetIPPrefix
	61,  // 89: talos.resource.definitions.network.RouteSpecSpec.source:type_name -> common.NetIP
	61,  // 90: talos.resource.definitions.network.RouteSpecSpec.gateway:type_name -> common.NetIP
	84,  // 91: talos.resource.definitions.network.RouteSpecSpec.table:type_name -> talos.resource.definitions.enums.NethelpersRoutingTable
	59,  // 92: talos.resource.definitions.network.RouteSpecSpec.scope:type_name -> talos.resource.definitions.enums.NethelpersScope
	85,  // 93: talos.resource.definitions.network.RouteSpecSpec.type:type_name -> talos.resource.definitions.enums.NethelpersRouteType
	86,  // 94: talos.resource.definitions.network.RouteSpecSpec.protocol:type_name -> talos.resource.definitions.enums.NethelpersRouteProtocol
	60,  // 95: talos.resource.definitions.network.RouteSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	58,  // 96: talos.resource.definitions.network.RouteStatusSpec.family:type_name -> talos.resource.definitions.enums.NethelpersFamily
	57,  // 97: talos.resource.definitions.network.RouteStatusSpec.destination:type_name -> common.NetIPPrefix
	61,  // 98: talos.resource.definitions.network.RouteStatusSpec.source:type_name -> common.NetIP
	61,  // 99: talos.resource.definitions.network.RouteStatusSpec.gateway:type_name -> common.NetIP
	84,  // 100: talos.resource.definitions.network.RouteStatusSpec.table:type_name -> talos.resource.definitions.enums.NethelpersRoutingTable
	59,  // 101: talos.resource.definitions.network.RouteStatusSpec.scope:type_name -> talos.resource.definitions.enums.NethelpersScope
	85,  // 102: talos.resource.definitions.network.RouteStatusSpec.type:type_name -> talos.resource.definitions.enums.NethelpersRouteType
	86,  // 103: talos.resource.definitions.network.RouteStatusSpec.protocol:type_name -> talos.resource.definitions.enums.NethelpersRouteProtocol
	83,  // 104: talos.resource.definitions.network.TCPProbeSpec.timeout:type_name -> google.protobuf.Duration
	60,  // 105: talos.resource.definitions.network.TimeServerSpecSpec.config_layer:type_name -> talos.resource.definitions.enums.NetworkConfigLayer
	61,  // 106: talos.resource.definitions.network.VIPOperatorSpec.ip:type_name -> common.NetIP
	50,  // 107: talos.resource.definitions.network.VIPOperatorSpec.equinix_metal:type_name -> talos.resource.definitions.network.VIPEquinixMetalSpec
	51,  // 108: talos.resource.definitions.network.VIPOperatorSpec.h_cloud:type_name -> talos.resource.definitions.network.VIPHCloudSpec
	87,  // 109: talos.resource.definitions.network.VLANSpec.protocol:type_name -> talos.resource.definitions.enums.NethelpersVLANProtocol
	83,  // 110: talos.resource.definitions.network.WireguardPeer.persistent_keepalive_interval:type_name -> google.protobuf.Duration
	57,  // 111: talos.resource.definitions.network.WireguardPeer.allowed_ips:type_name -> common.NetIPPrefix
	54,  // 112: talos.resource.definitions.network.WireguardSpec.peers:type_name -> talos.resource.definitions.network.WireguardPeer
	113, // [113:113] is the sub-list for method output_type
	113, // [113:113] is the sub-list for method input_type
	113, // [113:113] is the sub-list for extension type_name
	113, // [113:113] is the sub-list for extension extendee
	0,   // [0:113] is the sub-list for field type_name
}

func init() { file_resource_definitions_network_network_proto_init() }
func file_resource_definitions_network_network_proto_init() {
	if File_resource_definitions_network_network_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_resource_definitions_network_network_proto_rawDesc), len(file_resource_definitions_network_network_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resource_definitions_network_network_proto_goTypes,
		DependencyIndexes: file_resource_definitions_network_network_proto_depIdxs,
		MessageInfos:      file_resource_definitions_network_network_proto_msgTypes,
	}.Build()
	File_resource_definitions_network_network_proto = out.File
	file_resource_definitions_network_network_proto_goTypes = nil
	file_resource_definitions_network_network_proto_depIdxs = nil
}

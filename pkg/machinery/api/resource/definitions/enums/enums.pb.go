// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: resource/definitions/enums/enums.proto

package enums

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MachineType represents a machine type.
type MachineType int32

const (
	// TypeUnknown represents undefined node type, when there is no machine configuration yet.
	MachineType_TYPE_UNKNOWN MachineType = 0
	// TypeInit type designates the first control plane node to come up. You can think of it like a bootstrap node.
	// This node will perform the initial steps to bootstrap the cluster -- generation of TLS assets, starting of the control plane, etc.
	MachineType_TYPE_INIT MachineType = 1
	// TypeControlPlane designates the node as a control plane member.
	// This means it will host etcd along with the Kubernetes controlplane components such as API Server, Controller Manager, Scheduler.
	MachineType_TYPE_CONTROL_PLANE MachineType = 2
	// TypeWorker designates the node as a worker node.
	// This means it will be an available compute node for scheduling workloads.
	MachineType_TYPE_WORKER MachineType = 3
)

// Enum value maps for MachineType.
var (
	MachineType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_INIT",
		2: "TYPE_CONTROL_PLANE",
		3: "TYPE_WORKER",
	}
	MachineType_value = map[string]int32{
		"TYPE_UNKNOWN":       0,
		"TYPE_INIT":          1,
		"TYPE_CONTROL_PLANE": 2,
		"TYPE_WORKER":        3,
	}
)

func (x MachineType) Enum() *MachineType {
	p := new(MachineType)
	*p = x
	return p
}

func (x MachineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[0].Descriptor()
}

func (MachineType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[0]
}

func (x MachineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineType.Descriptor instead.
func (MachineType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{0}
}

// NethelpersAddressFlag wraps IFF_* constants.
type NethelpersAddressFlag int32

const (
	NethelpersAddressFlag_NETHELPERS_ADDRESSFLAG_UNSPECIFIED NethelpersAddressFlag = 0
	NethelpersAddressFlag_ADDRESS_TEMPORARY                  NethelpersAddressFlag = 1
	NethelpersAddressFlag_ADDRESS_NO_DAD                     NethelpersAddressFlag = 2
	NethelpersAddressFlag_ADDRESS_OPTIMISTIC                 NethelpersAddressFlag = 4
	NethelpersAddressFlag_ADDRESS_DAD_FAILED                 NethelpersAddressFlag = 8
	NethelpersAddressFlag_ADDRESS_HOME                       NethelpersAddressFlag = 16
	NethelpersAddressFlag_ADDRESS_DEPRECATED                 NethelpersAddressFlag = 32
	NethelpersAddressFlag_ADDRESS_TENTATIVE                  NethelpersAddressFlag = 64
	NethelpersAddressFlag_ADDRESS_PERMANENT                  NethelpersAddressFlag = 128
	NethelpersAddressFlag_ADDRESS_MANAGEMENT_TEMP            NethelpersAddressFlag = 256
	NethelpersAddressFlag_ADDRESS_NO_PREFIX_ROUTE            NethelpersAddressFlag = 512
	NethelpersAddressFlag_ADDRESS_MC_AUTO_JOIN               NethelpersAddressFlag = 1024
	NethelpersAddressFlag_ADDRESS_STABLE_PRIVACY             NethelpersAddressFlag = 2048
)

// Enum value maps for NethelpersAddressFlag.
var (
	NethelpersAddressFlag_name = map[int32]string{
		0:    "NETHELPERS_ADDRESSFLAG_UNSPECIFIED",
		1:    "ADDRESS_TEMPORARY",
		2:    "ADDRESS_NO_DAD",
		4:    "ADDRESS_OPTIMISTIC",
		8:    "ADDRESS_DAD_FAILED",
		16:   "ADDRESS_HOME",
		32:   "ADDRESS_DEPRECATED",
		64:   "ADDRESS_TENTATIVE",
		128:  "ADDRESS_PERMANENT",
		256:  "ADDRESS_MANAGEMENT_TEMP",
		512:  "ADDRESS_NO_PREFIX_ROUTE",
		1024: "ADDRESS_MC_AUTO_JOIN",
		2048: "ADDRESS_STABLE_PRIVACY",
	}
	NethelpersAddressFlag_value = map[string]int32{
		"NETHELPERS_ADDRESSFLAG_UNSPECIFIED": 0,
		"ADDRESS_TEMPORARY":                  1,
		"ADDRESS_NO_DAD":                     2,
		"ADDRESS_OPTIMISTIC":                 4,
		"ADDRESS_DAD_FAILED":                 8,
		"ADDRESS_HOME":                       16,
		"ADDRESS_DEPRECATED":                 32,
		"ADDRESS_TENTATIVE":                  64,
		"ADDRESS_PERMANENT":                  128,
		"ADDRESS_MANAGEMENT_TEMP":            256,
		"ADDRESS_NO_PREFIX_ROUTE":            512,
		"ADDRESS_MC_AUTO_JOIN":               1024,
		"ADDRESS_STABLE_PRIVACY":             2048,
	}
)

func (x NethelpersAddressFlag) Enum() *NethelpersAddressFlag {
	p := new(NethelpersAddressFlag)
	*p = x
	return p
}

func (x NethelpersAddressFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersAddressFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[1].Descriptor()
}

func (NethelpersAddressFlag) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[1]
}

func (x NethelpersAddressFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersAddressFlag.Descriptor instead.
func (NethelpersAddressFlag) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{1}
}

// NethelpersADSelect is ADSelect.
type NethelpersADSelect int32

const (
	NethelpersADSelect_AD_SELECT_STABLE    NethelpersADSelect = 0
	NethelpersADSelect_AD_SELECT_BANDWIDTH NethelpersADSelect = 1
	NethelpersADSelect_AD_SELECT_COUNT     NethelpersADSelect = 2
)

// Enum value maps for NethelpersADSelect.
var (
	NethelpersADSelect_name = map[int32]string{
		0: "AD_SELECT_STABLE",
		1: "AD_SELECT_BANDWIDTH",
		2: "AD_SELECT_COUNT",
	}
	NethelpersADSelect_value = map[string]int32{
		"AD_SELECT_STABLE":    0,
		"AD_SELECT_BANDWIDTH": 1,
		"AD_SELECT_COUNT":     2,
	}
)

func (x NethelpersADSelect) Enum() *NethelpersADSelect {
	p := new(NethelpersADSelect)
	*p = x
	return p
}

func (x NethelpersADSelect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersADSelect) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[2].Descriptor()
}

func (NethelpersADSelect) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[2]
}

func (x NethelpersADSelect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersADSelect.Descriptor instead.
func (NethelpersADSelect) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{2}
}

// NethelpersARPAllTargets is an ARP targets mode.
type NethelpersARPAllTargets int32

const (
	NethelpersARPAllTargets_ARP_ALL_TARGETS_ANY NethelpersARPAllTargets = 0
	NethelpersARPAllTargets_ARP_ALL_TARGETS_ALL NethelpersARPAllTargets = 1
)

// Enum value maps for NethelpersARPAllTargets.
var (
	NethelpersARPAllTargets_name = map[int32]string{
		0: "ARP_ALL_TARGETS_ANY",
		1: "ARP_ALL_TARGETS_ALL",
	}
	NethelpersARPAllTargets_value = map[string]int32{
		"ARP_ALL_TARGETS_ANY": 0,
		"ARP_ALL_TARGETS_ALL": 1,
	}
)

func (x NethelpersARPAllTargets) Enum() *NethelpersARPAllTargets {
	p := new(NethelpersARPAllTargets)
	*p = x
	return p
}

func (x NethelpersARPAllTargets) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersARPAllTargets) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[3].Descriptor()
}

func (NethelpersARPAllTargets) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[3]
}

func (x NethelpersARPAllTargets) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersARPAllTargets.Descriptor instead.
func (NethelpersARPAllTargets) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{3}
}

// NethelpersARPValidate is an ARP Validation mode.
type NethelpersARPValidate int32

const (
	NethelpersARPValidate_ARP_VALIDATE_NONE   NethelpersARPValidate = 0
	NethelpersARPValidate_ARP_VALIDATE_ACTIVE NethelpersARPValidate = 1
	NethelpersARPValidate_ARP_VALIDATE_BACKUP NethelpersARPValidate = 2
	NethelpersARPValidate_ARP_VALIDATE_ALL    NethelpersARPValidate = 3
)

// Enum value maps for NethelpersARPValidate.
var (
	NethelpersARPValidate_name = map[int32]string{
		0: "ARP_VALIDATE_NONE",
		1: "ARP_VALIDATE_ACTIVE",
		2: "ARP_VALIDATE_BACKUP",
		3: "ARP_VALIDATE_ALL",
	}
	NethelpersARPValidate_value = map[string]int32{
		"ARP_VALIDATE_NONE":   0,
		"ARP_VALIDATE_ACTIVE": 1,
		"ARP_VALIDATE_BACKUP": 2,
		"ARP_VALIDATE_ALL":    3,
	}
)

func (x NethelpersARPValidate) Enum() *NethelpersARPValidate {
	p := new(NethelpersARPValidate)
	*p = x
	return p
}

func (x NethelpersARPValidate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersARPValidate) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[4].Descriptor()
}

func (NethelpersARPValidate) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[4]
}

func (x NethelpersARPValidate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersARPValidate.Descriptor instead.
func (NethelpersARPValidate) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{4}
}

// NethelpersBondMode is a bond mode.
type NethelpersBondMode int32

const (
	NethelpersBondMode_BOND_MODE_ROUNDROBIN    NethelpersBondMode = 0
	NethelpersBondMode_BOND_MODE_ACTIVE_BACKUP NethelpersBondMode = 1
	NethelpersBondMode_BOND_MODE_XOR           NethelpersBondMode = 2
	NethelpersBondMode_BOND_MODE_BROADCAST     NethelpersBondMode = 3
	NethelpersBondMode_BOND_MODE8023_AD        NethelpersBondMode = 4
	NethelpersBondMode_BOND_MODE_TLB           NethelpersBondMode = 5
	NethelpersBondMode_BOND_MODE_ALB           NethelpersBondMode = 6
)

// Enum value maps for NethelpersBondMode.
var (
	NethelpersBondMode_name = map[int32]string{
		0: "BOND_MODE_ROUNDROBIN",
		1: "BOND_MODE_ACTIVE_BACKUP",
		2: "BOND_MODE_XOR",
		3: "BOND_MODE_BROADCAST",
		4: "BOND_MODE8023_AD",
		5: "BOND_MODE_TLB",
		6: "BOND_MODE_ALB",
	}
	NethelpersBondMode_value = map[string]int32{
		"BOND_MODE_ROUNDROBIN":    0,
		"BOND_MODE_ACTIVE_BACKUP": 1,
		"BOND_MODE_XOR":           2,
		"BOND_MODE_BROADCAST":     3,
		"BOND_MODE8023_AD":        4,
		"BOND_MODE_TLB":           5,
		"BOND_MODE_ALB":           6,
	}
)

func (x NethelpersBondMode) Enum() *NethelpersBondMode {
	p := new(NethelpersBondMode)
	*p = x
	return p
}

func (x NethelpersBondMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersBondMode) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[5].Descriptor()
}

func (NethelpersBondMode) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[5]
}

func (x NethelpersBondMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersBondMode.Descriptor instead.
func (NethelpersBondMode) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{5}
}

// NethelpersBondXmitHashPolicy is a bond hash policy.
type NethelpersBondXmitHashPolicy int32

const (
	NethelpersBondXmitHashPolicy_BOND_XMIT_POLICY_LAYER2  NethelpersBondXmitHashPolicy = 0
	NethelpersBondXmitHashPolicy_BOND_XMIT_POLICY_LAYER34 NethelpersBondXmitHashPolicy = 1
	NethelpersBondXmitHashPolicy_BOND_XMIT_POLICY_LAYER23 NethelpersBondXmitHashPolicy = 2
	NethelpersBondXmitHashPolicy_BOND_XMIT_POLICY_ENCAP23 NethelpersBondXmitHashPolicy = 3
	NethelpersBondXmitHashPolicy_BOND_XMIT_POLICY_ENCAP34 NethelpersBondXmitHashPolicy = 4
)

// Enum value maps for NethelpersBondXmitHashPolicy.
var (
	NethelpersBondXmitHashPolicy_name = map[int32]string{
		0: "BOND_XMIT_POLICY_LAYER2",
		1: "BOND_XMIT_POLICY_LAYER34",
		2: "BOND_XMIT_POLICY_LAYER23",
		3: "BOND_XMIT_POLICY_ENCAP23",
		4: "BOND_XMIT_POLICY_ENCAP34",
	}
	NethelpersBondXmitHashPolicy_value = map[string]int32{
		"BOND_XMIT_POLICY_LAYER2":  0,
		"BOND_XMIT_POLICY_LAYER34": 1,
		"BOND_XMIT_POLICY_LAYER23": 2,
		"BOND_XMIT_POLICY_ENCAP23": 3,
		"BOND_XMIT_POLICY_ENCAP34": 4,
	}
)

func (x NethelpersBondXmitHashPolicy) Enum() *NethelpersBondXmitHashPolicy {
	p := new(NethelpersBondXmitHashPolicy)
	*p = x
	return p
}

func (x NethelpersBondXmitHashPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersBondXmitHashPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[6].Descriptor()
}

func (NethelpersBondXmitHashPolicy) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[6]
}

func (x NethelpersBondXmitHashPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersBondXmitHashPolicy.Descriptor instead.
func (NethelpersBondXmitHashPolicy) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{6}
}

// NethelpersConntrackState is a conntrack state.
type NethelpersConntrackState int32

const (
	NethelpersConntrackState_NETHELPERS_CONNTRACKSTATE_UNSPECIFIED NethelpersConntrackState = 0
	NethelpersConntrackState_CONNTRACK_STATE_NEW                   NethelpersConntrackState = 8
	NethelpersConntrackState_CONNTRACK_STATE_RELATED               NethelpersConntrackState = 4
	NethelpersConntrackState_CONNTRACK_STATE_ESTABLISHED           NethelpersConntrackState = 2
	NethelpersConntrackState_CONNTRACK_STATE_INVALID               NethelpersConntrackState = 1
)

// Enum value maps for NethelpersConntrackState.
var (
	NethelpersConntrackState_name = map[int32]string{
		0: "NETHELPERS_CONNTRACKSTATE_UNSPECIFIED",
		8: "CONNTRACK_STATE_NEW",
		4: "CONNTRACK_STATE_RELATED",
		2: "CONNTRACK_STATE_ESTABLISHED",
		1: "CONNTRACK_STATE_INVALID",
	}
	NethelpersConntrackState_value = map[string]int32{
		"NETHELPERS_CONNTRACKSTATE_UNSPECIFIED": 0,
		"CONNTRACK_STATE_NEW":                   8,
		"CONNTRACK_STATE_RELATED":               4,
		"CONNTRACK_STATE_ESTABLISHED":           2,
		"CONNTRACK_STATE_INVALID":               1,
	}
)

func (x NethelpersConntrackState) Enum() *NethelpersConntrackState {
	p := new(NethelpersConntrackState)
	*p = x
	return p
}

func (x NethelpersConntrackState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersConntrackState) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[7].Descriptor()
}

func (NethelpersConntrackState) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[7]
}

func (x NethelpersConntrackState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersConntrackState.Descriptor instead.
func (NethelpersConntrackState) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{7}
}

// NethelpersDuplex wraps ethtool.Duplex for YAML marshaling.
type NethelpersDuplex int32

const (
	NethelpersDuplex_HALF    NethelpersDuplex = 0
	NethelpersDuplex_FULL    NethelpersDuplex = 1
	NethelpersDuplex_UNKNOWN NethelpersDuplex = 255
)

// Enum value maps for NethelpersDuplex.
var (
	NethelpersDuplex_name = map[int32]string{
		0:   "HALF",
		1:   "FULL",
		255: "UNKNOWN",
	}
	NethelpersDuplex_value = map[string]int32{
		"HALF":    0,
		"FULL":    1,
		"UNKNOWN": 255,
	}
)

func (x NethelpersDuplex) Enum() *NethelpersDuplex {
	p := new(NethelpersDuplex)
	*p = x
	return p
}

func (x NethelpersDuplex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersDuplex) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[8].Descriptor()
}

func (NethelpersDuplex) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[8]
}

func (x NethelpersDuplex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersDuplex.Descriptor instead.
func (NethelpersDuplex) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{8}
}

// NethelpersFailOverMAC is a MAC failover mode.
type NethelpersFailOverMAC int32

const (
	NethelpersFailOverMAC_FAIL_OVER_MAC_NONE   NethelpersFailOverMAC = 0
	NethelpersFailOverMAC_FAIL_OVER_MAC_ACTIVE NethelpersFailOverMAC = 1
	NethelpersFailOverMAC_FAIL_OVER_MAC_FOLLOW NethelpersFailOverMAC = 2
)

// Enum value maps for NethelpersFailOverMAC.
var (
	NethelpersFailOverMAC_name = map[int32]string{
		0: "FAIL_OVER_MAC_NONE",
		1: "FAIL_OVER_MAC_ACTIVE",
		2: "FAIL_OVER_MAC_FOLLOW",
	}
	NethelpersFailOverMAC_value = map[string]int32{
		"FAIL_OVER_MAC_NONE":   0,
		"FAIL_OVER_MAC_ACTIVE": 1,
		"FAIL_OVER_MAC_FOLLOW": 2,
	}
)

func (x NethelpersFailOverMAC) Enum() *NethelpersFailOverMAC {
	p := new(NethelpersFailOverMAC)
	*p = x
	return p
}

func (x NethelpersFailOverMAC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersFailOverMAC) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[9].Descriptor()
}

func (NethelpersFailOverMAC) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[9]
}

func (x NethelpersFailOverMAC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersFailOverMAC.Descriptor instead.
func (NethelpersFailOverMAC) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{9}
}

// NethelpersFamily is a network family.
type NethelpersFamily int32

const (
	NethelpersFamily_NETHELPERS_FAMILY_UNSPECIFIED NethelpersFamily = 0
	NethelpersFamily_FAMILY_INET4                  NethelpersFamily = 2
	NethelpersFamily_FAMILY_INET6                  NethelpersFamily = 10
)

// Enum value maps for NethelpersFamily.
var (
	NethelpersFamily_name = map[int32]string{
		0:  "NETHELPERS_FAMILY_UNSPECIFIED",
		2:  "FAMILY_INET4",
		10: "FAMILY_INET6",
	}
	NethelpersFamily_value = map[string]int32{
		"NETHELPERS_FAMILY_UNSPECIFIED": 0,
		"FAMILY_INET4":                  2,
		"FAMILY_INET6":                  10,
	}
)

func (x NethelpersFamily) Enum() *NethelpersFamily {
	p := new(NethelpersFamily)
	*p = x
	return p
}

func (x NethelpersFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[10].Descriptor()
}

func (NethelpersFamily) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[10]
}

func (x NethelpersFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersFamily.Descriptor instead.
func (NethelpersFamily) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{10}
}

// NethelpersLACPRate is a LACP rate.
type NethelpersLACPRate int32

const (
	NethelpersLACPRate_LACP_RATE_SLOW NethelpersLACPRate = 0
	NethelpersLACPRate_LACP_RATE_FAST NethelpersLACPRate = 1
)

// Enum value maps for NethelpersLACPRate.
var (
	NethelpersLACPRate_name = map[int32]string{
		0: "LACP_RATE_SLOW",
		1: "LACP_RATE_FAST",
	}
	NethelpersLACPRate_value = map[string]int32{
		"LACP_RATE_SLOW": 0,
		"LACP_RATE_FAST": 1,
	}
)

func (x NethelpersLACPRate) Enum() *NethelpersLACPRate {
	p := new(NethelpersLACPRate)
	*p = x
	return p
}

func (x NethelpersLACPRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersLACPRate) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[11].Descriptor()
}

func (NethelpersLACPRate) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[11]
}

func (x NethelpersLACPRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersLACPRate.Descriptor instead.
func (NethelpersLACPRate) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{11}
}

// NethelpersLinkType is a link type.
type NethelpersLinkType int32

const (
	NethelpersLinkType_LINK_NETROM            NethelpersLinkType = 0
	NethelpersLinkType_LINK_ETHER             NethelpersLinkType = 1
	NethelpersLinkType_LINK_EETHER            NethelpersLinkType = 2
	NethelpersLinkType_LINK_AX25              NethelpersLinkType = 3
	NethelpersLinkType_LINK_PRONET            NethelpersLinkType = 4
	NethelpersLinkType_LINK_CHAOS             NethelpersLinkType = 5
	NethelpersLinkType_LINK_IEE802            NethelpersLinkType = 6
	NethelpersLinkType_LINK_ARCNET            NethelpersLinkType = 7
	NethelpersLinkType_LINK_ATALK             NethelpersLinkType = 8
	NethelpersLinkType_LINK_DLCI              NethelpersLinkType = 15
	NethelpersLinkType_LINK_ATM               NethelpersLinkType = 19
	NethelpersLinkType_LINK_METRICOM          NethelpersLinkType = 23
	NethelpersLinkType_LINK_IEEE1394          NethelpersLinkType = 24
	NethelpersLinkType_LINK_EUI64             NethelpersLinkType = 27
	NethelpersLinkType_LINK_INFINIBAND        NethelpersLinkType = 32
	NethelpersLinkType_LINK_SLIP              NethelpersLinkType = 256
	NethelpersLinkType_LINK_CSLIP             NethelpersLinkType = 257
	NethelpersLinkType_LINK_SLIP6             NethelpersLinkType = 258
	NethelpersLinkType_LINK_CSLIP6            NethelpersLinkType = 259
	NethelpersLinkType_LINK_RSRVD             NethelpersLinkType = 260
	NethelpersLinkType_LINK_ADAPT             NethelpersLinkType = 264
	NethelpersLinkType_LINK_ROSE              NethelpersLinkType = 270
	NethelpersLinkType_LINK_X25               NethelpersLinkType = 271
	NethelpersLinkType_LINK_HWX25             NethelpersLinkType = 272
	NethelpersLinkType_LINK_CAN               NethelpersLinkType = 280
	NethelpersLinkType_LINK_PPP               NethelpersLinkType = 512
	NethelpersLinkType_LINK_CISCO             NethelpersLinkType = 513
	NethelpersLinkType_LINK_HDLC              NethelpersLinkType = 513
	NethelpersLinkType_LINK_LAPB              NethelpersLinkType = 516
	NethelpersLinkType_LINK_DDCMP             NethelpersLinkType = 517
	NethelpersLinkType_LINK_RAWHDLC           NethelpersLinkType = 518
	NethelpersLinkType_LINK_TUNNEL            NethelpersLinkType = 768
	NethelpersLinkType_LINK_TUNNEL6           NethelpersLinkType = 769
	NethelpersLinkType_LINK_FRAD              NethelpersLinkType = 770
	NethelpersLinkType_LINK_SKIP              NethelpersLinkType = 771
	NethelpersLinkType_LINK_LOOPBCK           NethelpersLinkType = 772
	NethelpersLinkType_LINK_LOCALTLK          NethelpersLinkType = 773
	NethelpersLinkType_LINK_FDDI              NethelpersLinkType = 774
	NethelpersLinkType_LINK_BIF               NethelpersLinkType = 775
	NethelpersLinkType_LINK_SIT               NethelpersLinkType = 776
	NethelpersLinkType_LINK_IPDDP             NethelpersLinkType = 777
	NethelpersLinkType_LINK_IPGRE             NethelpersLinkType = 778
	NethelpersLinkType_LINK_PIMREG            NethelpersLinkType = 779
	NethelpersLinkType_LINK_HIPPI             NethelpersLinkType = 780
	NethelpersLinkType_LINK_ASH               NethelpersLinkType = 781
	NethelpersLinkType_LINK_ECONET            NethelpersLinkType = 782
	NethelpersLinkType_LINK_IRDA              NethelpersLinkType = 783
	NethelpersLinkType_LINK_FCPP              NethelpersLinkType = 784
	NethelpersLinkType_LINK_FCAL              NethelpersLinkType = 785
	NethelpersLinkType_LINK_FCPL              NethelpersLinkType = 786
	NethelpersLinkType_LINK_FCFABRIC          NethelpersLinkType = 787
	NethelpersLinkType_LINK_FCFABRIC1         NethelpersLinkType = 788
	NethelpersLinkType_LINK_FCFABRIC2         NethelpersLinkType = 789
	NethelpersLinkType_LINK_FCFABRIC3         NethelpersLinkType = 790
	NethelpersLinkType_LINK_FCFABRIC4         NethelpersLinkType = 791
	NethelpersLinkType_LINK_FCFABRIC5         NethelpersLinkType = 792
	NethelpersLinkType_LINK_FCFABRIC6         NethelpersLinkType = 793
	NethelpersLinkType_LINK_FCFABRIC7         NethelpersLinkType = 794
	NethelpersLinkType_LINK_FCFABRIC8         NethelpersLinkType = 795
	NethelpersLinkType_LINK_FCFABRIC9         NethelpersLinkType = 796
	NethelpersLinkType_LINK_FCFABRIC10        NethelpersLinkType = 797
	NethelpersLinkType_LINK_FCFABRIC11        NethelpersLinkType = 798
	NethelpersLinkType_LINK_FCFABRIC12        NethelpersLinkType = 799
	NethelpersLinkType_LINK_IEE802TR          NethelpersLinkType = 800
	NethelpersLinkType_LINK_IEE80211          NethelpersLinkType = 801
	NethelpersLinkType_LINK_IEE80211PRISM     NethelpersLinkType = 802
	NethelpersLinkType_LINK_IEE80211_RADIOTAP NethelpersLinkType = 803
	NethelpersLinkType_LINK_IEE8021154        NethelpersLinkType = 804
	NethelpersLinkType_LINK_IEE8021154MONITOR NethelpersLinkType = 805
	NethelpersLinkType_LINK_PHONET            NethelpersLinkType = 820
	NethelpersLinkType_LINK_PHONETPIPE        NethelpersLinkType = 821
	NethelpersLinkType_LINK_CAIF              NethelpersLinkType = 822
	NethelpersLinkType_LINK_IP6GRE            NethelpersLinkType = 823
	NethelpersLinkType_LINK_NETLINK           NethelpersLinkType = 824
	NethelpersLinkType_LINK6_LOWPAN           NethelpersLinkType = 825
	NethelpersLinkType_LINK_VOID              NethelpersLinkType = 65535
	NethelpersLinkType_LINK_NONE              NethelpersLinkType = 65534
)

// Enum value maps for NethelpersLinkType.
var (
	NethelpersLinkType_name = map[int32]string{
		0:   "LINK_NETROM",
		1:   "LINK_ETHER",
		2:   "LINK_EETHER",
		3:   "LINK_AX25",
		4:   "LINK_PRONET",
		5:   "LINK_CHAOS",
		6:   "LINK_IEE802",
		7:   "LINK_ARCNET",
		8:   "LINK_ATALK",
		15:  "LINK_DLCI",
		19:  "LINK_ATM",
		23:  "LINK_METRICOM",
		24:  "LINK_IEEE1394",
		27:  "LINK_EUI64",
		32:  "LINK_INFINIBAND",
		256: "LINK_SLIP",
		257: "LINK_CSLIP",
		258: "LINK_SLIP6",
		259: "LINK_CSLIP6",
		260: "LINK_RSRVD",
		264: "LINK_ADAPT",
		270: "LINK_ROSE",
		271: "LINK_X25",
		272: "LINK_HWX25",
		280: "LINK_CAN",
		512: "LINK_PPP",
		513: "LINK_CISCO",
		// Duplicate value: 513: "LINK_HDLC",
		516:   "LINK_LAPB",
		517:   "LINK_DDCMP",
		518:   "LINK_RAWHDLC",
		768:   "LINK_TUNNEL",
		769:   "LINK_TUNNEL6",
		770:   "LINK_FRAD",
		771:   "LINK_SKIP",
		772:   "LINK_LOOPBCK",
		773:   "LINK_LOCALTLK",
		774:   "LINK_FDDI",
		775:   "LINK_BIF",
		776:   "LINK_SIT",
		777:   "LINK_IPDDP",
		778:   "LINK_IPGRE",
		779:   "LINK_PIMREG",
		780:   "LINK_HIPPI",
		781:   "LINK_ASH",
		782:   "LINK_ECONET",
		783:   "LINK_IRDA",
		784:   "LINK_FCPP",
		785:   "LINK_FCAL",
		786:   "LINK_FCPL",
		787:   "LINK_FCFABRIC",
		788:   "LINK_FCFABRIC1",
		789:   "LINK_FCFABRIC2",
		790:   "LINK_FCFABRIC3",
		791:   "LINK_FCFABRIC4",
		792:   "LINK_FCFABRIC5",
		793:   "LINK_FCFABRIC6",
		794:   "LINK_FCFABRIC7",
		795:   "LINK_FCFABRIC8",
		796:   "LINK_FCFABRIC9",
		797:   "LINK_FCFABRIC10",
		798:   "LINK_FCFABRIC11",
		799:   "LINK_FCFABRIC12",
		800:   "LINK_IEE802TR",
		801:   "LINK_IEE80211",
		802:   "LINK_IEE80211PRISM",
		803:   "LINK_IEE80211_RADIOTAP",
		804:   "LINK_IEE8021154",
		805:   "LINK_IEE8021154MONITOR",
		820:   "LINK_PHONET",
		821:   "LINK_PHONETPIPE",
		822:   "LINK_CAIF",
		823:   "LINK_IP6GRE",
		824:   "LINK_NETLINK",
		825:   "LINK6_LOWPAN",
		65535: "LINK_VOID",
		65534: "LINK_NONE",
	}
	NethelpersLinkType_value = map[string]int32{
		"LINK_NETROM":            0,
		"LINK_ETHER":             1,
		"LINK_EETHER":            2,
		"LINK_AX25":              3,
		"LINK_PRONET":            4,
		"LINK_CHAOS":             5,
		"LINK_IEE802":            6,
		"LINK_ARCNET":            7,
		"LINK_ATALK":             8,
		"LINK_DLCI":              15,
		"LINK_ATM":               19,
		"LINK_METRICOM":          23,
		"LINK_IEEE1394":          24,
		"LINK_EUI64":             27,
		"LINK_INFINIBAND":        32,
		"LINK_SLIP":              256,
		"LINK_CSLIP":             257,
		"LINK_SLIP6":             258,
		"LINK_CSLIP6":            259,
		"LINK_RSRVD":             260,
		"LINK_ADAPT":             264,
		"LINK_ROSE":              270,
		"LINK_X25":               271,
		"LINK_HWX25":             272,
		"LINK_CAN":               280,
		"LINK_PPP":               512,
		"LINK_CISCO":             513,
		"LINK_HDLC":              513,
		"LINK_LAPB":              516,
		"LINK_DDCMP":             517,
		"LINK_RAWHDLC":           518,
		"LINK_TUNNEL":            768,
		"LINK_TUNNEL6":           769,
		"LINK_FRAD":              770,
		"LINK_SKIP":              771,
		"LINK_LOOPBCK":           772,
		"LINK_LOCALTLK":          773,
		"LINK_FDDI":              774,
		"LINK_BIF":               775,
		"LINK_SIT":               776,
		"LINK_IPDDP":             777,
		"LINK_IPGRE":             778,
		"LINK_PIMREG":            779,
		"LINK_HIPPI":             780,
		"LINK_ASH":               781,
		"LINK_ECONET":            782,
		"LINK_IRDA":              783,
		"LINK_FCPP":              784,
		"LINK_FCAL":              785,
		"LINK_FCPL":              786,
		"LINK_FCFABRIC":          787,
		"LINK_FCFABRIC1":         788,
		"LINK_FCFABRIC2":         789,
		"LINK_FCFABRIC3":         790,
		"LINK_FCFABRIC4":         791,
		"LINK_FCFABRIC5":         792,
		"LINK_FCFABRIC6":         793,
		"LINK_FCFABRIC7":         794,
		"LINK_FCFABRIC8":         795,
		"LINK_FCFABRIC9":         796,
		"LINK_FCFABRIC10":        797,
		"LINK_FCFABRIC11":        798,
		"LINK_FCFABRIC12":        799,
		"LINK_IEE802TR":          800,
		"LINK_IEE80211":          801,
		"LINK_IEE80211PRISM":     802,
		"LINK_IEE80211_RADIOTAP": 803,
		"LINK_IEE8021154":        804,
		"LINK_IEE8021154MONITOR": 805,
		"LINK_PHONET":            820,
		"LINK_PHONETPIPE":        821,
		"LINK_CAIF":              822,
		"LINK_IP6GRE":            823,
		"LINK_NETLINK":           824,
		"LINK6_LOWPAN":           825,
		"LINK_VOID":              65535,
		"LINK_NONE":              65534,
	}
)

func (x NethelpersLinkType) Enum() *NethelpersLinkType {
	p := new(NethelpersLinkType)
	*p = x
	return p
}

func (x NethelpersLinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersLinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[12].Descriptor()
}

func (NethelpersLinkType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[12]
}

func (x NethelpersLinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersLinkType.Descriptor instead.
func (NethelpersLinkType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{12}
}

// NethelpersMatchOperator is a netfilter match operator.
type NethelpersMatchOperator int32

const (
	NethelpersMatchOperator_OPERATOR_EQUAL     NethelpersMatchOperator = 0
	NethelpersMatchOperator_OPERATOR_NOT_EQUAL NethelpersMatchOperator = 1
)

// Enum value maps for NethelpersMatchOperator.
var (
	NethelpersMatchOperator_name = map[int32]string{
		0: "OPERATOR_EQUAL",
		1: "OPERATOR_NOT_EQUAL",
	}
	NethelpersMatchOperator_value = map[string]int32{
		"OPERATOR_EQUAL":     0,
		"OPERATOR_NOT_EQUAL": 1,
	}
)

func (x NethelpersMatchOperator) Enum() *NethelpersMatchOperator {
	p := new(NethelpersMatchOperator)
	*p = x
	return p
}

func (x NethelpersMatchOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersMatchOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[13].Descriptor()
}

func (NethelpersMatchOperator) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[13]
}

func (x NethelpersMatchOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersMatchOperator.Descriptor instead.
func (NethelpersMatchOperator) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{13}
}

// NethelpersNfTablesChainHook wraps nftables.ChainHook for YAML marshaling.
type NethelpersNfTablesChainHook int32

const (
	NethelpersNfTablesChainHook_CHAIN_HOOK_PREROUTING  NethelpersNfTablesChainHook = 0
	NethelpersNfTablesChainHook_CHAIN_HOOK_INPUT       NethelpersNfTablesChainHook = 1
	NethelpersNfTablesChainHook_CHAIN_HOOK_FORWARD     NethelpersNfTablesChainHook = 2
	NethelpersNfTablesChainHook_CHAIN_HOOK_OUTPUT      NethelpersNfTablesChainHook = 3
	NethelpersNfTablesChainHook_CHAIN_HOOK_POSTROUTING NethelpersNfTablesChainHook = 4
)

// Enum value maps for NethelpersNfTablesChainHook.
var (
	NethelpersNfTablesChainHook_name = map[int32]string{
		0: "CHAIN_HOOK_PREROUTING",
		1: "CHAIN_HOOK_INPUT",
		2: "CHAIN_HOOK_FORWARD",
		3: "CHAIN_HOOK_OUTPUT",
		4: "CHAIN_HOOK_POSTROUTING",
	}
	NethelpersNfTablesChainHook_value = map[string]int32{
		"CHAIN_HOOK_PREROUTING":  0,
		"CHAIN_HOOK_INPUT":       1,
		"CHAIN_HOOK_FORWARD":     2,
		"CHAIN_HOOK_OUTPUT":      3,
		"CHAIN_HOOK_POSTROUTING": 4,
	}
)

func (x NethelpersNfTablesChainHook) Enum() *NethelpersNfTablesChainHook {
	p := new(NethelpersNfTablesChainHook)
	*p = x
	return p
}

func (x NethelpersNfTablesChainHook) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersNfTablesChainHook) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[14].Descriptor()
}

func (NethelpersNfTablesChainHook) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[14]
}

func (x NethelpersNfTablesChainHook) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersNfTablesChainHook.Descriptor instead.
func (NethelpersNfTablesChainHook) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{14}
}

// NethelpersNfTablesChainPriority wraps nftables.ChainPriority for YAML marshaling.
type NethelpersNfTablesChainPriority int32

const (
	NethelpersNfTablesChainPriority_NETHELPERS_NFTABLESCHAINPRIORITY_UNSPECIFIED NethelpersNfTablesChainPriority = 0
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_FIRST                         NethelpersNfTablesChainPriority = -2147483648
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_CONNTRACK_DEFRAG              NethelpersNfTablesChainPriority = -400
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_RAW                           NethelpersNfTablesChainPriority = -300
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_SE_LINUX_FIRST                NethelpersNfTablesChainPriority = -225
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_CONNTRACK                     NethelpersNfTablesChainPriority = -200
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_MANGLE                        NethelpersNfTablesChainPriority = -150
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_NAT_DEST                      NethelpersNfTablesChainPriority = -100
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_FILTER                        NethelpersNfTablesChainPriority = 0
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_SECURITY                      NethelpersNfTablesChainPriority = 50
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_NAT_SOURCE                    NethelpersNfTablesChainPriority = 100
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_SE_LINUX_LAST                 NethelpersNfTablesChainPriority = 225
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_CONNTRACK_HELPER              NethelpersNfTablesChainPriority = 300
	NethelpersNfTablesChainPriority_CHAIN_PRIORITY_LAST                          NethelpersNfTablesChainPriority = 2147483647
)

// Enum value maps for NethelpersNfTablesChainPriority.
var (
	NethelpersNfTablesChainPriority_name = map[int32]string{
		0:           "NETHELPERS_NFTABLESCHAINPRIORITY_UNSPECIFIED",
		-2147483648: "CHAIN_PRIORITY_FIRST",
		-400:        "CHAIN_PRIORITY_CONNTRACK_DEFRAG",
		-300:        "CHAIN_PRIORITY_RAW",
		-225:        "CHAIN_PRIORITY_SE_LINUX_FIRST",
		-200:        "CHAIN_PRIORITY_CONNTRACK",
		-150:        "CHAIN_PRIORITY_MANGLE",
		-100:        "CHAIN_PRIORITY_NAT_DEST",
		// Duplicate value: 0: "CHAIN_PRIORITY_FILTER",
		50:         "CHAIN_PRIORITY_SECURITY",
		100:        "CHAIN_PRIORITY_NAT_SOURCE",
		225:        "CHAIN_PRIORITY_SE_LINUX_LAST",
		300:        "CHAIN_PRIORITY_CONNTRACK_HELPER",
		2147483647: "CHAIN_PRIORITY_LAST",
	}
	NethelpersNfTablesChainPriority_value = map[string]int32{
		"NETHELPERS_NFTABLESCHAINPRIORITY_UNSPECIFIED": 0,
		"CHAIN_PRIORITY_FIRST":                         -2147483648,
		"CHAIN_PRIORITY_CONNTRACK_DEFRAG":              -400,
		"CHAIN_PRIORITY_RAW":                           -300,
		"CHAIN_PRIORITY_SE_LINUX_FIRST":                -225,
		"CHAIN_PRIORITY_CONNTRACK":                     -200,
		"CHAIN_PRIORITY_MANGLE":                        -150,
		"CHAIN_PRIORITY_NAT_DEST":                      -100,
		"CHAIN_PRIORITY_FILTER":                        0,
		"CHAIN_PRIORITY_SECURITY":                      50,
		"CHAIN_PRIORITY_NAT_SOURCE":                    100,
		"CHAIN_PRIORITY_SE_LINUX_LAST":                 225,
		"CHAIN_PRIORITY_CONNTRACK_HELPER":              300,
		"CHAIN_PRIORITY_LAST":                          2147483647,
	}
)

func (x NethelpersNfTablesChainPriority) Enum() *NethelpersNfTablesChainPriority {
	p := new(NethelpersNfTablesChainPriority)
	*p = x
	return p
}

func (x NethelpersNfTablesChainPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersNfTablesChainPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[15].Descriptor()
}

func (NethelpersNfTablesChainPriority) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[15]
}

func (x NethelpersNfTablesChainPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersNfTablesChainPriority.Descriptor instead.
func (NethelpersNfTablesChainPriority) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{15}
}

// NethelpersNfTablesVerdict wraps nftables.Verdict for YAML marshaling.
type NethelpersNfTablesVerdict int32

const (
	NethelpersNfTablesVerdict_VERDICT_DROP   NethelpersNfTablesVerdict = 0
	NethelpersNfTablesVerdict_VERDICT_ACCEPT NethelpersNfTablesVerdict = 1
)

// Enum value maps for NethelpersNfTablesVerdict.
var (
	NethelpersNfTablesVerdict_name = map[int32]string{
		0: "VERDICT_DROP",
		1: "VERDICT_ACCEPT",
	}
	NethelpersNfTablesVerdict_value = map[string]int32{
		"VERDICT_DROP":   0,
		"VERDICT_ACCEPT": 1,
	}
)

func (x NethelpersNfTablesVerdict) Enum() *NethelpersNfTablesVerdict {
	p := new(NethelpersNfTablesVerdict)
	*p = x
	return p
}

func (x NethelpersNfTablesVerdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersNfTablesVerdict) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[16].Descriptor()
}

func (NethelpersNfTablesVerdict) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[16]
}

func (x NethelpersNfTablesVerdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersNfTablesVerdict.Descriptor instead.
func (NethelpersNfTablesVerdict) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{16}
}

// NethelpersOperationalState wraps rtnetlink.OperationalState for YAML marshaling.
type NethelpersOperationalState int32

const (
	NethelpersOperationalState_OPER_STATE_UNKNOWN          NethelpersOperationalState = 0
	NethelpersOperationalState_OPER_STATE_NOT_PRESENT      NethelpersOperationalState = 1
	NethelpersOperationalState_OPER_STATE_DOWN             NethelpersOperationalState = 2
	NethelpersOperationalState_OPER_STATE_LOWER_LAYER_DOWN NethelpersOperationalState = 3
	NethelpersOperationalState_OPER_STATE_TESTING          NethelpersOperationalState = 4
	NethelpersOperationalState_OPER_STATE_DORMANT          NethelpersOperationalState = 5
	NethelpersOperationalState_OPER_STATE_UP               NethelpersOperationalState = 6
)

// Enum value maps for NethelpersOperationalState.
var (
	NethelpersOperationalState_name = map[int32]string{
		0: "OPER_STATE_UNKNOWN",
		1: "OPER_STATE_NOT_PRESENT",
		2: "OPER_STATE_DOWN",
		3: "OPER_STATE_LOWER_LAYER_DOWN",
		4: "OPER_STATE_TESTING",
		5: "OPER_STATE_DORMANT",
		6: "OPER_STATE_UP",
	}
	NethelpersOperationalState_value = map[string]int32{
		"OPER_STATE_UNKNOWN":          0,
		"OPER_STATE_NOT_PRESENT":      1,
		"OPER_STATE_DOWN":             2,
		"OPER_STATE_LOWER_LAYER_DOWN": 3,
		"OPER_STATE_TESTING":          4,
		"OPER_STATE_DORMANT":          5,
		"OPER_STATE_UP":               6,
	}
)

func (x NethelpersOperationalState) Enum() *NethelpersOperationalState {
	p := new(NethelpersOperationalState)
	*p = x
	return p
}

func (x NethelpersOperationalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersOperationalState) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[17].Descriptor()
}

func (NethelpersOperationalState) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[17]
}

func (x NethelpersOperationalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersOperationalState.Descriptor instead.
func (NethelpersOperationalState) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{17}
}

// NethelpersPort wraps ethtool.Port for YAML marshaling.
type NethelpersPort int32

const (
	NethelpersPort_TWISTED_PAIR  NethelpersPort = 0
	NethelpersPort_AUI           NethelpersPort = 1
	NethelpersPort_MII           NethelpersPort = 2
	NethelpersPort_FIBRE         NethelpersPort = 3
	NethelpersPort_BNC           NethelpersPort = 4
	NethelpersPort_DIRECT_ATTACH NethelpersPort = 5
	NethelpersPort_NONE          NethelpersPort = 239
	NethelpersPort_OTHER         NethelpersPort = 255
)

// Enum value maps for NethelpersPort.
var (
	NethelpersPort_name = map[int32]string{
		0:   "TWISTED_PAIR",
		1:   "AUI",
		2:   "MII",
		3:   "FIBRE",
		4:   "BNC",
		5:   "DIRECT_ATTACH",
		239: "NONE",
		255: "OTHER",
	}
	NethelpersPort_value = map[string]int32{
		"TWISTED_PAIR":  0,
		"AUI":           1,
		"MII":           2,
		"FIBRE":         3,
		"BNC":           4,
		"DIRECT_ATTACH": 5,
		"NONE":          239,
		"OTHER":         255,
	}
)

func (x NethelpersPort) Enum() *NethelpersPort {
	p := new(NethelpersPort)
	*p = x
	return p
}

func (x NethelpersPort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersPort) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[18].Descriptor()
}

func (NethelpersPort) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[18]
}

func (x NethelpersPort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersPort.Descriptor instead.
func (NethelpersPort) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{18}
}

// NethelpersPrimaryReselect is an ARP targets mode.
type NethelpersPrimaryReselect int32

const (
	NethelpersPrimaryReselect_PRIMARY_RESELECT_ALWAYS  NethelpersPrimaryReselect = 0
	NethelpersPrimaryReselect_PRIMARY_RESELECT_BETTER  NethelpersPrimaryReselect = 1
	NethelpersPrimaryReselect_PRIMARY_RESELECT_FAILURE NethelpersPrimaryReselect = 2
)

// Enum value maps for NethelpersPrimaryReselect.
var (
	NethelpersPrimaryReselect_name = map[int32]string{
		0: "PRIMARY_RESELECT_ALWAYS",
		1: "PRIMARY_RESELECT_BETTER",
		2: "PRIMARY_RESELECT_FAILURE",
	}
	NethelpersPrimaryReselect_value = map[string]int32{
		"PRIMARY_RESELECT_ALWAYS":  0,
		"PRIMARY_RESELECT_BETTER":  1,
		"PRIMARY_RESELECT_FAILURE": 2,
	}
)

func (x NethelpersPrimaryReselect) Enum() *NethelpersPrimaryReselect {
	p := new(NethelpersPrimaryReselect)
	*p = x
	return p
}

func (x NethelpersPrimaryReselect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersPrimaryReselect) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[19].Descriptor()
}

func (NethelpersPrimaryReselect) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[19]
}

func (x NethelpersPrimaryReselect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersPrimaryReselect.Descriptor instead.
func (NethelpersPrimaryReselect) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{19}
}

// NethelpersProtocol is a inet protocol.
type NethelpersProtocol int32

const (
	NethelpersProtocol_NETHELPERS_PROTOCOL_UNSPECIFIED NethelpersProtocol = 0
	NethelpersProtocol_PROTOCOL_ICMP                   NethelpersProtocol = 1
	NethelpersProtocol_PROTOCOL_TCP                    NethelpersProtocol = 6
	NethelpersProtocol_PROTOCOL_UDP                    NethelpersProtocol = 17
	NethelpersProtocol_PROTOCOL_ICM_PV6                NethelpersProtocol = 58
)

// Enum value maps for NethelpersProtocol.
var (
	NethelpersProtocol_name = map[int32]string{
		0:  "NETHELPERS_PROTOCOL_UNSPECIFIED",
		1:  "PROTOCOL_ICMP",
		6:  "PROTOCOL_TCP",
		17: "PROTOCOL_UDP",
		58: "PROTOCOL_ICM_PV6",
	}
	NethelpersProtocol_value = map[string]int32{
		"NETHELPERS_PROTOCOL_UNSPECIFIED": 0,
		"PROTOCOL_ICMP":                   1,
		"PROTOCOL_TCP":                    6,
		"PROTOCOL_UDP":                    17,
		"PROTOCOL_ICM_PV6":                58,
	}
)

func (x NethelpersProtocol) Enum() *NethelpersProtocol {
	p := new(NethelpersProtocol)
	*p = x
	return p
}

func (x NethelpersProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[20].Descriptor()
}

func (NethelpersProtocol) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[20]
}

func (x NethelpersProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersProtocol.Descriptor instead.
func (NethelpersProtocol) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{20}
}

// NethelpersRouteFlag wraps RTM_F_* constants.
type NethelpersRouteFlag int32

const (
	NethelpersRouteFlag_NETHELPERS_ROUTEFLAG_UNSPECIFIED NethelpersRouteFlag = 0
	NethelpersRouteFlag_ROUTE_NOTIFY                     NethelpersRouteFlag = 256
	NethelpersRouteFlag_ROUTE_CLONED                     NethelpersRouteFlag = 512
	NethelpersRouteFlag_ROUTE_EQUALIZE                   NethelpersRouteFlag = 1024
	NethelpersRouteFlag_ROUTE_PREFIX                     NethelpersRouteFlag = 2048
	NethelpersRouteFlag_ROUTE_LOOKUP_TABLE               NethelpersRouteFlag = 4096
	NethelpersRouteFlag_ROUTE_FIB_MATCH                  NethelpersRouteFlag = 8192
	NethelpersRouteFlag_ROUTE_OFFLOAD                    NethelpersRouteFlag = 16384
	NethelpersRouteFlag_ROUTE_TRAP                       NethelpersRouteFlag = 32768
)

// Enum value maps for NethelpersRouteFlag.
var (
	NethelpersRouteFlag_name = map[int32]string{
		0:     "NETHELPERS_ROUTEFLAG_UNSPECIFIED",
		256:   "ROUTE_NOTIFY",
		512:   "ROUTE_CLONED",
		1024:  "ROUTE_EQUALIZE",
		2048:  "ROUTE_PREFIX",
		4096:  "ROUTE_LOOKUP_TABLE",
		8192:  "ROUTE_FIB_MATCH",
		16384: "ROUTE_OFFLOAD",
		32768: "ROUTE_TRAP",
	}
	NethelpersRouteFlag_value = map[string]int32{
		"NETHELPERS_ROUTEFLAG_UNSPECIFIED": 0,
		"ROUTE_NOTIFY":                     256,
		"ROUTE_CLONED":                     512,
		"ROUTE_EQUALIZE":                   1024,
		"ROUTE_PREFIX":                     2048,
		"ROUTE_LOOKUP_TABLE":               4096,
		"ROUTE_FIB_MATCH":                  8192,
		"ROUTE_OFFLOAD":                    16384,
		"ROUTE_TRAP":                       32768,
	}
)

func (x NethelpersRouteFlag) Enum() *NethelpersRouteFlag {
	p := new(NethelpersRouteFlag)
	*p = x
	return p
}

func (x NethelpersRouteFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersRouteFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[21].Descriptor()
}

func (NethelpersRouteFlag) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[21]
}

func (x NethelpersRouteFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersRouteFlag.Descriptor instead.
func (NethelpersRouteFlag) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{21}
}

// NethelpersRouteProtocol is a routing protocol.
type NethelpersRouteProtocol int32

const (
	NethelpersRouteProtocol_PROTOCOL_UNSPEC     NethelpersRouteProtocol = 0
	NethelpersRouteProtocol_PROTOCOL_REDIRECT   NethelpersRouteProtocol = 1
	NethelpersRouteProtocol_PROTOCOL_KERNEL     NethelpersRouteProtocol = 2
	NethelpersRouteProtocol_PROTOCOL_BOOT       NethelpersRouteProtocol = 3
	NethelpersRouteProtocol_PROTOCOL_STATIC     NethelpersRouteProtocol = 4
	NethelpersRouteProtocol_PROTOCOL_RA         NethelpersRouteProtocol = 9
	NethelpersRouteProtocol_PROTOCOL_MRT        NethelpersRouteProtocol = 10
	NethelpersRouteProtocol_PROTOCOL_ZEBRA      NethelpersRouteProtocol = 11
	NethelpersRouteProtocol_PROTOCOL_BIRD       NethelpersRouteProtocol = 12
	NethelpersRouteProtocol_PROTOCOL_DNROUTED   NethelpersRouteProtocol = 13
	NethelpersRouteProtocol_PROTOCOL_XORP       NethelpersRouteProtocol = 14
	NethelpersRouteProtocol_PROTOCOL_NTK        NethelpersRouteProtocol = 15
	NethelpersRouteProtocol_PROTOCOL_DHCP       NethelpersRouteProtocol = 16
	NethelpersRouteProtocol_PROTOCOL_MRTD       NethelpersRouteProtocol = 17
	NethelpersRouteProtocol_PROTOCOL_KEEPALIVED NethelpersRouteProtocol = 18
	NethelpersRouteProtocol_PROTOCOL_BABEL      NethelpersRouteProtocol = 42
	NethelpersRouteProtocol_PROTOCOL_OPENR      NethelpersRouteProtocol = 99
	NethelpersRouteProtocol_PROTOCOL_BGP        NethelpersRouteProtocol = 186
	NethelpersRouteProtocol_PROTOCOL_ISIS       NethelpersRouteProtocol = 187
	NethelpersRouteProtocol_PROTOCOL_OSPF       NethelpersRouteProtocol = 188
	NethelpersRouteProtocol_PROTOCOL_RIP        NethelpersRouteProtocol = 189
	NethelpersRouteProtocol_PROTOCOL_EIGRP      NethelpersRouteProtocol = 192
)

// Enum value maps for NethelpersRouteProtocol.
var (
	NethelpersRouteProtocol_name = map[int32]string{
		0:   "PROTOCOL_UNSPEC",
		1:   "PROTOCOL_REDIRECT",
		2:   "PROTOCOL_KERNEL",
		3:   "PROTOCOL_BOOT",
		4:   "PROTOCOL_STATIC",
		9:   "PROTOCOL_RA",
		10:  "PROTOCOL_MRT",
		11:  "PROTOCOL_ZEBRA",
		12:  "PROTOCOL_BIRD",
		13:  "PROTOCOL_DNROUTED",
		14:  "PROTOCOL_XORP",
		15:  "PROTOCOL_NTK",
		16:  "PROTOCOL_DHCP",
		17:  "PROTOCOL_MRTD",
		18:  "PROTOCOL_KEEPALIVED",
		42:  "PROTOCOL_BABEL",
		99:  "PROTOCOL_OPENR",
		186: "PROTOCOL_BGP",
		187: "PROTOCOL_ISIS",
		188: "PROTOCOL_OSPF",
		189: "PROTOCOL_RIP",
		192: "PROTOCOL_EIGRP",
	}
	NethelpersRouteProtocol_value = map[string]int32{
		"PROTOCOL_UNSPEC":     0,
		"PROTOCOL_REDIRECT":   1,
		"PROTOCOL_KERNEL":     2,
		"PROTOCOL_BOOT":       3,
		"PROTOCOL_STATIC":     4,
		"PROTOCOL_RA":         9,
		"PROTOCOL_MRT":        10,
		"PROTOCOL_ZEBRA":      11,
		"PROTOCOL_BIRD":       12,
		"PROTOCOL_DNROUTED":   13,
		"PROTOCOL_XORP":       14,
		"PROTOCOL_NTK":        15,
		"PROTOCOL_DHCP":       16,
		"PROTOCOL_MRTD":       17,
		"PROTOCOL_KEEPALIVED": 18,
		"PROTOCOL_BABEL":      42,
		"PROTOCOL_OPENR":      99,
		"PROTOCOL_BGP":        186,
		"PROTOCOL_ISIS":       187,
		"PROTOCOL_OSPF":       188,
		"PROTOCOL_RIP":        189,
		"PROTOCOL_EIGRP":      192,
	}
)

func (x NethelpersRouteProtocol) Enum() *NethelpersRouteProtocol {
	p := new(NethelpersRouteProtocol)
	*p = x
	return p
}

func (x NethelpersRouteProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersRouteProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[22].Descriptor()
}

func (NethelpersRouteProtocol) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[22]
}

func (x NethelpersRouteProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersRouteProtocol.Descriptor instead.
func (NethelpersRouteProtocol) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{22}
}

// NethelpersRouteType is a route type.
type NethelpersRouteType int32

const (
	NethelpersRouteType_TYPE_UNSPEC      NethelpersRouteType = 0
	NethelpersRouteType_TYPE_UNICAST     NethelpersRouteType = 1
	NethelpersRouteType_TYPE_LOCAL       NethelpersRouteType = 2
	NethelpersRouteType_TYPE_BROADCAST   NethelpersRouteType = 3
	NethelpersRouteType_TYPE_ANYCAST     NethelpersRouteType = 4
	NethelpersRouteType_TYPE_MULTICAST   NethelpersRouteType = 5
	NethelpersRouteType_TYPE_BLACKHOLE   NethelpersRouteType = 6
	NethelpersRouteType_TYPE_UNREACHABLE NethelpersRouteType = 7
	NethelpersRouteType_TYPE_PROHIBIT    NethelpersRouteType = 8
	NethelpersRouteType_TYPE_THROW       NethelpersRouteType = 9
	NethelpersRouteType_TYPE_NAT         NethelpersRouteType = 10
	NethelpersRouteType_TYPE_X_RESOLVE   NethelpersRouteType = 11
)

// Enum value maps for NethelpersRouteType.
var (
	NethelpersRouteType_name = map[int32]string{
		0:  "TYPE_UNSPEC",
		1:  "TYPE_UNICAST",
		2:  "TYPE_LOCAL",
		3:  "TYPE_BROADCAST",
		4:  "TYPE_ANYCAST",
		5:  "TYPE_MULTICAST",
		6:  "TYPE_BLACKHOLE",
		7:  "TYPE_UNREACHABLE",
		8:  "TYPE_PROHIBIT",
		9:  "TYPE_THROW",
		10: "TYPE_NAT",
		11: "TYPE_X_RESOLVE",
	}
	NethelpersRouteType_value = map[string]int32{
		"TYPE_UNSPEC":      0,
		"TYPE_UNICAST":     1,
		"TYPE_LOCAL":       2,
		"TYPE_BROADCAST":   3,
		"TYPE_ANYCAST":     4,
		"TYPE_MULTICAST":   5,
		"TYPE_BLACKHOLE":   6,
		"TYPE_UNREACHABLE": 7,
		"TYPE_PROHIBIT":    8,
		"TYPE_THROW":       9,
		"TYPE_NAT":         10,
		"TYPE_X_RESOLVE":   11,
	}
)

func (x NethelpersRouteType) Enum() *NethelpersRouteType {
	p := new(NethelpersRouteType)
	*p = x
	return p
}

func (x NethelpersRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[23].Descriptor()
}

func (NethelpersRouteType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[23]
}

func (x NethelpersRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersRouteType.Descriptor instead.
func (NethelpersRouteType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{23}
}

// NethelpersRoutingTable is a routing table ID.
type NethelpersRoutingTable int32

const (
	NethelpersRoutingTable_TABLE_UNSPEC  NethelpersRoutingTable = 0
	NethelpersRoutingTable_TABLE_DEFAULT NethelpersRoutingTable = 253
	NethelpersRoutingTable_TABLE_MAIN    NethelpersRoutingTable = 254
	NethelpersRoutingTable_TABLE_LOCAL   NethelpersRoutingTable = 255
)

// Enum value maps for NethelpersRoutingTable.
var (
	NethelpersRoutingTable_name = map[int32]string{
		0:   "TABLE_UNSPEC",
		253: "TABLE_DEFAULT",
		254: "TABLE_MAIN",
		255: "TABLE_LOCAL",
	}
	NethelpersRoutingTable_value = map[string]int32{
		"TABLE_UNSPEC":  0,
		"TABLE_DEFAULT": 253,
		"TABLE_MAIN":    254,
		"TABLE_LOCAL":   255,
	}
)

func (x NethelpersRoutingTable) Enum() *NethelpersRoutingTable {
	p := new(NethelpersRoutingTable)
	*p = x
	return p
}

func (x NethelpersRoutingTable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersRoutingTable) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[24].Descriptor()
}

func (NethelpersRoutingTable) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[24]
}

func (x NethelpersRoutingTable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersRoutingTable.Descriptor instead.
func (NethelpersRoutingTable) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{24}
}

// NethelpersScope is an address scope.
type NethelpersScope int32

const (
	NethelpersScope_SCOPE_GLOBAL  NethelpersScope = 0
	NethelpersScope_SCOPE_SITE    NethelpersScope = 200
	NethelpersScope_SCOPE_LINK    NethelpersScope = 253
	NethelpersScope_SCOPE_HOST    NethelpersScope = 254
	NethelpersScope_SCOPE_NOWHERE NethelpersScope = 255
)

// Enum value maps for NethelpersScope.
var (
	NethelpersScope_name = map[int32]string{
		0:   "SCOPE_GLOBAL",
		200: "SCOPE_SITE",
		253: "SCOPE_LINK",
		254: "SCOPE_HOST",
		255: "SCOPE_NOWHERE",
	}
	NethelpersScope_value = map[string]int32{
		"SCOPE_GLOBAL":  0,
		"SCOPE_SITE":    200,
		"SCOPE_LINK":    253,
		"SCOPE_HOST":    254,
		"SCOPE_NOWHERE": 255,
	}
)

func (x NethelpersScope) Enum() *NethelpersScope {
	p := new(NethelpersScope)
	*p = x
	return p
}

func (x NethelpersScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersScope) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[25].Descriptor()
}

func (NethelpersScope) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[25]
}

func (x NethelpersScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersScope.Descriptor instead.
func (NethelpersScope) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{25}
}

// NethelpersVLANProtocol is a VLAN protocol.
type NethelpersVLANProtocol int32

const (
	NethelpersVLANProtocol_NETHELPERS_VLANPROTOCOL_UNSPECIFIED NethelpersVLANProtocol = 0
	NethelpersVLANProtocol_VLAN_PROTOCOL8021_Q                 NethelpersVLANProtocol = 33024
	NethelpersVLANProtocol_VLAN_PROTOCOL8021_AD                NethelpersVLANProtocol = 34984
)

// Enum value maps for NethelpersVLANProtocol.
var (
	NethelpersVLANProtocol_name = map[int32]string{
		0:     "NETHELPERS_VLANPROTOCOL_UNSPECIFIED",
		33024: "VLAN_PROTOCOL8021_Q",
		34984: "VLAN_PROTOCOL8021_AD",
	}
	NethelpersVLANProtocol_value = map[string]int32{
		"NETHELPERS_VLANPROTOCOL_UNSPECIFIED": 0,
		"VLAN_PROTOCOL8021_Q":                 33024,
		"VLAN_PROTOCOL8021_AD":                34984,
	}
)

func (x NethelpersVLANProtocol) Enum() *NethelpersVLANProtocol {
	p := new(NethelpersVLANProtocol)
	*p = x
	return p
}

func (x NethelpersVLANProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NethelpersVLANProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[26].Descriptor()
}

func (NethelpersVLANProtocol) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[26]
}

func (x NethelpersVLANProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NethelpersVLANProtocol.Descriptor instead.
func (NethelpersVLANProtocol) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{26}
}

// BlockEncryptionKeyType describes encryption key type.
type BlockEncryptionKeyType int32

const (
	BlockEncryptionKeyType_ENCRYPTION_KEY_STATIC  BlockEncryptionKeyType = 0
	BlockEncryptionKeyType_ENCRYPTION_KEY_NODE_ID BlockEncryptionKeyType = 1
	BlockEncryptionKeyType_ENCRYPTION_KEY_KMS     BlockEncryptionKeyType = 2
	BlockEncryptionKeyType_ENCRYPTION_KEY_TPM     BlockEncryptionKeyType = 3
)

// Enum value maps for BlockEncryptionKeyType.
var (
	BlockEncryptionKeyType_name = map[int32]string{
		0: "ENCRYPTION_KEY_STATIC",
		1: "ENCRYPTION_KEY_NODE_ID",
		2: "ENCRYPTION_KEY_KMS",
		3: "ENCRYPTION_KEY_TPM",
	}
	BlockEncryptionKeyType_value = map[string]int32{
		"ENCRYPTION_KEY_STATIC":  0,
		"ENCRYPTION_KEY_NODE_ID": 1,
		"ENCRYPTION_KEY_KMS":     2,
		"ENCRYPTION_KEY_TPM":     3,
	}
)

func (x BlockEncryptionKeyType) Enum() *BlockEncryptionKeyType {
	p := new(BlockEncryptionKeyType)
	*p = x
	return p
}

func (x BlockEncryptionKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockEncryptionKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[27].Descriptor()
}

func (BlockEncryptionKeyType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[27]
}

func (x BlockEncryptionKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockEncryptionKeyType.Descriptor instead.
func (BlockEncryptionKeyType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{27}
}

// BlockEncryptionProviderType describes encryption provider type.
type BlockEncryptionProviderType int32

const (
	BlockEncryptionProviderType_ENCRYPTION_PROVIDER_NONE  BlockEncryptionProviderType = 0
	BlockEncryptionProviderType_ENCRYPTION_PROVIDER_LUKS2 BlockEncryptionProviderType = 1
)

// Enum value maps for BlockEncryptionProviderType.
var (
	BlockEncryptionProviderType_name = map[int32]string{
		0: "ENCRYPTION_PROVIDER_NONE",
		1: "ENCRYPTION_PROVIDER_LUKS2",
	}
	BlockEncryptionProviderType_value = map[string]int32{
		"ENCRYPTION_PROVIDER_NONE":  0,
		"ENCRYPTION_PROVIDER_LUKS2": 1,
	}
)

func (x BlockEncryptionProviderType) Enum() *BlockEncryptionProviderType {
	p := new(BlockEncryptionProviderType)
	*p = x
	return p
}

func (x BlockEncryptionProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockEncryptionProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[28].Descriptor()
}

func (BlockEncryptionProviderType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[28]
}

func (x BlockEncryptionProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockEncryptionProviderType.Descriptor instead.
func (BlockEncryptionProviderType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{28}
}

// BlockFilesystemType describes filesystem type.
type BlockFilesystemType int32

const (
	BlockFilesystemType_FILESYSTEM_TYPE_NONE    BlockFilesystemType = 0
	BlockFilesystemType_FILESYSTEM_TYPE_XFS     BlockFilesystemType = 1
	BlockFilesystemType_FILESYSTEM_TYPE_VFAT    BlockFilesystemType = 2
	BlockFilesystemType_FILESYSTEM_TYPE_EXT4    BlockFilesystemType = 3
	BlockFilesystemType_FILESYSTEM_TYPE_ISO9660 BlockFilesystemType = 4
)

// Enum value maps for BlockFilesystemType.
var (
	BlockFilesystemType_name = map[int32]string{
		0: "FILESYSTEM_TYPE_NONE",
		1: "FILESYSTEM_TYPE_XFS",
		2: "FILESYSTEM_TYPE_VFAT",
		3: "FILESYSTEM_TYPE_EXT4",
		4: "FILESYSTEM_TYPE_ISO9660",
	}
	BlockFilesystemType_value = map[string]int32{
		"FILESYSTEM_TYPE_NONE":    0,
		"FILESYSTEM_TYPE_XFS":     1,
		"FILESYSTEM_TYPE_VFAT":    2,
		"FILESYSTEM_TYPE_EXT4":    3,
		"FILESYSTEM_TYPE_ISO9660": 4,
	}
)

func (x BlockFilesystemType) Enum() *BlockFilesystemType {
	p := new(BlockFilesystemType)
	*p = x
	return p
}

func (x BlockFilesystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockFilesystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[29].Descriptor()
}

func (BlockFilesystemType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[29]
}

func (x BlockFilesystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockFilesystemType.Descriptor instead.
func (BlockFilesystemType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{29}
}

// BlockVolumePhase describes volume phase.
type BlockVolumePhase int32

const (
	BlockVolumePhase_VOLUME_PHASE_WAITING     BlockVolumePhase = 0
	BlockVolumePhase_VOLUME_PHASE_FAILED      BlockVolumePhase = 1
	BlockVolumePhase_VOLUME_PHASE_MISSING     BlockVolumePhase = 2
	BlockVolumePhase_VOLUME_PHASE_LOCATED     BlockVolumePhase = 3
	BlockVolumePhase_VOLUME_PHASE_PROVISIONED BlockVolumePhase = 4
	BlockVolumePhase_VOLUME_PHASE_PREPARED    BlockVolumePhase = 5
	BlockVolumePhase_VOLUME_PHASE_READY       BlockVolumePhase = 6
	BlockVolumePhase_VOLUME_PHASE_CLOSED      BlockVolumePhase = 7
)

// Enum value maps for BlockVolumePhase.
var (
	BlockVolumePhase_name = map[int32]string{
		0: "VOLUME_PHASE_WAITING",
		1: "VOLUME_PHASE_FAILED",
		2: "VOLUME_PHASE_MISSING",
		3: "VOLUME_PHASE_LOCATED",
		4: "VOLUME_PHASE_PROVISIONED",
		5: "VOLUME_PHASE_PREPARED",
		6: "VOLUME_PHASE_READY",
		7: "VOLUME_PHASE_CLOSED",
	}
	BlockVolumePhase_value = map[string]int32{
		"VOLUME_PHASE_WAITING":     0,
		"VOLUME_PHASE_FAILED":      1,
		"VOLUME_PHASE_MISSING":     2,
		"VOLUME_PHASE_LOCATED":     3,
		"VOLUME_PHASE_PROVISIONED": 4,
		"VOLUME_PHASE_PREPARED":    5,
		"VOLUME_PHASE_READY":       6,
		"VOLUME_PHASE_CLOSED":      7,
	}
)

func (x BlockVolumePhase) Enum() *BlockVolumePhase {
	p := new(BlockVolumePhase)
	*p = x
	return p
}

func (x BlockVolumePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockVolumePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[30].Descriptor()
}

func (BlockVolumePhase) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[30]
}

func (x BlockVolumePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockVolumePhase.Descriptor instead.
func (BlockVolumePhase) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{30}
}

// BlockVolumeType describes volume type.
type BlockVolumeType int32

const (
	BlockVolumeType_VOLUME_TYPE_PARTITION BlockVolumeType = 0
	BlockVolumeType_VOLUME_TYPE_DISK      BlockVolumeType = 1
	BlockVolumeType_VOLUME_TYPE_TMPFS     BlockVolumeType = 2
)

// Enum value maps for BlockVolumeType.
var (
	BlockVolumeType_name = map[int32]string{
		0: "VOLUME_TYPE_PARTITION",
		1: "VOLUME_TYPE_DISK",
		2: "VOLUME_TYPE_TMPFS",
	}
	BlockVolumeType_value = map[string]int32{
		"VOLUME_TYPE_PARTITION": 0,
		"VOLUME_TYPE_DISK":      1,
		"VOLUME_TYPE_TMPFS":     2,
	}
)

func (x BlockVolumeType) Enum() *BlockVolumeType {
	p := new(BlockVolumeType)
	*p = x
	return p
}

func (x BlockVolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockVolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[31].Descriptor()
}

func (BlockVolumeType) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[31]
}

func (x BlockVolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockVolumeType.Descriptor instead.
func (BlockVolumeType) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{31}
}

// CriImageCacheStatus describes image cache status type.
type CriImageCacheStatus int32

const (
	CriImageCacheStatus_IMAGE_CACHE_STATUS_UNKNOWN   CriImageCacheStatus = 0
	CriImageCacheStatus_IMAGE_CACHE_STATUS_DISABLED  CriImageCacheStatus = 1
	CriImageCacheStatus_IMAGE_CACHE_STATUS_PREPARING CriImageCacheStatus = 2
	CriImageCacheStatus_IMAGE_CACHE_STATUS_READY     CriImageCacheStatus = 3
)

// Enum value maps for CriImageCacheStatus.
var (
	CriImageCacheStatus_name = map[int32]string{
		0: "IMAGE_CACHE_STATUS_UNKNOWN",
		1: "IMAGE_CACHE_STATUS_DISABLED",
		2: "IMAGE_CACHE_STATUS_PREPARING",
		3: "IMAGE_CACHE_STATUS_READY",
	}
	CriImageCacheStatus_value = map[string]int32{
		"IMAGE_CACHE_STATUS_UNKNOWN":   0,
		"IMAGE_CACHE_STATUS_DISABLED":  1,
		"IMAGE_CACHE_STATUS_PREPARING": 2,
		"IMAGE_CACHE_STATUS_READY":     3,
	}
)

func (x CriImageCacheStatus) Enum() *CriImageCacheStatus {
	p := new(CriImageCacheStatus)
	*p = x
	return p
}

func (x CriImageCacheStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CriImageCacheStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[32].Descriptor()
}

func (CriImageCacheStatus) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[32]
}

func (x CriImageCacheStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CriImageCacheStatus.Descriptor instead.
func (CriImageCacheStatus) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{32}
}

// KubespanPeerState is KubeSpan peer current state.
type KubespanPeerState int32

const (
	KubespanPeerState_PEER_STATE_UNKNOWN KubespanPeerState = 0
	KubespanPeerState_PEER_STATE_UP      KubespanPeerState = 1
	KubespanPeerState_PEER_STATE_DOWN    KubespanPeerState = 2
)

// Enum value maps for KubespanPeerState.
var (
	KubespanPeerState_name = map[int32]string{
		0: "PEER_STATE_UNKNOWN",
		1: "PEER_STATE_UP",
		2: "PEER_STATE_DOWN",
	}
	KubespanPeerState_value = map[string]int32{
		"PEER_STATE_UNKNOWN": 0,
		"PEER_STATE_UP":      1,
		"PEER_STATE_DOWN":    2,
	}
)

func (x KubespanPeerState) Enum() *KubespanPeerState {
	p := new(KubespanPeerState)
	*p = x
	return p
}

func (x KubespanPeerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubespanPeerState) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[33].Descriptor()
}

func (KubespanPeerState) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[33]
}

func (x KubespanPeerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubespanPeerState.Descriptor instead.
func (KubespanPeerState) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{33}
}

// NetworkConfigLayer describes network configuration layers, with lowest priority first.
type NetworkConfigLayer int32

const (
	NetworkConfigLayer_CONFIG_DEFAULT               NetworkConfigLayer = 0
	NetworkConfigLayer_CONFIG_CMDLINE               NetworkConfigLayer = 1
	NetworkConfigLayer_CONFIG_PLATFORM              NetworkConfigLayer = 2
	NetworkConfigLayer_CONFIG_OPERATOR              NetworkConfigLayer = 3
	NetworkConfigLayer_CONFIG_MACHINE_CONFIGURATION NetworkConfigLayer = 4
)

// Enum value maps for NetworkConfigLayer.
var (
	NetworkConfigLayer_name = map[int32]string{
		0: "CONFIG_DEFAULT",
		1: "CONFIG_CMDLINE",
		2: "CONFIG_PLATFORM",
		3: "CONFIG_OPERATOR",
		4: "CONFIG_MACHINE_CONFIGURATION",
	}
	NetworkConfigLayer_value = map[string]int32{
		"CONFIG_DEFAULT":               0,
		"CONFIG_CMDLINE":               1,
		"CONFIG_PLATFORM":              2,
		"CONFIG_OPERATOR":              3,
		"CONFIG_MACHINE_CONFIGURATION": 4,
	}
)

func (x NetworkConfigLayer) Enum() *NetworkConfigLayer {
	p := new(NetworkConfigLayer)
	*p = x
	return p
}

func (x NetworkConfigLayer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkConfigLayer) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[34].Descriptor()
}

func (NetworkConfigLayer) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[34]
}

func (x NetworkConfigLayer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkConfigLayer.Descriptor instead.
func (NetworkConfigLayer) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{34}
}

// NetworkOperator enumerates Talos network operators.
type NetworkOperator int32

const (
	NetworkOperator_OPERATOR_DHCP4 NetworkOperator = 0
	NetworkOperator_OPERATOR_DHCP6 NetworkOperator = 1
	NetworkOperator_OPERATOR_VIP   NetworkOperator = 2
)

// Enum value maps for NetworkOperator.
var (
	NetworkOperator_name = map[int32]string{
		0: "OPERATOR_DHCP4",
		1: "OPERATOR_DHCP6",
		2: "OPERATOR_VIP",
	}
	NetworkOperator_value = map[string]int32{
		"OPERATOR_DHCP4": 0,
		"OPERATOR_DHCP6": 1,
		"OPERATOR_VIP":   2,
	}
)

func (x NetworkOperator) Enum() *NetworkOperator {
	p := new(NetworkOperator)
	*p = x
	return p
}

func (x NetworkOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[35].Descriptor()
}

func (NetworkOperator) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[35]
}

func (x NetworkOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkOperator.Descriptor instead.
func (NetworkOperator) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{35}
}

// RuntimeMachineStage describes the stage of the machine boot/run process.
type RuntimeMachineStage int32

const (
	RuntimeMachineStage_MACHINE_STAGE_UNKNOWN       RuntimeMachineStage = 0
	RuntimeMachineStage_MACHINE_STAGE_BOOTING       RuntimeMachineStage = 1
	RuntimeMachineStage_MACHINE_STAGE_INSTALLING    RuntimeMachineStage = 2
	RuntimeMachineStage_MACHINE_STAGE_MAINTENANCE   RuntimeMachineStage = 3
	RuntimeMachineStage_MACHINE_STAGE_RUNNING       RuntimeMachineStage = 4
	RuntimeMachineStage_MACHINE_STAGE_REBOOTING     RuntimeMachineStage = 5
	RuntimeMachineStage_MACHINE_STAGE_SHUTTING_DOWN RuntimeMachineStage = 6
	RuntimeMachineStage_MACHINE_STAGE_RESETTING     RuntimeMachineStage = 7
	RuntimeMachineStage_MACHINE_STAGE_UPGRADING     RuntimeMachineStage = 8
)

// Enum value maps for RuntimeMachineStage.
var (
	RuntimeMachineStage_name = map[int32]string{
		0: "MACHINE_STAGE_UNKNOWN",
		1: "MACHINE_STAGE_BOOTING",
		2: "MACHINE_STAGE_INSTALLING",
		3: "MACHINE_STAGE_MAINTENANCE",
		4: "MACHINE_STAGE_RUNNING",
		5: "MACHINE_STAGE_REBOOTING",
		6: "MACHINE_STAGE_SHUTTING_DOWN",
		7: "MACHINE_STAGE_RESETTING",
		8: "MACHINE_STAGE_UPGRADING",
	}
	RuntimeMachineStage_value = map[string]int32{
		"MACHINE_STAGE_UNKNOWN":       0,
		"MACHINE_STAGE_BOOTING":       1,
		"MACHINE_STAGE_INSTALLING":    2,
		"MACHINE_STAGE_MAINTENANCE":   3,
		"MACHINE_STAGE_RUNNING":       4,
		"MACHINE_STAGE_REBOOTING":     5,
		"MACHINE_STAGE_SHUTTING_DOWN": 6,
		"MACHINE_STAGE_RESETTING":     7,
		"MACHINE_STAGE_UPGRADING":     8,
	}
)

func (x RuntimeMachineStage) Enum() *RuntimeMachineStage {
	p := new(RuntimeMachineStage)
	*p = x
	return p
}

func (x RuntimeMachineStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeMachineStage) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_definitions_enums_enums_proto_enumTypes[36].Descriptor()
}

func (RuntimeMachineStage) Type() protoreflect.EnumType {
	return &file_resource_definitions_enums_enums_proto_enumTypes[36]
}

func (x RuntimeMachineStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeMachineStage.Descriptor instead.
func (RuntimeMachineStage) EnumDescriptor() ([]byte, []int) {
	return file_resource_definitions_enums_enums_proto_rawDescGZIP(), []int{36}
}

var File_resource_definitions_enums_enums_proto protoreflect.FileDescriptor

var file_resource_definitions_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x26, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x57, 0x0a, 0x0b, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x10, 0x03, 0x2a, 0xe7, 0x02, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a,
	0x22, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x44, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x40, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x80, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x10, 0x80, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x10, 0x80, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x80, 0x08,
	0x12, 0x1b, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x10, 0x80, 0x10, 0x2a, 0x58, 0x0a,
	0x12, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x41, 0x44, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x73, 0x41, 0x52, 0x50, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x52, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x76, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x52, 0x50, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x52, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x52, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x50, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xb3, 0x01, 0x0a,
	0x12, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x42, 0x6f, 0x6e, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x38, 0x30, 0x32, 0x33, 0x5f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4c, 0x42, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x42,
	0x10, 0x06, 0x2a, 0xb3, 0x01, 0x0a, 0x1c, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x73, 0x42, 0x6f, 0x6e, 0x64, 0x58, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x58, 0x4d, 0x49, 0x54,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x32, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x58, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x33, 0x34, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x58, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x32, 0x33, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x58, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x32, 0x33, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x58, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x33, 0x34, 0x10, 0x04, 0x2a, 0xb9, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c, 0x50,
	0x45, 0x52, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x01, 0x2a, 0x34, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x46,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0x01, 0x2a, 0x63, 0x0a, 0x15, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x4d, 0x41, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x2a,
	0x59, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c, 0x50, 0x45, 0x52,
	0x53, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x49, 0x4e, 0x45, 0x54, 0x34, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x10, 0x0a, 0x2a, 0x3c, 0x0a, 0x12, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4c, 0x41, 0x43, 0x50, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x43, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4c,
	0x4f, 0x57, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x43, 0x50, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x93, 0x0b, 0x0a, 0x12, 0x4e, 0x65, 0x74,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x45, 0x54, 0x52, 0x4f, 0x4d, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x45, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x58, 0x32, 0x35, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x4e, 0x45, 0x54, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x4f, 0x53, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x45, 0x45, 0x38, 0x30, 0x32,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x52, 0x43, 0x4e, 0x45,
	0x54, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x54, 0x41, 0x4c,
	0x4b, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x4c, 0x43, 0x49,
	0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0x13,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x4f,
	0x4d, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x45, 0x45, 0x45,
	0x31, 0x33, 0x39, 0x34, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45,
	0x55, 0x49, 0x36, 0x34, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49,
	0x4e, 0x46, 0x49, 0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x4c, 0x49, 0x50, 0x10, 0x80, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x53, 0x4c, 0x49, 0x50, 0x10, 0x81, 0x02, 0x12, 0x0f, 0x0a, 0x0a,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x4c, 0x49, 0x50, 0x36, 0x10, 0x82, 0x02, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x53, 0x4c, 0x49, 0x50, 0x36, 0x10, 0x83, 0x02, 0x12,
	0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x53, 0x52, 0x56, 0x44, 0x10, 0x84, 0x02,
	0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x10, 0x88,
	0x02, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x4f, 0x53, 0x45, 0x10, 0x8e,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x58, 0x32, 0x35, 0x10, 0x8f, 0x02,
	0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x48, 0x57, 0x58, 0x32, 0x35, 0x10, 0x90,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x10, 0x98, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x50, 0x50, 0x10, 0x80, 0x04, 0x12,
	0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x10, 0x81, 0x04,
	0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x48, 0x44, 0x4c, 0x43, 0x10, 0x81, 0x04,
	0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x41, 0x50, 0x42, 0x10, 0x84, 0x04,
	0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x44, 0x43, 0x4d, 0x50, 0x10, 0x85,
	0x04, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x41, 0x57, 0x48, 0x44, 0x4c,
	0x43, 0x10, 0x86, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x80, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x36, 0x10, 0x81, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x46, 0x52, 0x41, 0x44, 0x10, 0x82, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x83, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x43, 0x4b, 0x10, 0x84, 0x06, 0x12, 0x12, 0x0a, 0x0d,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x54, 0x4c, 0x4b, 0x10, 0x85, 0x06,
	0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x44, 0x44, 0x49, 0x10, 0x86, 0x06,
	0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x42, 0x49, 0x46, 0x10, 0x87, 0x06, 0x12,
	0x0d, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x49, 0x54, 0x10, 0x88, 0x06, 0x12, 0x0f,
	0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x50, 0x44, 0x44, 0x50, 0x10, 0x89, 0x06, 0x12,
	0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x50, 0x47, 0x52, 0x45, 0x10, 0x8a, 0x06,
	0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x49, 0x4d, 0x52, 0x45, 0x47, 0x10,
	0x8b, 0x06, 0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x48, 0x49, 0x50, 0x50, 0x49,
	0x10, 0x8c, 0x06, 0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x53, 0x48, 0x10,
	0x8d, 0x06, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x45,
	0x54, 0x10, 0x8e, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x52, 0x44,
	0x41, 0x10, 0x8f, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x50,
	0x50, 0x10, 0x90, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x41,
	0x4c, 0x10, 0x91, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x50,
	0x4c, 0x10, 0x92, 0x06, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x10, 0x93, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x31, 0x10, 0x94, 0x06, 0x12, 0x13, 0x0a,
	0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x32, 0x10,
	0x95, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x33, 0x10, 0x96, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x34, 0x10, 0x97, 0x06, 0x12, 0x13, 0x0a, 0x0e,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x35, 0x10, 0x98,
	0x06, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52,
	0x49, 0x43, 0x36, 0x10, 0x99, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46,
	0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x37, 0x10, 0x9a, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x38, 0x10, 0x9b, 0x06,
	0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49,
	0x43, 0x39, 0x10, 0x9c, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x31, 0x30, 0x10, 0x9d, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x31, 0x31, 0x10, 0x9e,
	0x06, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x43, 0x46, 0x41, 0x42, 0x52,
	0x49, 0x43, 0x31, 0x32, 0x10, 0x9f, 0x06, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x49, 0x45, 0x45, 0x38, 0x30, 0x32, 0x54, 0x52, 0x10, 0xa0, 0x06, 0x12, 0x12, 0x0a, 0x0d, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x31, 0x10, 0xa1, 0x06, 0x12,
	0x17, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x31,
	0x50, 0x52, 0x49, 0x53, 0x4d, 0x10, 0xa2, 0x06, 0x12, 0x1b, 0x0a, 0x16, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x49, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x31, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x54,
	0x41, 0x50, 0x10, 0xa3, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x45,
	0x45, 0x38, 0x30, 0x32, 0x31, 0x31, 0x35, 0x34, 0x10, 0xa4, 0x06, 0x12, 0x1b, 0x0a, 0x16, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x45, 0x45, 0x38, 0x30, 0x32, 0x31, 0x31, 0x35, 0x34, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0xa5, 0x06, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x54, 0x10, 0xb4, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x54, 0x50, 0x49, 0x50, 0x45, 0x10, 0xb5, 0x06,
	0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x41, 0x49, 0x46, 0x10, 0xb6, 0x06,
	0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x50, 0x36, 0x47, 0x52, 0x45, 0x10,
	0xb7, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x45, 0x54, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0xb8, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x36, 0x5f, 0x4c,
	0x4f, 0x57, 0x50, 0x41, 0x4e, 0x10, 0xb9, 0x06, 0x12, 0x0f, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x56, 0x4f, 0x49, 0x44, 0x10, 0xff, 0xff, 0x03, 0x12, 0x0f, 0x0a, 0x09, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xfe, 0xff, 0x03, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x45,
	0x0a, 0x17, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x99, 0x01, 0x0a, 0x1b, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x73, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48,
	0x4f, 0x4f, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48,
	0x4f, 0x4f, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x2a, 0xa3, 0x04, 0x0a, 0x1f, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73,
	0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c, 0x50,
	0x45, 0x52, 0x53, 0x5f, 0x4e, 0x46, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10,
	0x80, 0x80, 0x80, 0x80, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x46, 0x52, 0x41, 0x47, 0x10, 0xf0, 0xfc,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x41, 0x57, 0x10, 0xd4,
	0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x55, 0x58, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x9f, 0xfe, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x10, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0xea, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x24, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x10, 0x9c, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x32, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x64, 0x12, 0x21, 0x0a,
	0x1c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0xe1, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x4c,
	0x50, 0x45, 0x52, 0x10, 0xac, 0x02, 0x12, 0x1b, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0xff, 0xff,
	0xff, 0xff, 0x07, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x41, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x73, 0x4e, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x2a, 0xc9, 0x01, 0x0a, 0x1a, 0x4e,
	0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x50, 0x10, 0x06, 0x2a, 0x72, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x57, 0x49, 0x53,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55,
	0x49, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x49, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x49, 0x42, 0x52, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x43, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xef, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xff, 0x01, 0x2a, 0x73, 0x0a, 0x19, 0x4e, 0x65,
	0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x57, 0x41,
	0x59, 0x53, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a,
	0x86, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c,
	0x50, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50,
	0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x43, 0x4d, 0x5f, 0x50, 0x56, 0x36, 0x10, 0x3a, 0x2a, 0xdf, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x80, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x80, 0x04, 0x12, 0x13, 0x0a, 0x0e,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x80,
	0x08, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x10, 0x80, 0x10, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x4f,
	0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x80, 0x20, 0x12, 0x14, 0x0a,
	0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x42, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x80, 0x40, 0x12, 0x13, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x80, 0x80, 0x01, 0x12, 0x10, 0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x10, 0x80, 0x80, 0x02, 0x2a, 0xd2, 0x03, 0x0a, 0x17, 0x4e,
	0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x41, 0x10, 0x09,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x52, 0x54,
	0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x5a,
	0x45, 0x42, 0x52, 0x41, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x42, 0x49, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x4e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x58, 0x4f, 0x52,
	0x50, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4e, 0x54, 0x4b, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x52, 0x54, 0x44, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x41, 0x4c, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x42, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x52, 0x10, 0x63, 0x12, 0x11, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xba, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53,
	0x10, 0xbb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x10, 0xbc, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x49, 0x50, 0x10, 0xbd, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x49, 0x47, 0x52, 0x50, 0x10, 0xc0, 0x01, 0x2a,
	0xf1, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x10,
	0x09, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x10, 0x0a, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x10, 0x0b, 0x2a, 0x61, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0xfd, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x10, 0xfe, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0xff, 0x01, 0x2a, 0x6a, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0a, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xfd, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0xfe, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x48, 0x45, 0x52, 0x45, 0x10,
	0xff, 0x01, 0x2a, 0x78, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73,
	0x56, 0x4c, 0x41, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x23,
	0x4e, 0x45, 0x54, 0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x53, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x13, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x38, 0x30, 0x32, 0x31, 0x5f, 0x51, 0x10, 0x80, 0x82, 0x02,
	0x12, 0x1a, 0x0a, 0x14, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x38, 0x30, 0x32, 0x31, 0x5f, 0x41, 0x44, 0x10, 0xa8, 0x91, 0x02, 0x2a, 0x7f, 0x0a, 0x16,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4b, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x50, 0x4d, 0x10, 0x03, 0x2a, 0x5a, 0x0a,
	0x1b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x4c, 0x55, 0x4b, 0x53, 0x32, 0x10, 0x01, 0x2a, 0x99, 0x01, 0x0a, 0x13, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58,
	0x46, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x46, 0x41, 0x54, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x34, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x39,
	0x36, 0x36, 0x30, 0x10, 0x04, 0x2a, 0xe3, 0x01, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x59, 0x0a, 0x0f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4d, 0x50, 0x46, 0x53, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x69, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x2a,
	0x53, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x2a, 0x88, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4d, 0x44, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a,
	0x4b, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44,
	0x48, 0x43, 0x50, 0x34, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x36, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x56, 0x49, 0x50, 0x10, 0x02, 0x2a, 0x9b, 0x02, 0x0a,
	0x13, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41,
	0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x43, 0x48,
	0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x43, 0x48, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x42, 0x74, 0x0a, 0x28, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resource_definitions_enums_enums_proto_rawDescOnce sync.Once
	file_resource_definitions_enums_enums_proto_rawDescData = file_resource_definitions_enums_enums_proto_rawDesc
)

func file_resource_definitions_enums_enums_proto_rawDescGZIP() []byte {
	file_resource_definitions_enums_enums_proto_rawDescOnce.Do(func() {
		file_resource_definitions_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_resource_definitions_enums_enums_proto_rawDescData)
	})
	return file_resource_definitions_enums_enums_proto_rawDescData
}

var file_resource_definitions_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 37)
var file_resource_definitions_enums_enums_proto_goTypes = []any{
	(MachineType)(0),                     // 0: talos.resource.definitions.enums.MachineType
	(NethelpersAddressFlag)(0),           // 1: talos.resource.definitions.enums.NethelpersAddressFlag
	(NethelpersADSelect)(0),              // 2: talos.resource.definitions.enums.NethelpersADSelect
	(NethelpersARPAllTargets)(0),         // 3: talos.resource.definitions.enums.NethelpersARPAllTargets
	(NethelpersARPValidate)(0),           // 4: talos.resource.definitions.enums.NethelpersARPValidate
	(NethelpersBondMode)(0),              // 5: talos.resource.definitions.enums.NethelpersBondMode
	(NethelpersBondXmitHashPolicy)(0),    // 6: talos.resource.definitions.enums.NethelpersBondXmitHashPolicy
	(NethelpersConntrackState)(0),        // 7: talos.resource.definitions.enums.NethelpersConntrackState
	(NethelpersDuplex)(0),                // 8: talos.resource.definitions.enums.NethelpersDuplex
	(NethelpersFailOverMAC)(0),           // 9: talos.resource.definitions.enums.NethelpersFailOverMAC
	(NethelpersFamily)(0),                // 10: talos.resource.definitions.enums.NethelpersFamily
	(NethelpersLACPRate)(0),              // 11: talos.resource.definitions.enums.NethelpersLACPRate
	(NethelpersLinkType)(0),              // 12: talos.resource.definitions.enums.NethelpersLinkType
	(NethelpersMatchOperator)(0),         // 13: talos.resource.definitions.enums.NethelpersMatchOperator
	(NethelpersNfTablesChainHook)(0),     // 14: talos.resource.definitions.enums.NethelpersNfTablesChainHook
	(NethelpersNfTablesChainPriority)(0), // 15: talos.resource.definitions.enums.NethelpersNfTablesChainPriority
	(NethelpersNfTablesVerdict)(0),       // 16: talos.resource.definitions.enums.NethelpersNfTablesVerdict
	(NethelpersOperationalState)(0),      // 17: talos.resource.definitions.enums.NethelpersOperationalState
	(NethelpersPort)(0),                  // 18: talos.resource.definitions.enums.NethelpersPort
	(NethelpersPrimaryReselect)(0),       // 19: talos.resource.definitions.enums.NethelpersPrimaryReselect
	(NethelpersProtocol)(0),              // 20: talos.resource.definitions.enums.NethelpersProtocol
	(NethelpersRouteFlag)(0),             // 21: talos.resource.definitions.enums.NethelpersRouteFlag
	(NethelpersRouteProtocol)(0),         // 22: talos.resource.definitions.enums.NethelpersRouteProtocol
	(NethelpersRouteType)(0),             // 23: talos.resource.definitions.enums.NethelpersRouteType
	(NethelpersRoutingTable)(0),          // 24: talos.resource.definitions.enums.NethelpersRoutingTable
	(NethelpersScope)(0),                 // 25: talos.resource.definitions.enums.NethelpersScope
	(NethelpersVLANProtocol)(0),          // 26: talos.resource.definitions.enums.NethelpersVLANProtocol
	(BlockEncryptionKeyType)(0),          // 27: talos.resource.definitions.enums.BlockEncryptionKeyType
	(BlockEncryptionProviderType)(0),     // 28: talos.resource.definitions.enums.BlockEncryptionProviderType
	(BlockFilesystemType)(0),             // 29: talos.resource.definitions.enums.BlockFilesystemType
	(BlockVolumePhase)(0),                // 30: talos.resource.definitions.enums.BlockVolumePhase
	(BlockVolumeType)(0),                 // 31: talos.resource.definitions.enums.BlockVolumeType
	(CriImageCacheStatus)(0),             // 32: talos.resource.definitions.enums.CriImageCacheStatus
	(KubespanPeerState)(0),               // 33: talos.resource.definitions.enums.KubespanPeerState
	(NetworkConfigLayer)(0),              // 34: talos.resource.definitions.enums.NetworkConfigLayer
	(NetworkOperator)(0),                 // 35: talos.resource.definitions.enums.NetworkOperator
	(RuntimeMachineStage)(0),             // 36: talos.resource.definitions.enums.RuntimeMachineStage
}
var file_resource_definitions_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_resource_definitions_enums_enums_proto_init() }
func file_resource_definitions_enums_enums_proto_init() {
	if File_resource_definitions_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resource_definitions_enums_enums_proto_rawDesc,
			NumEnums:      37,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resource_definitions_enums_enums_proto_goTypes,
		DependencyIndexes: file_resource_definitions_enums_enums_proto_depIdxs,
		EnumInfos:         file_resource_definitions_enums_enums_proto_enumTypes,
	}.Build()
	File_resource_definitions_enums_enums_proto = out.File
	file_resource_definitions_enums_enums_proto_rawDesc = nil
	file_resource_definitions_enums_enums_proto_goTypes = nil
	file_resource_definitions_enums_enums_proto_depIdxs = nil
}

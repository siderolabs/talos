// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: resource/definitions/k8s/k8s.proto

package k8s

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"

	common "github.com/siderolabs/talos/pkg/machinery/api/common"
	proto "github.com/siderolabs/talos/pkg/machinery/api/resource/definitions/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// APIServerConfigSpec is configuration for kube-apiserver.
type APIServerConfigSpec struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Image                    string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	CloudProvider            string                 `protobuf:"bytes,2,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	ControlPlaneEndpoint     string                 `protobuf:"bytes,3,opt,name=control_plane_endpoint,json=controlPlaneEndpoint,proto3" json:"control_plane_endpoint,omitempty"`
	EtcdServers              []string               `protobuf:"bytes,4,rep,name=etcd_servers,json=etcdServers,proto3" json:"etcd_servers,omitempty"`
	LocalPort                int64                  `protobuf:"varint,5,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	ServiceCidRs             []string               `protobuf:"bytes,6,rep,name=service_cid_rs,json=serviceCidRs,proto3" json:"service_cid_rs,omitempty"`
	ExtraArgs                map[string]string      `protobuf:"bytes,7,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExtraVolumes             []*ExtraVolume         `protobuf:"bytes,8,rep,name=extra_volumes,json=extraVolumes,proto3" json:"extra_volumes,omitempty"`
	EnvironmentVariables     map[string]string      `protobuf:"bytes,9,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PodSecurityPolicyEnabled bool                   `protobuf:"varint,10,opt,name=pod_security_policy_enabled,json=podSecurityPolicyEnabled,proto3" json:"pod_security_policy_enabled,omitempty"`
	AdvertisedAddress        string                 `protobuf:"bytes,11,opt,name=advertised_address,json=advertisedAddress,proto3" json:"advertised_address,omitempty"`
	Resources                *Resources             `protobuf:"bytes,12,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *APIServerConfigSpec) Reset() {
	*x = APIServerConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIServerConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIServerConfigSpec) ProtoMessage() {}

func (x *APIServerConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIServerConfigSpec.ProtoReflect.Descriptor instead.
func (*APIServerConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{0}
}

func (x *APIServerConfigSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *APIServerConfigSpec) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *APIServerConfigSpec) GetControlPlaneEndpoint() string {
	if x != nil {
		return x.ControlPlaneEndpoint
	}
	return ""
}

func (x *APIServerConfigSpec) GetEtcdServers() []string {
	if x != nil {
		return x.EtcdServers
	}
	return nil
}

func (x *APIServerConfigSpec) GetLocalPort() int64 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *APIServerConfigSpec) GetServiceCidRs() []string {
	if x != nil {
		return x.ServiceCidRs
	}
	return nil
}

func (x *APIServerConfigSpec) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *APIServerConfigSpec) GetExtraVolumes() []*ExtraVolume {
	if x != nil {
		return x.ExtraVolumes
	}
	return nil
}

func (x *APIServerConfigSpec) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *APIServerConfigSpec) GetPodSecurityPolicyEnabled() bool {
	if x != nil {
		return x.PodSecurityPolicyEnabled
	}
	return false
}

func (x *APIServerConfigSpec) GetAdvertisedAddress() string {
	if x != nil {
		return x.AdvertisedAddress
	}
	return ""
}

func (x *APIServerConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// AdmissionControlConfigSpec is configuration for kube-apiserver.
type AdmissionControlConfigSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        []*AdmissionPluginSpec `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdmissionControlConfigSpec) Reset() {
	*x = AdmissionControlConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdmissionControlConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmissionControlConfigSpec) ProtoMessage() {}

func (x *AdmissionControlConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmissionControlConfigSpec.ProtoReflect.Descriptor instead.
func (*AdmissionControlConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{1}
}

func (x *AdmissionControlConfigSpec) GetConfig() []*AdmissionPluginSpec {
	if x != nil {
		return x.Config
	}
	return nil
}

// AdmissionPluginSpec is a single admission plugin configuration Admission Control plugins.
type AdmissionPluginSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Configuration *structpb.Struct       `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdmissionPluginSpec) Reset() {
	*x = AdmissionPluginSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdmissionPluginSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmissionPluginSpec) ProtoMessage() {}

func (x *AdmissionPluginSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmissionPluginSpec.ProtoReflect.Descriptor instead.
func (*AdmissionPluginSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{2}
}

func (x *AdmissionPluginSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdmissionPluginSpec) GetConfiguration() *structpb.Struct {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// AuditPolicyConfigSpec is audit policy configuration for kube-apiserver.
type AuditPolicyConfigSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *structpb.Struct       `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditPolicyConfigSpec) Reset() {
	*x = AuditPolicyConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditPolicyConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditPolicyConfigSpec) ProtoMessage() {}

func (x *AuditPolicyConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditPolicyConfigSpec.ProtoReflect.Descriptor instead.
func (*AuditPolicyConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{3}
}

func (x *AuditPolicyConfigSpec) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

// AuthorizationAuthorizersSpec is a configuration of authorization authorizers.
type AuthorizationAuthorizersSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Webhook       *structpb.Struct       `protobuf:"bytes,3,opt,name=webhook,proto3" json:"webhook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationAuthorizersSpec) Reset() {
	*x = AuthorizationAuthorizersSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationAuthorizersSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationAuthorizersSpec) ProtoMessage() {}

func (x *AuthorizationAuthorizersSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationAuthorizersSpec.ProtoReflect.Descriptor instead.
func (*AuthorizationAuthorizersSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{4}
}

func (x *AuthorizationAuthorizersSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuthorizationAuthorizersSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthorizationAuthorizersSpec) GetWebhook() *structpb.Struct {
	if x != nil {
		return x.Webhook
	}
	return nil
}

// AuthorizationConfigSpec is authorization configuration for kube-apiserver.
type AuthorizationConfigSpec struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Image         string                          `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Config        []*AuthorizationAuthorizersSpec `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationConfigSpec) Reset() {
	*x = AuthorizationConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationConfigSpec) ProtoMessage() {}

func (x *AuthorizationConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationConfigSpec.ProtoReflect.Descriptor instead.
func (*AuthorizationConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{5}
}

func (x *AuthorizationConfigSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *AuthorizationConfigSpec) GetConfig() []*AuthorizationAuthorizersSpec {
	if x != nil {
		return x.Config
	}
	return nil
}

// BootstrapManifestsConfigSpec is configuration for bootstrap manifests.
type BootstrapManifestsConfigSpec struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Server                   string                 `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	ClusterDomain            string                 `protobuf:"bytes,2,opt,name=cluster_domain,json=clusterDomain,proto3" json:"cluster_domain,omitempty"`
	PodCidRs                 []string               `protobuf:"bytes,3,rep,name=pod_cid_rs,json=podCidRs,proto3" json:"pod_cid_rs,omitempty"`
	ProxyEnabled             bool                   `protobuf:"varint,4,opt,name=proxy_enabled,json=proxyEnabled,proto3" json:"proxy_enabled,omitempty"`
	ProxyImage               string                 `protobuf:"bytes,5,opt,name=proxy_image,json=proxyImage,proto3" json:"proxy_image,omitempty"`
	ProxyArgs                []string               `protobuf:"bytes,6,rep,name=proxy_args,json=proxyArgs,proto3" json:"proxy_args,omitempty"`
	CoreDnsEnabled           bool                   `protobuf:"varint,7,opt,name=core_dns_enabled,json=coreDnsEnabled,proto3" json:"core_dns_enabled,omitempty"`
	CoreDnsImage             string                 `protobuf:"bytes,8,opt,name=core_dns_image,json=coreDnsImage,proto3" json:"core_dns_image,omitempty"`
	DnsServiceIp             string                 `protobuf:"bytes,9,opt,name=dns_service_ip,json=dnsServiceIp,proto3" json:"dns_service_ip,omitempty"`
	DnsServiceIPv6           string                 `protobuf:"bytes,10,opt,name=dns_service_i_pv6,json=dnsServiceIPv6,proto3" json:"dns_service_i_pv6,omitempty"`
	FlannelEnabled           bool                   `protobuf:"varint,11,opt,name=flannel_enabled,json=flannelEnabled,proto3" json:"flannel_enabled,omitempty"`
	FlannelImage             string                 `protobuf:"bytes,12,opt,name=flannel_image,json=flannelImage,proto3" json:"flannel_image,omitempty"`
	PodSecurityPolicyEnabled bool                   `protobuf:"varint,14,opt,name=pod_security_policy_enabled,json=podSecurityPolicyEnabled,proto3" json:"pod_security_policy_enabled,omitempty"`
	TalosApiServiceEnabled   bool                   `protobuf:"varint,15,opt,name=talos_api_service_enabled,json=talosApiServiceEnabled,proto3" json:"talos_api_service_enabled,omitempty"`
	FlannelExtraArgs         []string               `protobuf:"bytes,16,rep,name=flannel_extra_args,json=flannelExtraArgs,proto3" json:"flannel_extra_args,omitempty"`
	FlannelKubeServiceHost   string                 `protobuf:"bytes,17,opt,name=flannel_kube_service_host,json=flannelKubeServiceHost,proto3" json:"flannel_kube_service_host,omitempty"`
	FlannelKubeServicePort   string                 `protobuf:"bytes,18,opt,name=flannel_kube_service_port,json=flannelKubeServicePort,proto3" json:"flannel_kube_service_port,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BootstrapManifestsConfigSpec) Reset() {
	*x = BootstrapManifestsConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapManifestsConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapManifestsConfigSpec) ProtoMessage() {}

func (x *BootstrapManifestsConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapManifestsConfigSpec.ProtoReflect.Descriptor instead.
func (*BootstrapManifestsConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{6}
}

func (x *BootstrapManifestsConfigSpec) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetPodCidRs() []string {
	if x != nil {
		return x.PodCidRs
	}
	return nil
}

func (x *BootstrapManifestsConfigSpec) GetProxyEnabled() bool {
	if x != nil {
		return x.ProxyEnabled
	}
	return false
}

func (x *BootstrapManifestsConfigSpec) GetProxyImage() string {
	if x != nil {
		return x.ProxyImage
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetProxyArgs() []string {
	if x != nil {
		return x.ProxyArgs
	}
	return nil
}

func (x *BootstrapManifestsConfigSpec) GetCoreDnsEnabled() bool {
	if x != nil {
		return x.CoreDnsEnabled
	}
	return false
}

func (x *BootstrapManifestsConfigSpec) GetCoreDnsImage() string {
	if x != nil {
		return x.CoreDnsImage
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetDnsServiceIp() string {
	if x != nil {
		return x.DnsServiceIp
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetDnsServiceIPv6() string {
	if x != nil {
		return x.DnsServiceIPv6
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetFlannelEnabled() bool {
	if x != nil {
		return x.FlannelEnabled
	}
	return false
}

func (x *BootstrapManifestsConfigSpec) GetFlannelImage() string {
	if x != nil {
		return x.FlannelImage
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetPodSecurityPolicyEnabled() bool {
	if x != nil {
		return x.PodSecurityPolicyEnabled
	}
	return false
}

func (x *BootstrapManifestsConfigSpec) GetTalosApiServiceEnabled() bool {
	if x != nil {
		return x.TalosApiServiceEnabled
	}
	return false
}

func (x *BootstrapManifestsConfigSpec) GetFlannelExtraArgs() []string {
	if x != nil {
		return x.FlannelExtraArgs
	}
	return nil
}

func (x *BootstrapManifestsConfigSpec) GetFlannelKubeServiceHost() string {
	if x != nil {
		return x.FlannelKubeServiceHost
	}
	return ""
}

func (x *BootstrapManifestsConfigSpec) GetFlannelKubeServicePort() string {
	if x != nil {
		return x.FlannelKubeServicePort
	}
	return ""
}

// ConfigStatusSpec describes status of rendered secrets.
type ConfigStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ready         bool                   `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigStatusSpec) Reset() {
	*x = ConfigStatusSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigStatusSpec) ProtoMessage() {}

func (x *ConfigStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigStatusSpec.ProtoReflect.Descriptor instead.
func (*ConfigStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigStatusSpec) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ConfigStatusSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ControllerManagerConfigSpec is configuration for kube-controller-manager.
type ControllerManagerConfigSpec struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Enabled              bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Image                string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	CloudProvider        string                 `protobuf:"bytes,3,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	PodCidRs             []string               `protobuf:"bytes,4,rep,name=pod_cid_rs,json=podCidRs,proto3" json:"pod_cid_rs,omitempty"`
	ServiceCidRs         []string               `protobuf:"bytes,5,rep,name=service_cid_rs,json=serviceCidRs,proto3" json:"service_cid_rs,omitempty"`
	ExtraArgs            map[string]string      `protobuf:"bytes,6,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExtraVolumes         []*ExtraVolume         `protobuf:"bytes,7,rep,name=extra_volumes,json=extraVolumes,proto3" json:"extra_volumes,omitempty"`
	EnvironmentVariables map[string]string      `protobuf:"bytes,8,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources            *Resources             `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ControllerManagerConfigSpec) Reset() {
	*x = ControllerManagerConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerManagerConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerManagerConfigSpec) ProtoMessage() {}

func (x *ControllerManagerConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerManagerConfigSpec.ProtoReflect.Descriptor instead.
func (*ControllerManagerConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{8}
}

func (x *ControllerManagerConfigSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ControllerManagerConfigSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ControllerManagerConfigSpec) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *ControllerManagerConfigSpec) GetPodCidRs() []string {
	if x != nil {
		return x.PodCidRs
	}
	return nil
}

func (x *ControllerManagerConfigSpec) GetServiceCidRs() []string {
	if x != nil {
		return x.ServiceCidRs
	}
	return nil
}

func (x *ControllerManagerConfigSpec) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *ControllerManagerConfigSpec) GetExtraVolumes() []*ExtraVolume {
	if x != nil {
		return x.ExtraVolumes
	}
	return nil
}

func (x *ControllerManagerConfigSpec) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *ControllerManagerConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// EndpointSpec describes status of rendered secrets.
type EndpointSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*common.NetIP        `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointSpec) Reset() {
	*x = EndpointSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSpec) ProtoMessage() {}

func (x *EndpointSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSpec.ProtoReflect.Descriptor instead.
func (*EndpointSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{9}
}

func (x *EndpointSpec) GetAddresses() []*common.NetIP {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// ExtraManifest defines a single extra manifest to download.
type ExtraManifest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url            string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Priority       string                 `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ExtraHeaders   map[string]string      `protobuf:"bytes,4,rep,name=extra_headers,json=extraHeaders,proto3" json:"extra_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InlineManifest string                 `protobuf:"bytes,5,opt,name=inline_manifest,json=inlineManifest,proto3" json:"inline_manifest,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExtraManifest) Reset() {
	*x = ExtraManifest{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtraManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraManifest) ProtoMessage() {}

func (x *ExtraManifest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraManifest.ProtoReflect.Descriptor instead.
func (*ExtraManifest) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{10}
}

func (x *ExtraManifest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtraManifest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExtraManifest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ExtraManifest) GetExtraHeaders() map[string]string {
	if x != nil {
		return x.ExtraHeaders
	}
	return nil
}

func (x *ExtraManifest) GetInlineManifest() string {
	if x != nil {
		return x.InlineManifest
	}
	return ""
}

// ExtraManifestsConfigSpec is configuration for extra bootstrap manifests.
type ExtraManifestsConfigSpec struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExtraManifests []*ExtraManifest       `protobuf:"bytes,1,rep,name=extra_manifests,json=extraManifests,proto3" json:"extra_manifests,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExtraManifestsConfigSpec) Reset() {
	*x = ExtraManifestsConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtraManifestsConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraManifestsConfigSpec) ProtoMessage() {}

func (x *ExtraManifestsConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraManifestsConfigSpec.ProtoReflect.Descriptor instead.
func (*ExtraManifestsConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{11}
}

func (x *ExtraManifestsConfigSpec) GetExtraManifests() []*ExtraManifest {
	if x != nil {
		return x.ExtraManifests
	}
	return nil
}

// ExtraVolume is a configuration of extra volume.
type ExtraVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HostPath      string                 `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	MountPath     string                 `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,4,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtraVolume) Reset() {
	*x = ExtraVolume{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtraVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraVolume) ProtoMessage() {}

func (x *ExtraVolume) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraVolume.ProtoReflect.Descriptor instead.
func (*ExtraVolume) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{12}
}

func (x *ExtraVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtraVolume) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *ExtraVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *ExtraVolume) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// KubePrismConfigSpec describes KubePrismConfig data.
type KubePrismConfigSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int64                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Endpoints     []*KubePrismEndpoint   `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubePrismConfigSpec) Reset() {
	*x = KubePrismConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubePrismConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePrismConfigSpec) ProtoMessage() {}

func (x *KubePrismConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePrismConfigSpec.ProtoReflect.Descriptor instead.
func (*KubePrismConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{13}
}

func (x *KubePrismConfigSpec) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *KubePrismConfigSpec) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *KubePrismConfigSpec) GetEndpoints() []*KubePrismEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// KubePrismEndpoint holds data for control plane endpoint.
type KubePrismEndpoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubePrismEndpoint) Reset() {
	*x = KubePrismEndpoint{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubePrismEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePrismEndpoint) ProtoMessage() {}

func (x *KubePrismEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePrismEndpoint.ProtoReflect.Descriptor instead.
func (*KubePrismEndpoint) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{14}
}

func (x *KubePrismEndpoint) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *KubePrismEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// KubePrismEndpointsSpec describes KubePrismEndpoints configuration.
type KubePrismEndpointsSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoints     []*KubePrismEndpoint   `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubePrismEndpointsSpec) Reset() {
	*x = KubePrismEndpointsSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubePrismEndpointsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePrismEndpointsSpec) ProtoMessage() {}

func (x *KubePrismEndpointsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePrismEndpointsSpec.ProtoReflect.Descriptor instead.
func (*KubePrismEndpointsSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{15}
}

func (x *KubePrismEndpointsSpec) GetEndpoints() []*KubePrismEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// KubePrismStatusesSpec describes KubePrismStatuses data.
type KubePrismStatusesSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Healthy       bool                   `protobuf:"varint,2,opt,name=healthy,proto3" json:"healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubePrismStatusesSpec) Reset() {
	*x = KubePrismStatusesSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubePrismStatusesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePrismStatusesSpec) ProtoMessage() {}

func (x *KubePrismStatusesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePrismStatusesSpec.ProtoReflect.Descriptor instead.
func (*KubePrismStatusesSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{16}
}

func (x *KubePrismStatusesSpec) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *KubePrismStatusesSpec) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

// KubeletConfigSpec holds the source of kubelet configuration.
type KubeletConfigSpec struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Image                         string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	ClusterDns                    []string               `protobuf:"bytes,2,rep,name=cluster_dns,json=clusterDns,proto3" json:"cluster_dns,omitempty"`
	ClusterDomain                 string                 `protobuf:"bytes,3,opt,name=cluster_domain,json=clusterDomain,proto3" json:"cluster_domain,omitempty"`
	ExtraArgs                     map[string]string      `protobuf:"bytes,4,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExtraMounts                   []*proto.Mount         `protobuf:"bytes,5,rep,name=extra_mounts,json=extraMounts,proto3" json:"extra_mounts,omitempty"`
	ExtraConfig                   *structpb.Struct       `protobuf:"bytes,6,opt,name=extra_config,json=extraConfig,proto3" json:"extra_config,omitempty"`
	CloudProviderExternal         bool                   `protobuf:"varint,7,opt,name=cloud_provider_external,json=cloudProviderExternal,proto3" json:"cloud_provider_external,omitempty"`
	DefaultRuntimeSeccompEnabled  bool                   `protobuf:"varint,8,opt,name=default_runtime_seccomp_enabled,json=defaultRuntimeSeccompEnabled,proto3" json:"default_runtime_seccomp_enabled,omitempty"`
	SkipNodeRegistration          bool                   `protobuf:"varint,9,opt,name=skip_node_registration,json=skipNodeRegistration,proto3" json:"skip_node_registration,omitempty"`
	StaticPodListUrl              string                 `protobuf:"bytes,10,opt,name=static_pod_list_url,json=staticPodListUrl,proto3" json:"static_pod_list_url,omitempty"`
	DisableManifestsDirectory     bool                   `protobuf:"varint,11,opt,name=disable_manifests_directory,json=disableManifestsDirectory,proto3" json:"disable_manifests_directory,omitempty"`
	EnableFsQuotaMonitoring       bool                   `protobuf:"varint,12,opt,name=enable_fs_quota_monitoring,json=enableFsQuotaMonitoring,proto3" json:"enable_fs_quota_monitoring,omitempty"`
	CredentialProviderConfig      *structpb.Struct       `protobuf:"bytes,13,opt,name=credential_provider_config,json=credentialProviderConfig,proto3" json:"credential_provider_config,omitempty"`
	AllowSchedulingOnControlPlane bool                   `protobuf:"varint,14,opt,name=allow_scheduling_on_control_plane,json=allowSchedulingOnControlPlane,proto3" json:"allow_scheduling_on_control_plane,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *KubeletConfigSpec) Reset() {
	*x = KubeletConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletConfigSpec) ProtoMessage() {}

func (x *KubeletConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletConfigSpec.ProtoReflect.Descriptor instead.
func (*KubeletConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{17}
}

func (x *KubeletConfigSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *KubeletConfigSpec) GetClusterDns() []string {
	if x != nil {
		return x.ClusterDns
	}
	return nil
}

func (x *KubeletConfigSpec) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

func (x *KubeletConfigSpec) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *KubeletConfigSpec) GetExtraMounts() []*proto.Mount {
	if x != nil {
		return x.ExtraMounts
	}
	return nil
}

func (x *KubeletConfigSpec) GetExtraConfig() *structpb.Struct {
	if x != nil {
		return x.ExtraConfig
	}
	return nil
}

func (x *KubeletConfigSpec) GetCloudProviderExternal() bool {
	if x != nil {
		return x.CloudProviderExternal
	}
	return false
}

func (x *KubeletConfigSpec) GetDefaultRuntimeSeccompEnabled() bool {
	if x != nil {
		return x.DefaultRuntimeSeccompEnabled
	}
	return false
}

func (x *KubeletConfigSpec) GetSkipNodeRegistration() bool {
	if x != nil {
		return x.SkipNodeRegistration
	}
	return false
}

func (x *KubeletConfigSpec) GetStaticPodListUrl() string {
	if x != nil {
		return x.StaticPodListUrl
	}
	return ""
}

func (x *KubeletConfigSpec) GetDisableManifestsDirectory() bool {
	if x != nil {
		return x.DisableManifestsDirectory
	}
	return false
}

func (x *KubeletConfigSpec) GetEnableFsQuotaMonitoring() bool {
	if x != nil {
		return x.EnableFsQuotaMonitoring
	}
	return false
}

func (x *KubeletConfigSpec) GetCredentialProviderConfig() *structpb.Struct {
	if x != nil {
		return x.CredentialProviderConfig
	}
	return nil
}

func (x *KubeletConfigSpec) GetAllowSchedulingOnControlPlane() bool {
	if x != nil {
		return x.AllowSchedulingOnControlPlane
	}
	return false
}

// KubeletSpecSpec holds the source of kubelet configuration.
type KubeletSpecSpec struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Image                    string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Args                     []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	ExtraMounts              []*proto.Mount         `protobuf:"bytes,3,rep,name=extra_mounts,json=extraMounts,proto3" json:"extra_mounts,omitempty"`
	ExpectedNodename         string                 `protobuf:"bytes,4,opt,name=expected_nodename,json=expectedNodename,proto3" json:"expected_nodename,omitempty"`
	Config                   *structpb.Struct       `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	CredentialProviderConfig *structpb.Struct       `protobuf:"bytes,6,opt,name=credential_provider_config,json=credentialProviderConfig,proto3" json:"credential_provider_config,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *KubeletSpecSpec) Reset() {
	*x = KubeletSpecSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletSpecSpec) ProtoMessage() {}

func (x *KubeletSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletSpecSpec.ProtoReflect.Descriptor instead.
func (*KubeletSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{18}
}

func (x *KubeletSpecSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *KubeletSpecSpec) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *KubeletSpecSpec) GetExtraMounts() []*proto.Mount {
	if x != nil {
		return x.ExtraMounts
	}
	return nil
}

func (x *KubeletSpecSpec) GetExpectedNodename() string {
	if x != nil {
		return x.ExpectedNodename
	}
	return ""
}

func (x *KubeletSpecSpec) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *KubeletSpecSpec) GetCredentialProviderConfig() *structpb.Struct {
	if x != nil {
		return x.CredentialProviderConfig
	}
	return nil
}

// ManifestSpec holds the Kubernetes resources spec.
type ManifestSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SingleManifest      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManifestSpec) Reset() {
	*x = ManifestSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManifestSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestSpec) ProtoMessage() {}

func (x *ManifestSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestSpec.ProtoReflect.Descriptor instead.
func (*ManifestSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{19}
}

func (x *ManifestSpec) GetItems() []*SingleManifest {
	if x != nil {
		return x.Items
	}
	return nil
}

// ManifestStatusSpec describes manifest application status.
type ManifestStatusSpec struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ManifestsApplied []string               `protobuf:"bytes,1,rep,name=manifests_applied,json=manifestsApplied,proto3" json:"manifests_applied,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ManifestStatusSpec) Reset() {
	*x = ManifestStatusSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManifestStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestStatusSpec) ProtoMessage() {}

func (x *ManifestStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestStatusSpec.ProtoReflect.Descriptor instead.
func (*ManifestStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{20}
}

func (x *ManifestStatusSpec) GetManifestsApplied() []string {
	if x != nil {
		return x.ManifestsApplied
	}
	return nil
}

// NodeAnnotationSpecSpec represents an annoation that's attached to a Talos node.
type NodeAnnotationSpecSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeAnnotationSpecSpec) Reset() {
	*x = NodeAnnotationSpecSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAnnotationSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAnnotationSpecSpec) ProtoMessage() {}

func (x *NodeAnnotationSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAnnotationSpecSpec.ProtoReflect.Descriptor instead.
func (*NodeAnnotationSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{21}
}

func (x *NodeAnnotationSpecSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeAnnotationSpecSpec) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// NodeIPConfigSpec holds the Node IP specification.
type NodeIPConfigSpec struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ValidSubnets   []string               `protobuf:"bytes,1,rep,name=valid_subnets,json=validSubnets,proto3" json:"valid_subnets,omitempty"`
	ExcludeSubnets []string               `protobuf:"bytes,2,rep,name=exclude_subnets,json=excludeSubnets,proto3" json:"exclude_subnets,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NodeIPConfigSpec) Reset() {
	*x = NodeIPConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeIPConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPConfigSpec) ProtoMessage() {}

func (x *NodeIPConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPConfigSpec.ProtoReflect.Descriptor instead.
func (*NodeIPConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{22}
}

func (x *NodeIPConfigSpec) GetValidSubnets() []string {
	if x != nil {
		return x.ValidSubnets
	}
	return nil
}

func (x *NodeIPConfigSpec) GetExcludeSubnets() []string {
	if x != nil {
		return x.ExcludeSubnets
	}
	return nil
}

// NodeIPSpec holds the Node IP specification.
type NodeIPSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*common.NetIP        `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeIPSpec) Reset() {
	*x = NodeIPSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeIPSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPSpec) ProtoMessage() {}

func (x *NodeIPSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPSpec.ProtoReflect.Descriptor instead.
func (*NodeIPSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{23}
}

func (x *NodeIPSpec) GetAddresses() []*common.NetIP {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// NodeLabelSpecSpec represents a label that's attached to a Talos node.
type NodeLabelSpecSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeLabelSpecSpec) Reset() {
	*x = NodeLabelSpecSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeLabelSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLabelSpecSpec) ProtoMessage() {}

func (x *NodeLabelSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLabelSpecSpec.ProtoReflect.Descriptor instead.
func (*NodeLabelSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{24}
}

func (x *NodeLabelSpecSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeLabelSpecSpec) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// NodeStatusSpec describes Kubernetes NodeStatus.
type NodeStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodename      string                 `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
	NodeReady     bool                   `protobuf:"varint,2,opt,name=node_ready,json=nodeReady,proto3" json:"node_ready,omitempty"`
	Unschedulable bool                   `protobuf:"varint,3,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations   map[string]string      `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeStatusSpec) Reset() {
	*x = NodeStatusSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusSpec) ProtoMessage() {}

func (x *NodeStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusSpec.ProtoReflect.Descriptor instead.
func (*NodeStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{25}
}

func (x *NodeStatusSpec) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *NodeStatusSpec) GetNodeReady() bool {
	if x != nil {
		return x.NodeReady
	}
	return false
}

func (x *NodeStatusSpec) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeStatusSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeStatusSpec) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// NodeTaintSpecSpec represents a label that's attached to a Talos node.
type NodeTaintSpecSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Effect        string                 `protobuf:"bytes,2,opt,name=effect,proto3" json:"effect,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeTaintSpecSpec) Reset() {
	*x = NodeTaintSpecSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeTaintSpecSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTaintSpecSpec) ProtoMessage() {}

func (x *NodeTaintSpecSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTaintSpecSpec.ProtoReflect.Descriptor instead.
func (*NodeTaintSpecSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{26}
}

func (x *NodeTaintSpecSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeTaintSpecSpec) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *NodeTaintSpecSpec) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// NodenameSpec describes Kubernetes nodename.
type NodenameSpec struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Nodename             string                 `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
	HostnameVersion      string                 `protobuf:"bytes,2,opt,name=hostname_version,json=hostnameVersion,proto3" json:"hostname_version,omitempty"`
	SkipNodeRegistration bool                   `protobuf:"varint,3,opt,name=skip_node_registration,json=skipNodeRegistration,proto3" json:"skip_node_registration,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NodenameSpec) Reset() {
	*x = NodenameSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodenameSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodenameSpec) ProtoMessage() {}

func (x *NodenameSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodenameSpec.ProtoReflect.Descriptor instead.
func (*NodenameSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{27}
}

func (x *NodenameSpec) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *NodenameSpec) GetHostnameVersion() string {
	if x != nil {
		return x.HostnameVersion
	}
	return ""
}

func (x *NodenameSpec) GetSkipNodeRegistration() bool {
	if x != nil {
		return x.SkipNodeRegistration
	}
	return false
}

// Resources is a configuration of cpu and memory resources.
type Resources struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      map[string]string      `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Limits        map[string]string      `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resources) Reset() {
	*x = Resources{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{28}
}

func (x *Resources) GetRequests() map[string]string {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *Resources) GetLimits() map[string]string {
	if x != nil {
		return x.Limits
	}
	return nil
}

// SchedulerConfigSpec is configuration for kube-scheduler.
type SchedulerConfigSpec struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Enabled              bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Image                string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	ExtraArgs            map[string]string      `protobuf:"bytes,3,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExtraVolumes         []*ExtraVolume         `protobuf:"bytes,4,rep,name=extra_volumes,json=extraVolumes,proto3" json:"extra_volumes,omitempty"`
	EnvironmentVariables map[string]string      `protobuf:"bytes,5,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources            *Resources             `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
	Config               *structpb.Struct       `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SchedulerConfigSpec) Reset() {
	*x = SchedulerConfigSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulerConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerConfigSpec) ProtoMessage() {}

func (x *SchedulerConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerConfigSpec.ProtoReflect.Descriptor instead.
func (*SchedulerConfigSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{29}
}

func (x *SchedulerConfigSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SchedulerConfigSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *SchedulerConfigSpec) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *SchedulerConfigSpec) GetExtraVolumes() []*ExtraVolume {
	if x != nil {
		return x.ExtraVolumes
	}
	return nil
}

func (x *SchedulerConfigSpec) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *SchedulerConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SchedulerConfigSpec) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

// SecretsStatusSpec describes status of rendered secrets.
type SecretsStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ready         bool                   `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecretsStatusSpec) Reset() {
	*x = SecretsStatusSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretsStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretsStatusSpec) ProtoMessage() {}

func (x *SecretsStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretsStatusSpec.ProtoReflect.Descriptor instead.
func (*SecretsStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{30}
}

func (x *SecretsStatusSpec) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *SecretsStatusSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// SingleManifest is a single manifest.
type SingleManifest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Object        *structpb.Struct       `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleManifest) Reset() {
	*x = SingleManifest{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleManifest) ProtoMessage() {}

func (x *SingleManifest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleManifest.ProtoReflect.Descriptor instead.
func (*SingleManifest) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{31}
}

func (x *SingleManifest) GetObject() *structpb.Struct {
	if x != nil {
		return x.Object
	}
	return nil
}

// StaticPodServerStatusSpec describes static pod spec, it contains marshaled *v1.Pod spec.
type StaticPodServerStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticPodServerStatusSpec) Reset() {
	*x = StaticPodServerStatusSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticPodServerStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticPodServerStatusSpec) ProtoMessage() {}

func (x *StaticPodServerStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticPodServerStatusSpec.ProtoReflect.Descriptor instead.
func (*StaticPodServerStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{32}
}

func (x *StaticPodServerStatusSpec) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// StaticPodSpec describes static pod spec, it contains marshaled *v1.Pod spec.
type StaticPodSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pod           *structpb.Struct       `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticPodSpec) Reset() {
	*x = StaticPodSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticPodSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticPodSpec) ProtoMessage() {}

func (x *StaticPodSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticPodSpec.ProtoReflect.Descriptor instead.
func (*StaticPodSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{33}
}

func (x *StaticPodSpec) GetPod() *structpb.Struct {
	if x != nil {
		return x.Pod
	}
	return nil
}

// StaticPodStatusSpec describes kubelet static pod status.
type StaticPodStatusSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodStatus     *structpb.Struct       `protobuf:"bytes,1,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticPodStatusSpec) Reset() {
	*x = StaticPodStatusSpec{}
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticPodStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticPodStatusSpec) ProtoMessage() {}

func (x *StaticPodStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_resource_definitions_k8s_k8s_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticPodStatusSpec.ProtoReflect.Descriptor instead.
func (*StaticPodStatusSpec) Descriptor() ([]byte, []int) {
	return file_resource_definitions_k8s_k8s_proto_rawDescGZIP(), []int{34}
}

func (x *StaticPodStatusSpec) GetPodStatus() *structpb.Struct {
	if x != nil {
		return x.PodStatus
	}
	return nil
}

var File_resource_definitions_k8s_k8s_proto protoreflect.FileDescriptor

var file_resource_definitions_k8s_k8s_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6b, 0x38, 0x73, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe8, 0x06, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x74,
	0x63, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x74, 0x63, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x5f, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x69, 0x64,
	0x52, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74,
	0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x1a, 0x41, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x68, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x48, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x79, 0x0a, 0x1c, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xed, 0x05, 0x0a,
	0x1c, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x6f, 0x64, 0x5f, 0x63, 0x69, 0x64, 0x5f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x52, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x6e, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x5f, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x75, 0x62,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x42, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xd2, 0x05, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x63,
	0x69, 0x64, 0x5f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x64,
	0x43, 0x69, 0x64, 0x52, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x69, 0x64, 0x5f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x69, 0x64, 0x52, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x56, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x0b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65, 0x50,
	0x72, 0x69, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x50,
	0x72, 0x69, 0x73, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x50,
	0x72, 0x69, 0x73, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x69, 0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x69, 0x73,
	0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4f,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x45, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x9a, 0x07, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x6c,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x18, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbc, 0x02, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x1a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x18, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x54, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x41, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x16, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a,
	0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22,
	0x39, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x61, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a,
	0x11, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa7, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x53,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x05, 0x0a, 0x13, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74,
	0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a,
	0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x2d, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x64,
	0x22, 0x4d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x70, 0x0a, 0x26, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6b, 0x38, 0x73, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x38,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_resource_definitions_k8s_k8s_proto_rawDescOnce sync.Once
	file_resource_definitions_k8s_k8s_proto_rawDescData []byte
)

func file_resource_definitions_k8s_k8s_proto_rawDescGZIP() []byte {
	file_resource_definitions_k8s_k8s_proto_rawDescOnce.Do(func() {
		file_resource_definitions_k8s_k8s_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_resource_definitions_k8s_k8s_proto_rawDesc), len(file_resource_definitions_k8s_k8s_proto_rawDesc)))
	})
	return file_resource_definitions_k8s_k8s_proto_rawDescData
}

var file_resource_definitions_k8s_k8s_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_resource_definitions_k8s_k8s_proto_goTypes = []any{
	(*APIServerConfigSpec)(nil),          // 0: talos.resource.definitions.k8s.APIServerConfigSpec
	(*AdmissionControlConfigSpec)(nil),   // 1: talos.resource.definitions.k8s.AdmissionControlConfigSpec
	(*AdmissionPluginSpec)(nil),          // 2: talos.resource.definitions.k8s.AdmissionPluginSpec
	(*AuditPolicyConfigSpec)(nil),        // 3: talos.resource.definitions.k8s.AuditPolicyConfigSpec
	(*AuthorizationAuthorizersSpec)(nil), // 4: talos.resource.definitions.k8s.AuthorizationAuthorizersSpec
	(*AuthorizationConfigSpec)(nil),      // 5: talos.resource.definitions.k8s.AuthorizationConfigSpec
	(*BootstrapManifestsConfigSpec)(nil), // 6: talos.resource.definitions.k8s.BootstrapManifestsConfigSpec
	(*ConfigStatusSpec)(nil),             // 7: talos.resource.definitions.k8s.ConfigStatusSpec
	(*ControllerManagerConfigSpec)(nil),  // 8: talos.resource.definitions.k8s.ControllerManagerConfigSpec
	(*EndpointSpec)(nil),                 // 9: talos.resource.definitions.k8s.EndpointSpec
	(*ExtraManifest)(nil),                // 10: talos.resource.definitions.k8s.ExtraManifest
	(*ExtraManifestsConfigSpec)(nil),     // 11: talos.resource.definitions.k8s.ExtraManifestsConfigSpec
	(*ExtraVolume)(nil),                  // 12: talos.resource.definitions.k8s.ExtraVolume
	(*KubePrismConfigSpec)(nil),          // 13: talos.resource.definitions.k8s.KubePrismConfigSpec
	(*KubePrismEndpoint)(nil),            // 14: talos.resource.definitions.k8s.KubePrismEndpoint
	(*KubePrismEndpointsSpec)(nil),       // 15: talos.resource.definitions.k8s.KubePrismEndpointsSpec
	(*KubePrismStatusesSpec)(nil),        // 16: talos.resource.definitions.k8s.KubePrismStatusesSpec
	(*KubeletConfigSpec)(nil),            // 17: talos.resource.definitions.k8s.KubeletConfigSpec
	(*KubeletSpecSpec)(nil),              // 18: talos.resource.definitions.k8s.KubeletSpecSpec
	(*ManifestSpec)(nil),                 // 19: talos.resource.definitions.k8s.ManifestSpec
	(*ManifestStatusSpec)(nil),           // 20: talos.resource.definitions.k8s.ManifestStatusSpec
	(*NodeAnnotationSpecSpec)(nil),       // 21: talos.resource.definitions.k8s.NodeAnnotationSpecSpec
	(*NodeIPConfigSpec)(nil),             // 22: talos.resource.definitions.k8s.NodeIPConfigSpec
	(*NodeIPSpec)(nil),                   // 23: talos.resource.definitions.k8s.NodeIPSpec
	(*NodeLabelSpecSpec)(nil),            // 24: talos.resource.definitions.k8s.NodeLabelSpecSpec
	(*NodeStatusSpec)(nil),               // 25: talos.resource.definitions.k8s.NodeStatusSpec
	(*NodeTaintSpecSpec)(nil),            // 26: talos.resource.definitions.k8s.NodeTaintSpecSpec
	(*NodenameSpec)(nil),                 // 27: talos.resource.definitions.k8s.NodenameSpec
	(*Resources)(nil),                    // 28: talos.resource.definitions.k8s.Resources
	(*SchedulerConfigSpec)(nil),          // 29: talos.resource.definitions.k8s.SchedulerConfigSpec
	(*SecretsStatusSpec)(nil),            // 30: talos.resource.definitions.k8s.SecretsStatusSpec
	(*SingleManifest)(nil),               // 31: talos.resource.definitions.k8s.SingleManifest
	(*StaticPodServerStatusSpec)(nil),    // 32: talos.resource.definitions.k8s.StaticPodServerStatusSpec
	(*StaticPodSpec)(nil),                // 33: talos.resource.definitions.k8s.StaticPodSpec
	(*StaticPodStatusSpec)(nil),          // 34: talos.resource.definitions.k8s.StaticPodStatusSpec
	nil,                                  // 35: talos.resource.definitions.k8s.APIServerConfigSpec.ExtraArgsEntry
	nil,                                  // 36: talos.resource.definitions.k8s.APIServerConfigSpec.EnvironmentVariablesEntry
	nil,                                  // 37: talos.resource.definitions.k8s.ControllerManagerConfigSpec.ExtraArgsEntry
	nil,                                  // 38: talos.resource.definitions.k8s.ControllerManagerConfigSpec.EnvironmentVariablesEntry
	nil,                                  // 39: talos.resource.definitions.k8s.ExtraManifest.ExtraHeadersEntry
	nil,                                  // 40: talos.resource.definitions.k8s.KubeletConfigSpec.ExtraArgsEntry
	nil,                                  // 41: talos.resource.definitions.k8s.NodeStatusSpec.LabelsEntry
	nil,                                  // 42: talos.resource.definitions.k8s.NodeStatusSpec.AnnotationsEntry
	nil,                                  // 43: talos.resource.definitions.k8s.Resources.RequestsEntry
	nil,                                  // 44: talos.resource.definitions.k8s.Resources.LimitsEntry
	nil,                                  // 45: talos.resource.definitions.k8s.SchedulerConfigSpec.ExtraArgsEntry
	nil,                                  // 46: talos.resource.definitions.k8s.SchedulerConfigSpec.EnvironmentVariablesEntry
	(*structpb.Struct)(nil),              // 47: google.protobuf.Struct
	(*common.NetIP)(nil),                 // 48: common.NetIP
	(*proto.Mount)(nil),                  // 49: talos.resource.definitions.proto.Mount
}
var file_resource_definitions_k8s_k8s_proto_depIdxs = []int32{
	35, // 0: talos.resource.definitions.k8s.APIServerConfigSpec.extra_args:type_name -> talos.resource.definitions.k8s.APIServerConfigSpec.ExtraArgsEntry
	12, // 1: talos.resource.definitions.k8s.APIServerConfigSpec.extra_volumes:type_name -> talos.resource.definitions.k8s.ExtraVolume
	36, // 2: talos.resource.definitions.k8s.APIServerConfigSpec.environment_variables:type_name -> talos.resource.definitions.k8s.APIServerConfigSpec.EnvironmentVariablesEntry
	28, // 3: talos.resource.definitions.k8s.APIServerConfigSpec.resources:type_name -> talos.resource.definitions.k8s.Resources
	2,  // 4: talos.resource.definitions.k8s.AdmissionControlConfigSpec.config:type_name -> talos.resource.definitions.k8s.AdmissionPluginSpec
	47, // 5: talos.resource.definitions.k8s.AdmissionPluginSpec.configuration:type_name -> google.protobuf.Struct
	47, // 6: talos.resource.definitions.k8s.AuditPolicyConfigSpec.config:type_name -> google.protobuf.Struct
	47, // 7: talos.resource.definitions.k8s.AuthorizationAuthorizersSpec.webhook:type_name -> google.protobuf.Struct
	4,  // 8: talos.resource.definitions.k8s.AuthorizationConfigSpec.config:type_name -> talos.resource.definitions.k8s.AuthorizationAuthorizersSpec
	37, // 9: talos.resource.definitions.k8s.ControllerManagerConfigSpec.extra_args:type_name -> talos.resource.definitions.k8s.ControllerManagerConfigSpec.ExtraArgsEntry
	12, // 10: talos.resource.definitions.k8s.ControllerManagerConfigSpec.extra_volumes:type_name -> talos.resource.definitions.k8s.ExtraVolume
	38, // 11: talos.resource.definitions.k8s.ControllerManagerConfigSpec.environment_variables:type_name -> talos.resource.definitions.k8s.ControllerManagerConfigSpec.EnvironmentVariablesEntry
	28, // 12: talos.resource.definitions.k8s.ControllerManagerConfigSpec.resources:type_name -> talos.resource.definitions.k8s.Resources
	48, // 13: talos.resource.definitions.k8s.EndpointSpec.addresses:type_name -> common.NetIP
	39, // 14: talos.resource.definitions.k8s.ExtraManifest.extra_headers:type_name -> talos.resource.definitions.k8s.ExtraManifest.ExtraHeadersEntry
	10, // 15: talos.resource.definitions.k8s.ExtraManifestsConfigSpec.extra_manifests:type_name -> talos.resource.definitions.k8s.ExtraManifest
	14, // 16: talos.resource.definitions.k8s.KubePrismConfigSpec.endpoints:type_name -> talos.resource.definitions.k8s.KubePrismEndpoint
	14, // 17: talos.resource.definitions.k8s.KubePrismEndpointsSpec.endpoints:type_name -> talos.resource.definitions.k8s.KubePrismEndpoint
	40, // 18: talos.resource.definitions.k8s.KubeletConfigSpec.extra_args:type_name -> talos.resource.definitions.k8s.KubeletConfigSpec.ExtraArgsEntry
	49, // 19: talos.resource.definitions.k8s.KubeletConfigSpec.extra_mounts:type_name -> talos.resource.definitions.proto.Mount
	47, // 20: talos.resource.definitions.k8s.KubeletConfigSpec.extra_config:type_name -> google.protobuf.Struct
	47, // 21: talos.resource.definitions.k8s.KubeletConfigSpec.credential_provider_config:type_name -> google.protobuf.Struct
	49, // 22: talos.resource.definitions.k8s.KubeletSpecSpec.extra_mounts:type_name -> talos.resource.definitions.proto.Mount
	47, // 23: talos.resource.definitions.k8s.KubeletSpecSpec.config:type_name -> google.protobuf.Struct
	47, // 24: talos.resource.definitions.k8s.KubeletSpecSpec.credential_provider_config:type_name -> google.protobuf.Struct
	31, // 25: talos.resource.definitions.k8s.ManifestSpec.items:type_name -> talos.resource.definitions.k8s.SingleManifest
	48, // 26: talos.resource.definitions.k8s.NodeIPSpec.addresses:type_name -> common.NetIP
	41, // 27: talos.resource.definitions.k8s.NodeStatusSpec.labels:type_name -> talos.resource.definitions.k8s.NodeStatusSpec.LabelsEntry
	42, // 28: talos.resource.definitions.k8s.NodeStatusSpec.annotations:type_name -> talos.resource.definitions.k8s.NodeStatusSpec.AnnotationsEntry
	43, // 29: talos.resource.definitions.k8s.Resources.requests:type_name -> talos.resource.definitions.k8s.Resources.RequestsEntry
	44, // 30: talos.resource.definitions.k8s.Resources.limits:type_name -> talos.resource.definitions.k8s.Resources.LimitsEntry
	45, // 31: talos.resource.definitions.k8s.SchedulerConfigSpec.extra_args:type_name -> talos.resource.definitions.k8s.SchedulerConfigSpec.ExtraArgsEntry
	12, // 32: talos.resource.definitions.k8s.SchedulerConfigSpec.extra_volumes:type_name -> talos.resource.definitions.k8s.ExtraVolume
	46, // 33: talos.resource.definitions.k8s.SchedulerConfigSpec.environment_variables:type_name -> talos.resource.definitions.k8s.SchedulerConfigSpec.EnvironmentVariablesEntry
	28, // 34: talos.resource.definitions.k8s.SchedulerConfigSpec.resources:type_name -> talos.resource.definitions.k8s.Resources
	47, // 35: talos.resource.definitions.k8s.SchedulerConfigSpec.config:type_name -> google.protobuf.Struct
	47, // 36: talos.resource.definitions.k8s.SingleManifest.object:type_name -> google.protobuf.Struct
	47, // 37: talos.resource.definitions.k8s.StaticPodSpec.pod:type_name -> google.protobuf.Struct
	47, // 38: talos.resource.definitions.k8s.StaticPodStatusSpec.pod_status:type_name -> google.protobuf.Struct
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_resource_definitions_k8s_k8s_proto_init() }
func file_resource_definitions_k8s_k8s_proto_init() {
	if File_resource_definitions_k8s_k8s_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_resource_definitions_k8s_k8s_proto_rawDesc), len(file_resource_definitions_k8s_k8s_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resource_definitions_k8s_k8s_proto_goTypes,
		DependencyIndexes: file_resource_definitions_k8s_k8s_proto_depIdxs,
		MessageInfos:      file_resource_definitions_k8s_k8s_proto_msgTypes,
	}.Build()
	File_resource_definitions_k8s_k8s_proto = out.File
	file_resource_definitions_k8s_k8s_proto_goTypes = nil
	file_resource_definitions_k8s_k8s_proto_depIdxs = nil
}

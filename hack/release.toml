# commit to be tagged for new release
commit = "HEAD"

project_name = "Talos"
github_repo = "talos-systems/talos"
match_deps = "^github.com/(talos-systems/[a-zA-Z0-9-]+)$"

# previous release
previous = "v0.13.0"

pre_release = true

preface = """\
"""

[notes]

    [notes.upgrades]
        title = "Kubernetes Upgrade Enhancements"
        description="""\
`talosctl upgrade-k8s` now syncs all Talos manifest resources generated from templates.

So there is no need to update CoreDNS, Flannel container manually after running `upgrade-k8s` anymore.
"""

    [notes.discovery]
        title = "Cluster Discovery"
        description="""\
Cluster Discovery is enabled by default for Talos 0.14.
Cluster Discovery can be disabled with `talosctl gen config --with-cluster-discovery=false`.
"""

    [notes.logs]
        title = "Log Shipping"
        description="""\
Talos can now ship system logs to the configured destination using either JSON-over-UDP or JSON-over-TCP:
see `.machine.logging` machine configuration option.
"""

    [notes.updates]
        title = "Component Updates"
        description="""\
* Linux: 5.10.75
* etcd: 3.5.1
* containerd: 1.5.7
* Kubernetes: 1.23.0-alpha.0
* CoreDNS: 1.8.6

Talos is built with Go 1.17.2
"""

    [notes.caps]
        title = "Kexec and capabilities"
        description = """\
When kexec support is disabled
Talos no longer drops Linux capabilities (`CAP_SYS_BOOT` and `CAP_SYS_MODULES`) for child processes.
That is helpful for advanced use-cases like Docker-in-Docker.

If you want to permanently disable kexec and capabilities dropping, pass `kexec_load_disabled=1` argument to the kernel.

For example:

```yaml
install:
  extraKernelArgs:
    - sysctl.kernel.kexec_load_disabled=1
```

Please note that capabilities are dropped before machine configuration is loaded,
so disabling kexec via `machine.sysctls` will not be enough.
"""

    [notes.support]
        title = "`talosctl support`"
        description = """\
`talosctl` CLI tool now has a new subcommand called `support`, that can gather all
cluster information that could help with future debugging in a single run.

Output of the command is a `zip` archive with all talos service logs, kubernetes pod logs and manifests,
talos resources manifests and so on.
Generated archive does not contain any secret information so it is safe to send it for analysis to a third party.
"""

[make_deps]

    [make_deps.tools]
        variable = "TOOLS"
        repository = "github.com/talos-systems/tools"

    [make_deps.pkgs]
        variable = "PKGS"
        repository = "github.com/talos-systems/pkgs"

    [make_deps.extras]
        variable = "EXTRAS"
        repository = "github.com/talos-systems/extras"
